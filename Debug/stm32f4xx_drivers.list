
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002348  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08002518  08002518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002638  08002638  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002638  08002638  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002638  08002638  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000084  080026c4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  080026c4  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037e6  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a4a  00000000  00000000  00023894  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000278  00000000  00000000  000242e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000210  00000000  00000000  00024558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003cfd  00000000  00000000  00024768  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002726  00000000  00000000  00028465  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000d19a  00000000  00000000  0002ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00037d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000100c  00000000  00000000  00037da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002500 	.word	0x08002500

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08002500 	.word	0x08002500

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <GPIO_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d157      	bne.n	8000382 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a59      	ldr	r2, [pc, #356]	; (800043c <GPIO_PeriClockControl+0x17c>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002da:	4b59      	ldr	r3, [pc, #356]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	4a58      	ldr	r2, [pc, #352]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80002e6:	e0a3      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a56      	ldr	r2, [pc, #344]	; (8000444 <GPIO_PeriClockControl+0x184>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002f0:	4b53      	ldr	r3, [pc, #332]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a52      	ldr	r2, [pc, #328]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fc:	e098      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a51      	ldr	r2, [pc, #324]	; (8000448 <GPIO_PeriClockControl+0x188>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000306:	4b4e      	ldr	r3, [pc, #312]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030a:	4a4d      	ldr	r2, [pc, #308]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000312:	e08d      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a4d      	ldr	r2, [pc, #308]	; (800044c <GPIO_PeriClockControl+0x18c>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800031c:	4b48      	ldr	r3, [pc, #288]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a47      	ldr	r2, [pc, #284]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000328:	e082      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a48      	ldr	r2, [pc, #288]	; (8000450 <GPIO_PeriClockControl+0x190>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000332:	4b43      	ldr	r3, [pc, #268]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a42      	ldr	r2, [pc, #264]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033e:	e077      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a44      	ldr	r2, [pc, #272]	; (8000454 <GPIO_PeriClockControl+0x194>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000348:	4b3d      	ldr	r3, [pc, #244]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a3c      	ldr	r2, [pc, #240]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000354:	e06c      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a3f      	ldr	r2, [pc, #252]	; (8000458 <GPIO_PeriClockControl+0x198>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800035e:	4b38      	ldr	r3, [pc, #224]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a37      	ldr	r2, [pc, #220]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036a:	e061      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a3b      	ldr	r2, [pc, #236]	; (800045c <GPIO_PeriClockControl+0x19c>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d15d      	bne.n	8000430 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000374:	4b32      	ldr	r3, [pc, #200]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a31      	ldr	r2, [pc, #196]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e056      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a2d      	ldr	r2, [pc, #180]	; (800043c <GPIO_PeriClockControl+0x17c>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800038a:	4b2d      	ldr	r3, [pc, #180]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a2c      	ldr	r2, [pc, #176]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000396:	e04b      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a2a      	ldr	r2, [pc, #168]	; (8000444 <GPIO_PeriClockControl+0x184>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80003a0:	4b27      	ldr	r3, [pc, #156]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a26      	ldr	r2, [pc, #152]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003a6:	f023 0302 	bic.w	r3, r3, #2
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ac:	e040      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a25      	ldr	r2, [pc, #148]	; (8000448 <GPIO_PeriClockControl+0x188>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a21      	ldr	r2, [pc, #132]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003bc:	f023 0304 	bic.w	r3, r3, #4
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c2:	e035      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a21      	ldr	r2, [pc, #132]	; (800044c <GPIO_PeriClockControl+0x18c>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80003cc:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003d2:	f023 0308 	bic.w	r3, r3, #8
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e02a      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a1c      	ldr	r2, [pc, #112]	; (8000450 <GPIO_PeriClockControl+0x190>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a16      	ldr	r2, [pc, #88]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003e8:	f023 0310 	bic.w	r3, r3, #16
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e01f      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a18      	ldr	r2, [pc, #96]	; (8000454 <GPIO_PeriClockControl+0x194>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a10      	ldr	r2, [pc, #64]	; (8000440 <GPIO_PeriClockControl+0x180>)
 80003fe:	f023 0320 	bic.w	r3, r3, #32
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e014      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a13      	ldr	r2, [pc, #76]	; (8000458 <GPIO_PeriClockControl+0x198>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e009      	b.n	8000430 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a0f      	ldr	r2, [pc, #60]	; (800045c <GPIO_PeriClockControl+0x19c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d105      	bne.n	8000430 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <GPIO_PeriClockControl+0x180>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a05      	ldr	r2, [pc, #20]	; (8000440 <GPIO_PeriClockControl+0x180>)
 800042a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40020000 	.word	0x40020000
 8000440:	40023800 	.word	0x40023800
 8000444:	40020400 	.word	0x40020400
 8000448:	40020800 	.word	0x40020800
 800044c:	40020c00 	.word	0x40020c00
 8000450:	40021000 	.word	0x40021000
 8000454:	40021400 	.word	0x40021400
 8000458:	40021800 	.word	0x40021800
 800045c:	40021c00 	.word	0x40021c00

08000460 <GPIO_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]

	/* Enable peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2101      	movs	r1, #1
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff24 	bl	80002c0 <GPIO_PeriClockControl>

	/* GPIO pin mode configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	795b      	ldrb	r3, [r3, #5]
 800047c:	2b03      	cmp	r3, #3
 800047e:	d822      	bhi.n	80004c6 <GPIO_Init+0x66>
	{
		/* Non interrupt mode */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	461a      	mov	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	fa02 f303 	lsl.w	r3, r2, r3
 8000490:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing pin
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	791b      	ldrb	r3, [r3, #4]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	2103      	movs	r1, #3
 80004a0:	fa01 f303 	lsl.w	r3, r1, r3
 80004a4:	43db      	mvns	r3, r3
 80004a6:	4619      	mov	r1, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	400a      	ands	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;//Setting pin
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	6819      	ldr	r1, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	430a      	orrs	r2, r1
 80004be:	601a      	str	r2, [r3, #0]
		temp = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	e0c1      	b.n	800064a <GPIO_Init+0x1ea>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795b      	ldrb	r3, [r3, #5]
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d117      	bne.n	80004fe <GPIO_Init+0x9e>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ce:	4b47      	ldr	r3, [pc, #284]	; (80005ec <GPIO_Init+0x18c>)
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	7912      	ldrb	r2, [r2, #4]
 80004d6:	4611      	mov	r1, r2
 80004d8:	2201      	movs	r2, #1
 80004da:	408a      	lsls	r2, r1
 80004dc:	4611      	mov	r1, r2
 80004de:	4a43      	ldr	r2, [pc, #268]	; (80005ec <GPIO_Init+0x18c>)
 80004e0:	430b      	orrs	r3, r1
 80004e2:	60d3      	str	r3, [r2, #12]
			/* Clear corresponding RTSR bit */
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e4:	4b41      	ldr	r3, [pc, #260]	; (80005ec <GPIO_Init+0x18c>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	7912      	ldrb	r2, [r2, #4]
 80004ec:	4611      	mov	r1, r2
 80004ee:	2201      	movs	r2, #1
 80004f0:	408a      	lsls	r2, r1
 80004f2:	43d2      	mvns	r2, r2
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a3d      	ldr	r2, [pc, #244]	; (80005ec <GPIO_Init+0x18c>)
 80004f8:	400b      	ands	r3, r1
 80004fa:	6093      	str	r3, [r2, #8]
 80004fc:	e035      	b.n	800056a <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	795b      	ldrb	r3, [r3, #5]
 8000502:	2b05      	cmp	r3, #5
 8000504:	d117      	bne.n	8000536 <GPIO_Init+0xd6>
		{
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000506:	4b39      	ldr	r3, [pc, #228]	; (80005ec <GPIO_Init+0x18c>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	7912      	ldrb	r2, [r2, #4]
 800050e:	4611      	mov	r1, r2
 8000510:	2201      	movs	r2, #1
 8000512:	408a      	lsls	r2, r1
 8000514:	4611      	mov	r1, r2
 8000516:	4a35      	ldr	r2, [pc, #212]	; (80005ec <GPIO_Init+0x18c>)
 8000518:	430b      	orrs	r3, r1
 800051a:	6093      	str	r3, [r2, #8]
			/* Clear corresponding FTSR bit */
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051c:	4b33      	ldr	r3, [pc, #204]	; (80005ec <GPIO_Init+0x18c>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	7912      	ldrb	r2, [r2, #4]
 8000524:	4611      	mov	r1, r2
 8000526:	2201      	movs	r2, #1
 8000528:	408a      	lsls	r2, r1
 800052a:	43d2      	mvns	r2, r2
 800052c:	4611      	mov	r1, r2
 800052e:	4a2f      	ldr	r2, [pc, #188]	; (80005ec <GPIO_Init+0x18c>)
 8000530:	400b      	ands	r3, r1
 8000532:	60d3      	str	r3, [r2, #12]
 8000534:	e019      	b.n	800056a <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	795b      	ldrb	r3, [r3, #5]
 800053a:	2b06      	cmp	r3, #6
 800053c:	d115      	bne.n	800056a <GPIO_Init+0x10a>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <GPIO_Init+0x18c>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	7912      	ldrb	r2, [r2, #4]
 8000546:	4611      	mov	r1, r2
 8000548:	2201      	movs	r2, #1
 800054a:	408a      	lsls	r2, r1
 800054c:	4611      	mov	r1, r2
 800054e:	4a27      	ldr	r2, [pc, #156]	; (80005ec <GPIO_Init+0x18c>)
 8000550:	430b      	orrs	r3, r1
 8000552:	60d3      	str	r3, [r2, #12]
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <GPIO_Init+0x18c>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <GPIO_Init+0x18c>)
 8000566:	430b      	orrs	r3, r1
 8000568:	6093      	str	r3, [r2, #8]
		}

		/* Configure GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	089b      	lsrs	r3, r3, #2
 8000570:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <GPIO_Init+0x190>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d044      	beq.n	8000610 <GPIO_Init+0x1b0>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <GPIO_Init+0x194>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d02b      	beq.n	80005e8 <GPIO_Init+0x188>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <GPIO_Init+0x198>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d024      	beq.n	80005e4 <GPIO_Init+0x184>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a17      	ldr	r2, [pc, #92]	; (80005fc <GPIO_Init+0x19c>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d01d      	beq.n	80005e0 <GPIO_Init+0x180>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a15      	ldr	r2, [pc, #84]	; (8000600 <GPIO_Init+0x1a0>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d016      	beq.n	80005dc <GPIO_Init+0x17c>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <GPIO_Init+0x1a4>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d00f      	beq.n	80005d8 <GPIO_Init+0x178>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <GPIO_Init+0x1a8>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d008      	beq.n	80005d4 <GPIO_Init+0x174>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <GPIO_Init+0x1ac>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d101      	bne.n	80005d0 <GPIO_Init+0x170>
 80005cc:	2307      	movs	r3, #7
 80005ce:	e020      	b.n	8000612 <GPIO_Init+0x1b2>
 80005d0:	2300      	movs	r3, #0
 80005d2:	e01e      	b.n	8000612 <GPIO_Init+0x1b2>
 80005d4:	2306      	movs	r3, #6
 80005d6:	e01c      	b.n	8000612 <GPIO_Init+0x1b2>
 80005d8:	2305      	movs	r3, #5
 80005da:	e01a      	b.n	8000612 <GPIO_Init+0x1b2>
 80005dc:	2304      	movs	r3, #4
 80005de:	e018      	b.n	8000612 <GPIO_Init+0x1b2>
 80005e0:	2303      	movs	r3, #3
 80005e2:	e016      	b.n	8000612 <GPIO_Init+0x1b2>
 80005e4:	2302      	movs	r3, #2
 80005e6:	e014      	b.n	8000612 <GPIO_Init+0x1b2>
 80005e8:	2301      	movs	r3, #1
 80005ea:	e012      	b.n	8000612 <GPIO_Init+0x1b2>
 80005ec:	40013c00 	.word	0x40013c00
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020400 	.word	0x40020400
 80005f8:	40020800 	.word	0x40020800
 80005fc:	40020c00 	.word	0x40020c00
 8000600:	40021000 	.word	0x40021000
 8000604:	40021400 	.word	0x40021400
 8000608:	40021800 	.word	0x40021800
 800060c:	40021c00 	.word	0x40021c00
 8000610:	2300      	movs	r3, #0
 8000612:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000614:	4b5c      	ldr	r3, [pc, #368]	; (8000788 <GPIO_Init+0x328>)
 8000616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000618:	4a5b      	ldr	r2, [pc, #364]	; (8000788 <GPIO_Init+0x328>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000620:	7c7a      	ldrb	r2, [r7, #17]
 8000622:	7cbb      	ldrb	r3, [r7, #18]
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	fa02 f103 	lsl.w	r1, r2, r3
 800062a:	4a58      	ldr	r2, [pc, #352]	; (800078c <GPIO_Init+0x32c>)
 800062c:	7cfb      	ldrb	r3, [r7, #19]
 800062e:	3302      	adds	r3, #2
 8000630:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/* Enable EXTI interrupt delivery using IMR */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000634:	4b56      	ldr	r3, [pc, #344]	; (8000790 <GPIO_Init+0x330>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	7912      	ldrb	r2, [r2, #4]
 800063c:	4611      	mov	r1, r2
 800063e:	2201      	movs	r2, #1
 8000640:	408a      	lsls	r2, r1
 8000642:	4611      	mov	r1, r2
 8000644:	4a52      	ldr	r2, [pc, #328]	; (8000790 <GPIO_Init+0x330>)
 8000646:	430b      	orrs	r3, r1
 8000648:	6013      	str	r3, [r2, #0]
	}

	/* GPIO pin speed configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	799b      	ldrb	r3, [r3, #6]
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	2103      	movs	r1, #3
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43db      	mvns	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	400a      	ands	r2, r1
 8000678:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6899      	ldr	r1, [r3, #8]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	430a      	orrs	r2, r1
 8000688:	609a      	str	r2, [r3, #8]
	temp = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]

	/* GPIO pull up/down settings configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	79db      	ldrb	r3, [r3, #7]
 8000692:	461a      	mov	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	68da      	ldr	r2, [r3, #12]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	2103      	movs	r1, #3
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4619      	mov	r1, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	400a      	ands	r2, r1
 80006bc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	68d9      	ldr	r1, [r3, #12]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]

	/* GPIO output type configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7a1b      	ldrb	r3, [r3, #8]
 80006d6:	461a      	mov	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	4619      	mov	r1, r3
 80006ee:	2301      	movs	r3, #1
 80006f0:	408b      	lsls	r3, r1
 80006f2:	43db      	mvns	r3, r3
 80006f4:	4619      	mov	r1, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	400a      	ands	r2, r1
 80006fc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6859      	ldr	r1, [r3, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	430a      	orrs	r2, r1
 800070c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]

	/* GPIO alt functionality configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	795b      	ldrb	r3, [r3, #5]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d131      	bne.n	800077e <GPIO_Init+0x31e>
	{
		/* Alt functionality registers configuration */
		uint8_t afrBitNum, afrLowHighReg;

		afrLowHighReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	743b      	strb	r3, [r7, #16]
		afrBitNum = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] &= ~(0xF << (4 * afrBitNum));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	7c3a      	ldrb	r2, [r7, #16]
 8000732:	3208      	adds	r2, #8
 8000734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	220f      	movs	r2, #15
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	7c3a      	ldrb	r2, [r7, #16]
 800074c:	4001      	ands	r1, r0
 800074e:	3208      	adds	r2, #8
 8000750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * afrBitNum);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	7c3a      	ldrb	r2, [r7, #16]
 800075a:	3208      	adds	r2, #8
 800075c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	7a5b      	ldrb	r3, [r3, #9]
 8000764:	461a      	mov	r2, r3
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	7c3a      	ldrb	r2, [r7, #16]
 8000776:	4301      	orrs	r1, r0
 8000778:	3208      	adds	r2, #8
 800077a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40013800 	.word	0x40013800
 8000790:	40013c00 	.word	0x40013c00

08000794 <GPIO_ReadFromInputPin>:
 *
 * @Note			- 0 or 1
 *
 *****************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t )((pGPIOx->IDR >> PinNumber) & 0x00000001 );
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	691a      	ldr	r2, [r3, #16]
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	fa22 f303 	lsr.w	r3, r2, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]

	return value;
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
	...

080007c0 <USART_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d141      	bne.n	8000856 <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a43      	ldr	r2, [pc, #268]	; (80008e4 <USART_PeriClockControl+0x124>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d106      	bne.n	80007e8 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 80007da:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <USART_PeriClockControl+0x128>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a42      	ldr	r2, [pc, #264]	; (80008e8 <USART_PeriClockControl+0x128>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 80007e6:	e077      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a40      	ldr	r2, [pc, #256]	; (80008ec <USART_PeriClockControl+0x12c>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d106      	bne.n	80007fe <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80007f0:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <USART_PeriClockControl+0x128>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a3c      	ldr	r2, [pc, #240]	; (80008e8 <USART_PeriClockControl+0x128>)
 80007f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007fc:	e06c      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a3b      	ldr	r2, [pc, #236]	; (80008f0 <USART_PeriClockControl+0x130>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d106      	bne.n	8000814 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <USART_PeriClockControl+0x128>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <USART_PeriClockControl+0x128>)
 800080c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000812:	e061      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a37      	ldr	r2, [pc, #220]	; (80008f4 <USART_PeriClockControl+0x134>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d106      	bne.n	800082a <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 800081c:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <USART_PeriClockControl+0x128>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a31      	ldr	r2, [pc, #196]	; (80008e8 <USART_PeriClockControl+0x128>)
 8000822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000828:	e056      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a32      	ldr	r2, [pc, #200]	; (80008f8 <USART_PeriClockControl+0x138>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d106      	bne.n	8000840 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <USART_PeriClockControl+0x128>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a2c      	ldr	r2, [pc, #176]	; (80008e8 <USART_PeriClockControl+0x128>)
 8000838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083e:	e04b      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a2e      	ldr	r2, [pc, #184]	; (80008fc <USART_PeriClockControl+0x13c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d147      	bne.n	80008d8 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <USART_PeriClockControl+0x128>)
 800084a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084c:	4a26      	ldr	r2, [pc, #152]	; (80008e8 <USART_PeriClockControl+0x128>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000854:	e040      	b.n	80008d8 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <USART_PeriClockControl+0x124>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <USART_PeriClockControl+0x128>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <USART_PeriClockControl+0x128>)
 8000864:	f023 0310 	bic.w	r3, r3, #16
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
}
 800086a:	e035      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <USART_PeriClockControl+0x12c>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d106      	bne.n	8000882 <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <USART_PeriClockControl+0x128>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <USART_PeriClockControl+0x128>)
 800087a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000880:	e02a      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a1a      	ldr	r2, [pc, #104]	; (80008f0 <USART_PeriClockControl+0x130>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <USART_PeriClockControl+0x128>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <USART_PeriClockControl+0x128>)
 8000890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000896:	e01f      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <USART_PeriClockControl+0x134>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d106      	bne.n	80008ae <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <USART_PeriClockControl+0x128>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <USART_PeriClockControl+0x128>)
 80008a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ac:	e014      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <USART_PeriClockControl+0x138>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d106      	bne.n	80008c4 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <USART_PeriClockControl+0x128>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <USART_PeriClockControl+0x128>)
 80008bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008c2:	e009      	b.n	80008d8 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <USART_PeriClockControl+0x13c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d105      	bne.n	80008d8 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <USART_PeriClockControl+0x128>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d0:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <USART_PeriClockControl+0x128>)
 80008d2:	f023 0320 	bic.w	r3, r3, #32
 80008d6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40011000 	.word	0x40011000
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40004400 	.word	0x40004400
 80008f0:	40004800 	.word	0x40004800
 80008f4:	40004c00 	.word	0x40004c00
 80008f8:	40005000 	.word	0x40005000
 80008fc:	40011400 	.word	0x40011400

08000900 <USART_PeripheralControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d106      	bne.n	8000920 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 800091e:	e005      	b.n	800092c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	60da      	str	r2, [r3, #12]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <USART_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]

	/* CR1 Configuration */
	/* Enabling clock for U(S)ART peripheral */
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2101      	movs	r1, #1
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff39 	bl	80007c0 <USART_PeriClockControl>

	/* Enabling USART Tx and Rx engines according to the USART Mode Config. item */
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d104      	bne.n	8000960 <USART_Init+0x2a>
	{
		/* Enabling Receiver bit field */
		tempreg |= (1 << USART_CR1_RE);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e014      	b.n	800098a <USART_Init+0x54>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	791b      	ldrb	r3, [r3, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d104      	bne.n	8000972 <USART_Init+0x3c>
	{
		/* Enabling Transmitter bit field */
		tempreg |= (1 << USART_CR1_TE);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e00b      	b.n	800098a <USART_Init+0x54>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	791b      	ldrb	r3, [r3, #4]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d107      	bne.n	800098a <USART_Init+0x54>
	{
		/* Enabling both, Transmitter and Receiver bit fields */
		tempreg |= (1 << USART_CR1_TE);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR1_RE);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	60fb      	str	r3, [r7, #12]
	}

	/* Configuring Word Length configuration item */
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7b5b      	ldrb	r3, [r3, #13]
 800098e:	031b      	lsls	r3, r3, #12
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4313      	orrs	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

	/* Parity control bit fields control */
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7b9b      	ldrb	r3, [r3, #14]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d104      	bne.n	80009aa <USART_Init+0x74>
	{
		/* Enabling parity control. EVEN parity select by default */
		tempreg |= (1 << USART_CR1_PCE);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e00b      	b.n	80009c2 <USART_Init+0x8c>

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7b9b      	ldrb	r3, [r3, #14]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d107      	bne.n	80009c2 <USART_Init+0x8c>
	{
		/* Enabling parity control */
	    tempreg |= (1 << USART_CR1_PCE);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b8:	60fb      	str	r3, [r7, #12]

	    /* Enabling ODD parity */
	    tempreg |= (1 << USART_CR1_PS);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c0:	60fb      	str	r3, [r7, #12]
	}

	/* Programming CR1 register */
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	60da      	str	r2, [r3, #12]


	/* CR2 Configuration */
	tempreg=0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]

	/* Configuring number of STOP bits inserted during USART frame transmission */
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7b1b      	ldrb	r3, [r3, #12]
 80009d2:	031b      	lsls	r3, r3, #12
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]

	/* Programming CR2 register */
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	611a      	str	r2, [r3, #16]


	/* CR3 Configuration */
	tempreg=0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]

	/* USART Hardware Flow control Configuration */
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7bdb      	ldrb	r3, [r3, #15]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d104      	bne.n	80009fa <USART_Init+0xc4>
	{
		/* Enabling CTS Flow control */
		tempreg |= (1 << USART_CR3_CTSE);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	e014      	b.n	8000a24 <USART_Init+0xee>
	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7bdb      	ldrb	r3, [r3, #15]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d104      	bne.n	8000a0c <USART_Init+0xd6>
	{
		/* Enabling RTS flow control */
		tempreg |= (1 << USART_CR3_RTSE);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	e00b      	b.n	8000a24 <USART_Init+0xee>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7bdb      	ldrb	r3, [r3, #15]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d107      	bne.n	8000a24 <USART_Init+0xee>
	{
		/* Enabling both CTS and RTS Flow control */
		tempreg |= (1 << USART_CR3_CTSE);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1a:	60fb      	str	r3, [r7, #12]
	    tempreg |= (1 << USART_CR3_RTSE);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	615a      	str	r2, [r3, #20]

	/* Configuring Baudrate */
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	4619      	mov	r1, r3
 8000a36:	4610      	mov	r0, r2
 8000a38:	f000 faaa 	bl	8000f90 <USART_SetBaudRate>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <USART_GetFlagStatus>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	4013      	ands	r3, r2
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e000      	b.n	8000a60 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <USART_SendData>:
 *
 * @Note 			  - None
 *
 *****************************************************************/
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Length)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

	/* Looping over until "Length" of bytes are transferred */
	for(uint32_t i = 0 ; i < Length; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	e031      	b.n	8000ae0 <USART_SendData+0x76>
	{
		/* Waiting till TXE flag is set in SR */
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000a7c:	bf00      	nop
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2180      	movs	r1, #128	; 0x80
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ffdd 	bl	8000a44 <USART_GetFlagStatus>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f6      	beq.n	8000a7e <USART_SendData+0x14>

		/* Checking USART_WordLength item for 9BIT or 8BIT in a frame */
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	7b5b      	ldrb	r3, [r3, #13]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d118      	bne.n	8000aca <USART_SendData+0x60>
		{
			/* If 9BIT, load DR with 2 bytes masking the bits other than first 9 bits */
			pdata = (uint16_t*) pTxBuffer;
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000aaa:	605a      	str	r2, [r3, #4]

			/* Checking for USART ParityControl */
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	7b9b      	ldrb	r3, [r3, #14]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d106      	bne.n	8000ac2 <USART_SendData+0x58>
			{
				/* No parity is used in this transfer. 9bits of user data will be sent */
				pTxBuffer++;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	e00b      	b.n	8000ada <USART_SendData+0x70>
			}
			else
			{
				/* Parity bit is used in this transfer. 8bits of user data will be sent */
				pTxBuffer++;
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	e007      	b.n	8000ada <USART_SendData+0x70>
			}
		}
		else
		{
			/* 8bit data transfer */
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]

			/* Increment buffer address */
			pTxBuffer++;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Length; i++)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3301      	adds	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d3c9      	bcc.n	8000a7c <USART_SendData+0x12>
		}
	}

	/* Waiting till TC flag is set in SR */
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000ae8:	bf00      	nop
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffa7 	bl	8000a44 <USART_GetFlagStatus>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f6      	beq.n	8000aea <USART_SendData+0x80>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <USART_ReceiveDataInterrupt>:
 *
 * @Note 			  - None
 *
 *****************************************************************/
uint8_t USART_ReceiveDataInterrupt(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Length)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b16:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000b18:	7dfb      	ldrb	r3, [r7, #23]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d011      	beq.n	8000b42 <USART_ReceiveDataInterrupt+0x3e>
	{
		pUSARTHandle->RxLen = Length;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/* Enabling RXNE interrupt */
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f042 0220 	orr.w	r2, r2, #32
 8000b40:	60da      	str	r2, [r3, #12]
	}

	return rxstate;
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	371c      	adds	r7, #28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
	...

08000b50 <USART_IRQInterruptConfig>:
 *
 * @Note			- None
 *
 *****************************************************************/
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	460a      	mov	r2, r1
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d133      	bne.n	8000bce <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b1f      	cmp	r3, #31
 8000b6a:	d80a      	bhi.n	8000b82 <USART_IRQInterruptConfig+0x32>
		{
			/* Program ISER0 register */
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000b6c:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <USART_IRQInterruptConfig+0xf0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <USART_IRQInterruptConfig+0xf0>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6013      	str	r3, [r2, #0]
		{
			/* Program ICER2 register (64 to 95) */
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000b80:	e059      	b.n	8000c36 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b1f      	cmp	r3, #31
 8000b86:	d90f      	bls.n	8000ba8 <USART_IRQInterruptConfig+0x58>
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b8c:	d80c      	bhi.n	8000ba8 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <USART_IRQInterruptConfig+0xf4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	79fa      	ldrb	r2, [r7, #7]
 8000b94:	f002 021f 	and.w	r2, r2, #31
 8000b98:	2101      	movs	r1, #1
 8000b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <USART_IRQInterruptConfig+0xf4>)
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e046      	b.n	8000c36 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bac:	d943      	bls.n	8000c36 <USART_IRQInterruptConfig+0xe6>
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b5f      	cmp	r3, #95	; 0x5f
 8000bb2:	d840      	bhi.n	8000c36 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <USART_IRQInterruptConfig+0xf8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	79fa      	ldrb	r2, [r7, #7]
 8000bba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a20      	ldr	r2, [pc, #128]	; (8000c48 <USART_IRQInterruptConfig+0xf8>)
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	e033      	b.n	8000c36 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b1f      	cmp	r3, #31
 8000bd2:	d80a      	bhi.n	8000bea <USART_IRQInterruptConfig+0x9a>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <USART_IRQInterruptConfig+0xf0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	4611      	mov	r1, r2
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <USART_IRQInterruptConfig+0xf0>)
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	e025      	b.n	8000c36 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b1f      	cmp	r3, #31
 8000bee:	d90f      	bls.n	8000c10 <USART_IRQInterruptConfig+0xc0>
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf4:	d80c      	bhi.n	8000c10 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <USART_IRQInterruptConfig+0xf4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	f002 021f 	and.w	r2, r2, #31
 8000c00:	2101      	movs	r1, #1
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	4611      	mov	r1, r2
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <USART_IRQInterruptConfig+0xf4>)
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e012      	b.n	8000c36 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b3f      	cmp	r3, #63	; 0x3f
 8000c14:	d90f      	bls.n	8000c36 <USART_IRQInterruptConfig+0xe6>
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b5f      	cmp	r3, #95	; 0x5f
 8000c1a:	d80c      	bhi.n	8000c36 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <USART_IRQInterruptConfig+0xf8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c26:	2101      	movs	r1, #1
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <USART_IRQInterruptConfig+0xf8>)
 8000c30:	430b      	orrs	r3, r1
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	e7ff      	b.n	8000c36 <USART_IRQInterruptConfig+0xe6>
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000e104 	.word	0xe000e104
 8000c48:	e000e108 	.word	0xe000e108

08000c4c <USART_IRQHandling>:
 *
 * @Note			- None
 *
 *****************************************************************/
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

	uint16_t *pdata;

	/* Checking for TC Flag */
	/* Checking state of TC bit in the SR */
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TC);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5e:	617b      	str	r3, [r7, #20]

	/* Checking state of TCEIE bit */
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TCIE);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6a:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d021      	beq.n	8000cb6 <USART_IRQHandling+0x6a>
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d01e      	beq.n	8000cb6 <USART_IRQHandling+0x6a>
	{
		/* TC caused Interrupt */

		/* Closing transmission and calling application callback if TxLen is zero */
		if (pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d119      	bne.n	8000cb6 <USART_IRQHandling+0x6a>
		{
			/* Checking TxLen. If it's zero, close data transmission */
			if(!pUSARTHandle->TxLen)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d115      	bne.n	8000cb6 <USART_IRQHandling+0x6a>
			{
				/* Clearing TC flag */
				pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_TC);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c98:	601a      	str	r2, [r3, #0]

				/* Clearing TCIE bit */
				//pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TCIE);

				/* Resetting application state */
				pUSARTHandle->TxBusyState = USART_READY;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]

				/* Resetting buffer address to NULL */
				pUSARTHandle->pTxBuffer = NULL;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]

				/* Resetting length to zero */
				pUSARTHandle->TxLen = 0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]

				/* Calling application callback with event USART_EVENT_TX_CMPLT */
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 fbab 	bl	800140c <USART_ApplicationEventCallback>
		}
	}

	/* Checking for TXE flag */
	/* Checking state for TXE bit in the SR */
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TXE);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc0:	617b      	str	r3, [r7, #20]

	/* Checking state for TXEIE bit in the CR1 */
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TXEIE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ccc:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d055      	beq.n	8000d80 <USART_IRQHandling+0x134>
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d052      	beq.n	8000d80 <USART_IRQHandling+0x134>
	{
		/* TXE caused interrupt */

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d14d      	bne.n	8000d80 <USART_IRQHandling+0x134>
		{
			/* Keep sending data till TxLen reaches zero */
			if(pUSARTHandle->TxLen > 0)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d03d      	beq.n	8000d68 <USART_IRQHandling+0x11c>
			{
				/* Checking the USART_WordLength item for 9BIT or 8BIT in a frame */
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7b5b      	ldrb	r3, [r3, #13]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d129      	bne.n	8000d48 <USART_IRQHandling+0xfc>
				{
					/* If 9BIT load the DR with 2 bytes masking the bits other than first 9 bits */
					pdata = (uint16_t*)pUSARTHandle->pTxBuffer;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d08:	605a      	str	r2, [r3, #4]

					/* Checking for USART_ParityControl */
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7b9b      	ldrb	r3, [r3, #14]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10f      	bne.n	8000d32 <USART_IRQHandling+0xe6>
					{
						/* No parity used in this transfer. 9 bits of user data will be sent */
						pUSARTHandle->pTxBuffer++;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	1e9a      	subs	r2, r3, #2
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	619a      	str	r2, [r3, #24]
 8000d30:	e01a      	b.n	8000d68 <USART_IRQHandling+0x11c>
					}
					else
					{
						/* Parity used in this transfer. 8 bits of user data will be sent.
						   9th bit will be replaced by parity bit by the hardware        */
						pUSARTHandle->pTxBuffer++;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	619a      	str	r2, [r3, #24]
 8000d46:	e00f      	b.n	8000d68 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					/* 8bit data transfer */
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer & (uint8_t)0xFF);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]

					/* Incrementing buffer address */
					pUSARTHandle->pTxBuffer++;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	1e5a      	subs	r2, r3, #1
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	619a      	str	r2, [r3, #24]
				}
			}
			if (pUSARTHandle->TxLen == 0 )
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d107      	bne.n	8000d80 <USART_IRQHandling+0x134>
			{
				/* Tx Len is zero. Clearing TXEIE bit (disabling interrupt for TXE flag) */
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d7e:	60da      	str	r2, [r3, #12]
			}
		}
	}

	/* Checking for RXNE flag */
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d073      	beq.n	8000e86 <USART_IRQHandling+0x23a>
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d070      	beq.n	8000e86 <USART_IRQHandling+0x23a>
	{
		/* RXNE caused interrupt */
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d16b      	bne.n	8000e86 <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d053      	beq.n	8000e5e <USART_IRQHandling+0x212>
			{
				/* Checking the USART_WordLength item for 9BIT or 8BIT in a frame */
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7b5b      	ldrb	r3, [r3, #13]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d12f      	bne.n	8000e1e <USART_IRQHandling+0x1d2>
				{
					/* Receiving 9bit data in a frame */

					/* Checking if USART_ParityControl control is used or not */
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7b9b      	ldrb	r3, [r3, #14]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d119      	bne.n	8000dfa <USART_IRQHandling+0x1ae>
					{
						/* No parity is used. All 9bits will be of user data */

						/* Reading only first 9 bits. Masking DR with 0x01FF */
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dd6:	b292      	uxth	r2, r2
 8000dd8:	801a      	strh	r2, [r3, #0]

						pUSARTHandle->pRxBuffer++;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	1e9a      	subs	r2, r3, #2
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	61da      	str	r2, [r3, #28]
 8000df8:	e031      	b.n	8000e5e <USART_IRQHandling+0x212>
					}
					else
					{
						/* Parity is used. 8bits will be of user data and 1 bit is parity */
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	61da      	str	r2, [r3, #28]
 8000e1c:	e01f      	b.n	8000e5e <USART_IRQHandling+0x212>
				else
				{
					/* Receiving 8bit data in a frame */

					/* Checking if USART_ParityControl control is used or not */
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7b9b      	ldrb	r3, [r3, #14]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d107      	bne.n	8000e36 <USART_IRQHandling+0x1ea>
					{
						/* No parity is used. All 9bits will be of user data */

						/* Reading 8 bits from DR */
						 *pUSARTHandle->pRxBuffer = (uint8_t)(pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e009      	b.n	8000e4a <USART_IRQHandling+0x1fe>
					else
					{
						/* Parity is used. 7 bits will be of user data and 1 bit is parity */

						/* Reading only 7 bits. Masking DR with 0x7F */
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	701a      	strb	r2, [r3, #0]
					}

					/* Incrementing the pRxBuffer */
					pUSARTHandle->pRxBuffer++;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	615a      	str	r2, [r3, #20]
					pUSARTHandle->RxLen-=1;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	61da      	str	r2, [r3, #28]
				}
			}

			if(!pUSARTHandle->RxLen)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10f      	bne.n	8000e86 <USART_IRQHandling+0x23a>
			{
				/* Disabling the RXNE */
				pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_RXNEIE );
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0220 	bic.w	r2, r2, #32
 8000e74:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 fac3 	bl	800140c <USART_ApplicationEventCallback>
		}
	}

	/* Checking for CTS flag. CTS feature is not applicable for UART4 and UART5 */
	/* Checking status of CTS bit in the SR */
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_CTS);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e90:	617b      	str	r3, [r7, #20]

	/* Checking state of CTSE bit in CR1 */
	temp2 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSE);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e9c:	613b      	str	r3, [r7, #16]

	/* Checking state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.) */
	temp3 = pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_CTSIE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea8:	60bb      	str	r3, [r7, #8]

	if(temp1  && temp2)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00e      	beq.n	8000ece <USART_IRQHandling+0x282>
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00b      	beq.n	8000ece <USART_IRQHandling+0x282>
	{
		/* Clearing CTS flag in SR */
		pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_CTS);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ec4:	601a      	str	r2, [r3, #0]

		/* CTS caused interrupt */
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fa9f 	bl	800140c <USART_ApplicationEventCallback>
	}

	/* Checking for IDLE detection flag */
	/* Checking status of IDLE flag bit in SR */
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_IDLE);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	617b      	str	r3, [r7, #20]

	/* Checking state of IDLEIE bit in CR1 */
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_IDLEIE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00f      	beq.n	8000f0c <USART_IRQHandling+0x2c0>
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00c      	beq.n	8000f0c <USART_IRQHandling+0x2c0>
	{
		/* Clearing IDLE flag. Referring to the RM to understand the clear sequence */
		temp1 = pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_IDLE);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	f023 0310 	bic.w	r3, r3, #16
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	617b      	str	r3, [r7, #20]

		/* IDLE caused interrupt */
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8000f04:	2102      	movs	r1, #2
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fa80 	bl	800140c <USART_ApplicationEventCallback>
	}

	/* Checking for OverRun detection flag */

	/* Checking status of ORE flag in the SR */
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	617b      	str	r3, [r7, #20]

	/* Checking status of RXNEIE  bit in the CR1 */
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f003 0305 	and.w	r3, r3, #5
 8000f22:	613b      	str	r3, [r7, #16]
	if(temp1  && temp2)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <USART_IRQHandling+0x2ec>
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <USART_IRQHandling+0x2ec>
	{
		/* OverRun error caused interrupt */
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8000f30:	2107      	movs	r1, #7
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fa6a 	bl	800140c <USART_ApplicationEventCallback>
	}

	/* Checking for Error Flag */
	/* Noise Flag, OverRun Error and Framing Error  in MultiBuffer Communication */
	/* This part of code will be executed only if MultiBuffer mode is used 		 */
	temp2 =  pUSARTHandle->pUSARTx->CR3 & (1 << USART_CR3_EIE) ;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d01e      	beq.n	8000f88 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	617b      	str	r3, [r7, #20]
		if(temp1 & (1 << USART_SR_FE))
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fa54 	bl	800140c <USART_ApplicationEventCallback>
		}

		if(temp1 & (1 << USART_SR_NF))
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8000f6e:	2106      	movs	r1, #6
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 fa4b 	bl	800140c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8000f80:	2107      	movs	r1, #7
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 fa42 	bl	800140c <USART_ApplicationEventCallback>
		}
	}
}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <USART_SetBaudRate>:
 *
 * @Note              - None
 *
 ********************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	/* Hold Mantissa and Fraction values */
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]

	/* Getting value of APB bus clock into the variable PCLKxn */
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a31      	ldr	r2, [pc, #196]	; (8001068 <USART_SetBaudRate+0xd8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d003      	beq.n	8000fae <USART_SetBaudRate+0x1e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a30      	ldr	r2, [pc, #192]	; (800106c <USART_SetBaudRate+0xdc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d103      	bne.n	8000fb6 <USART_SetBaudRate+0x26>
	{
		/* USART1 and USART6 are hanging on APB2 bus */
		PCLKx = RCC_GetPCLK2Value();
 8000fae:	f000 f8b9 	bl	8001124 <RCC_GetPCLK2Value>
 8000fb2:	61f8      	str	r0, [r7, #28]
 8000fb4:	e002      	b.n	8000fbc <USART_SetBaudRate+0x2c>
	}
	else
	{
		PCLKx = RCC_GetPCLK1Value();
 8000fb6:	f000 f85d 	bl	8001074 <RCC_GetPCLK1Value>
 8000fba:	61f8      	str	r0, [r7, #28]
	}

	/* Checking for OVER8 configuration bit */
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00b      	beq.n	8000fe0 <USART_SetBaudRate+0x50>
	{
		/* OVER8 = 1. Over sampling by 8 */
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	009a      	lsls	r2, r3, #2
 8000fd2:	441a      	add	r2, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	e00a      	b.n	8000ff6 <USART_SetBaudRate+0x66>
	}
	else
	{
		/* OVER8 = 0. Over sampling by 16 */
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009a      	lsls	r2, r3, #2
 8000fea:	441a      	add	r2, r3
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff4:	61bb      	str	r3, [r7, #24]
	}

	/* Calculating Mantissa part */
	M_part = usartdiv/100;
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <USART_SetBaudRate+0xe0>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	60fb      	str	r3, [r7, #12]

	/* Placing Mantissa part in appropriate bit position. USART_BRR */
	tempreg |= M_part << 4;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

	/* Extracting fractional part */
	F_part = (usartdiv - (M_part * 100));
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2264      	movs	r2, #100	; 0x64
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]

	/* Calculating final fractional part */
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00a      	beq.n	800103c <USART_SetBaudRate+0xac>
	{
		/* OVER8 = 1. Over sampling by 8 */
		F_part = (((F_part * 8) + 50) / 100) & ((uint8_t)0x07);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	3332      	adds	r3, #50	; 0x32
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <USART_SetBaudRate+0xe0>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e009      	b.n	8001050 <USART_SetBaudRate+0xc0>
	}
	else
	{
		/* OVER8 = 0. Over sampling by 16 */
		F_part = ((( F_part * 16) + 50) / 100) & ((uint8_t)0x0F);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	3332      	adds	r3, #50	; 0x32
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <USART_SetBaudRate+0xe0>)
 8001044:	fba2 2303 	umull	r2, r3, r2, r3
 8001048:	095b      	lsrs	r3, r3, #5
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	617b      	str	r3, [r7, #20]
	}

	/* Placing fractional part in appropriate bit position. USART_BRR */
	tempreg |= F_part;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

	/* Coping value of tempreg in to BRR register */
	pUSARTx->BRR = tempreg;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	609a      	str	r2, [r3, #8]
}
 800105e:	bf00      	nop
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40011000 	.word	0x40011000
 800106c:	40011400 	.word	0x40011400
 8001070:	51eb851f 	.word	0x51eb851f

08001074 <RCC_GetPCLK1Value>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800107a:	4b25      	ldr	r3, [pc, #148]	; (8001110 <RCC_GetPCLK1Value+0x9c>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8001088:	7a7b      	ldrb	r3, [r7, #9]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <RCC_GetPCLK1Value+0xa0>)
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e00b      	b.n	80010ac <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)
 8001094:	7a7b      	ldrb	r3, [r7, #9]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <RCC_GetPCLK1Value+0xa4>)
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e005      	b.n	80010ac <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 80010a0:	7a7b      	ldrb	r3, [r7, #9]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d102      	bne.n	80010ac <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80010a6:	f000 f895 	bl	80011d4 <RCC_GetPLLOutputClock>
 80010aa:	60f8      	str	r0, [r7, #12]
	}

	/* AHBP */
	temp = ((RCC->CFGR >> 4) & 0xF);
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <RCC_GetPCLK1Value+0x9c>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80010ba:	7a3b      	ldrb	r3, [r7, #8]
 80010bc:	2b07      	cmp	r3, #7
 80010be:	d802      	bhi.n	80010c6 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	72fb      	strb	r3, [r7, #11]
 80010c4:	e005      	b.n	80010d2 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_Prescaler[temp-8];
 80010c6:	7a3b      	ldrb	r3, [r7, #8]
 80010c8:	3b08      	subs	r3, #8
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <RCC_GetPCLK1Value+0xa8>)
 80010cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d0:	72fb      	strb	r3, [r7, #11]
	}

	/* APB1 */
	temp = ((RCC->CFGR >> 10) & 0x7);
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <RCC_GetPCLK1Value+0x9c>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	0a9b      	lsrs	r3, r3, #10
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80010e0:	7a3b      	ldrb	r3, [r7, #8]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d802      	bhi.n	80010ec <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	72bb      	strb	r3, [r7, #10]
 80010ea:	e004      	b.n	80010f6 <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APBx_Prescaler[temp-4];
 80010ec:	7a3b      	ldrb	r3, [r7, #8]
 80010ee:	3b04      	subs	r3, #4
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <RCC_GetPCLK1Value+0xac>)
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80010fe:	7abb      	ldrb	r3, [r7, #10]
 8001100:	fbb2 f3f3 	udiv	r3, r2, r3
 8001104:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001106:	687b      	ldr	r3, [r7, #4]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	00f42400 	.word	0x00f42400
 8001118:	007a1200 	.word	0x007a1200
 800111c:	20000000 	.word	0x20000000
 8001120:	20000010 	.word	0x20000010

08001124 <RCC_GetPCLK2Value>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint32_t RCC_GetPCLK2Value(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk = 0, temp, pclk2;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]

	uint8_t clksrc = ((RCC->CFGR >> 2) & 0x3);
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <RCC_GetPCLK2Value+0x9c>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	747b      	strb	r3, [r7, #17]

	uint8_t ahbp,apb2p;

	if(clksrc == 0)
 800113c:	7c7b      	ldrb	r3, [r7, #17]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <RCC_GetPCLK2Value+0x24>
	{
		SystemClk = 16000000;
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <RCC_GetPCLK2Value+0xa0>)
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e00b      	b.n	8001160 <RCC_GetPCLK2Value+0x3c>
	}
	else if(clksrc == 1)
 8001148:	7c7b      	ldrb	r3, [r7, #17]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d102      	bne.n	8001154 <RCC_GetPCLK2Value+0x30>
	{
		SystemClk = 8000000;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <RCC_GetPCLK2Value+0xa4>)
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e005      	b.n	8001160 <RCC_GetPCLK2Value+0x3c>
	}
	else if(clksrc == 2)
 8001154:	7c7b      	ldrb	r3, [r7, #17]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d102      	bne.n	8001160 <RCC_GetPCLK2Value+0x3c>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800115a:	f000 f83b 	bl	80011d4 <RCC_GetPLLOutputClock>
 800115e:	6178      	str	r0, [r7, #20]
	}

	/* AHBP */
	temp = ((RCC->CFGR >> 4) & 0xF);
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <RCC_GetPCLK2Value+0x9c>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	60fb      	str	r3, [r7, #12]

	if(temp < 8)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b07      	cmp	r3, #7
 8001170:	d802      	bhi.n	8001178 <RCC_GetPCLK2Value+0x54>
	{
		ahbp = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	74fb      	strb	r3, [r7, #19]
 8001176:	e005      	b.n	8001184 <RCC_GetPCLK2Value+0x60>
	}
	else
	{
		ahbp = AHB_Prescaler[temp-8];
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3b08      	subs	r3, #8
 800117c:	4a13      	ldr	r2, [pc, #76]	; (80011cc <RCC_GetPCLK2Value+0xa8>)
 800117e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001182:	74fb      	strb	r3, [r7, #19]
	}

	/* APB2 */
	temp = ((RCC->CFGR >> 13) & 0x7);
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <RCC_GetPCLK2Value+0x9c>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	0b5b      	lsrs	r3, r3, #13
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

	if(temp < 4)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d802      	bhi.n	800119c <RCC_GetPCLK2Value+0x78>
	{
		apb2p = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	74bb      	strb	r3, [r7, #18]
 800119a:	e004      	b.n	80011a6 <RCC_GetPCLK2Value+0x82>
	}
	else
	{
		apb2p = APBx_Prescaler[temp-4];
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3b04      	subs	r3, #4
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <RCC_GetPCLK2Value+0xac>)
 80011a2:	5cd3      	ldrb	r3, [r2, r3]
 80011a4:	74bb      	strb	r3, [r7, #18]
	}

	pclk1 = (SystemClk / ahbp) / apb2p;
 80011a6:	7cfb      	ldrb	r3, [r7, #19]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80011ae:	7cbb      	ldrb	r3, [r7, #18]
 80011b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b4:	60bb      	str	r3, [r7, #8]

	return pclk2;
 80011b6:	687b      	ldr	r3, [r7, #4]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	00f42400 	.word	0x00f42400
 80011c8:	007a1200 	.word	0x007a1200
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000010 	.word	0x20000010

080011d4 <RCC_GetPLLOutputClock>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint32_t RCC_GetPLLOutputClock(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	/* Not used for now */
	return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
	...

080011e4 <USART3_Init>:
uint8_t rxCmplt = RESET;

uint8_t g_data = 0;

void USART3_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	USART3Handle.pUSARTx = USART3;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <USART3_Init+0x3c>)
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <USART3_Init+0x40>)
 80011ec:	601a      	str	r2, [r3, #0]
	USART3Handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <USART3_Init+0x3c>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	609a      	str	r2, [r3, #8]
	USART3Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <USART3_Init+0x3c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	73da      	strb	r2, [r3, #15]
	USART3Handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <USART3_Init+0x3c>)
 80011fe:	2202      	movs	r2, #2
 8001200:	711a      	strb	r2, [r3, #4]
	USART3Handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <USART3_Init+0x3c>)
 8001204:	2200      	movs	r2, #0
 8001206:	731a      	strb	r2, [r3, #12]
	USART3Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <USART3_Init+0x3c>)
 800120a:	2200      	movs	r2, #0
 800120c:	735a      	strb	r2, [r3, #13]
	USART3Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <USART3_Init+0x3c>)
 8001210:	2200      	movs	r2, #0
 8001212:	739a      	strb	r2, [r3, #14]

	USART_Init(&USART3Handle);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <USART3_Init+0x3c>)
 8001216:	f7ff fb8e 	bl	8000936 <USART_Init>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000b0 	.word	0x200000b0
 8001224:	40004800 	.word	0x40004800

08001228 <USART3_GPIOInit>:
/*
 * PC10-> TX
 * PC11-> RX
 */
void USART3_GPIOInit(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
	GPIO_Handle_t USART3Pins;

	USART3Pins.pGPIOx = GPIOC;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <USART3_GPIOInit+0x40>)
 8001230:	607b      	str	r3, [r7, #4]
	USART3Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001232:	2302      	movs	r3, #2
 8001234:	727b      	strb	r3, [r7, #9]
	USART3Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001236:	2301      	movs	r3, #1
 8001238:	733b      	strb	r3, [r7, #12]
	USART3Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800123a:	2301      	movs	r3, #1
 800123c:	72fb      	strb	r3, [r7, #11]
	USART3Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800123e:	2307      	movs	r3, #7
 8001240:	737b      	strb	r3, [r7, #13]
	USART3Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001242:	2302      	movs	r3, #2
 8001244:	72bb      	strb	r3, [r7, #10]

	/* TX */
	USART3Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8001246:	230a      	movs	r3, #10
 8001248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART3Pins);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f907 	bl	8000460 <GPIO_Init>


	/* RX */
	USART3Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 8001252:	230b      	movs	r3, #11
 8001254:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART3Pins);
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f901 	bl	8000460 <GPIO_Init>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40020800 	.word	0x40020800

0800126c <GPIO_ButtonInit>:


void GPIO_ButtonInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn,GpioLed;

	/* BTN GPIO Config */
	GpioBtn.pGPIOx = GPIOC;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <GPIO_ButtonInit+0x54>)
 8001274:	60fb      	str	r3, [r7, #12]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8001276:	230d      	movs	r3, #13
 8001278:	743b      	strb	r3, [r7, #16]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800127a:	2300      	movs	r3, #0
 800127c:	747b      	strb	r3, [r7, #17]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800127e:	2302      	movs	r3, #2
 8001280:	74bb      	strb	r3, [r7, #18]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8001282:	2300      	movs	r3, #0
 8001284:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GpioBtn);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f8e8 	bl	8000460 <GPIO_Init>

	/* LED GPIO Config */
	GpioLed.pGPIOx = GPIOA;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <GPIO_ButtonInit+0x58>)
 8001292:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8001294:	2305      	movs	r3, #5
 8001296:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001298:	2301      	movs	r3, #1
 800129a:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800129c:	2302      	movs	r3, #2
 800129e:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80012a0:	2300      	movs	r3, #0
 80012a2:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 80012a4:	2300      	movs	r3, #0
 80012a6:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 80012a8:	2101      	movs	r1, #1
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <GPIO_ButtonInit+0x58>)
 80012ac:	f7ff f808 	bl	80002c0 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80012b0:	463b      	mov	r3, r7
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f8d4 	bl	8000460 <GPIO_Init>
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020000 	.word	0x40020000

080012c8 <delay>:


void delay(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	e002      	b.n	80012da <delay+0x12>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3301      	adds	r3, #1
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a03      	ldr	r2, [pc, #12]	; (80012ec <delay+0x24>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d9f8      	bls.n	80012d4 <delay+0xc>
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	0003d08f 	.word	0x0003d08f

080012f0 <main>:


int main(void)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]

	GPIO_ButtonInit();
 80012fa:	f7ff ffb7 	bl	800126c <GPIO_ButtonInit>

	USART3_GPIOInit();
 80012fe:	f7ff ff93 	bl	8001228 <USART3_GPIOInit>

    USART3_Init();
 8001302:	f7ff ff6f 	bl	80011e4 <USART3_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART3, ENABLE);
 8001306:	2101      	movs	r1, #1
 8001308:	2027      	movs	r0, #39	; 0x27
 800130a:	f7ff fc21 	bl	8000b50 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART3, ENABLE);
 800130e:	2101      	movs	r1, #1
 8001310:	482f      	ldr	r0, [pc, #188]	; (80013d0 <main+0xe0>)
 8001312:	f7ff faf5 	bl	8000900 <USART_PeripheralControl>

    printf("Application is running\n");
 8001316:	482f      	ldr	r0, [pc, #188]	; (80013d4 <main+0xe4>)
 8001318:	f000 fa20 	bl	800175c <puts>

    while(1)
    {
		/* Wait till button is pressed */
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 800131c:	bf00      	nop
 800131e:	210d      	movs	r1, #13
 8001320:	482d      	ldr	r0, [pc, #180]	; (80013d8 <main+0xe8>)
 8001322:	f7ff fa37 	bl	8000794 <GPIO_ReadFromInputPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f8      	bne.n	800131e <main+0x2e>

		/* De-bouncing protection */
		delay();
 800132c:	f7ff ffcc 	bl	80012c8 <delay>

		/* Next message index. Value shoudn't cross 2. */
		cnt = cnt % 3;
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <main+0xec>)
 8001334:	fba3 1302 	umull	r1, r3, r3, r2
 8001338:	0859      	lsrs	r1, r3, #1
 800133a:	460b      	mov	r3, r1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	440b      	add	r3, r1
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	607b      	str	r3, [r7, #4]

		while(USART_ReceiveDataInterrupt(&USART3Handle, (uint8_t *)rx_buffer, strlen(msg[cnt])) != USART_READY);
 8001344:	bf00      	nop
 8001346:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <main+0xf0>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ff5e 	bl	8000210 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4922      	ldr	r1, [pc, #136]	; (80013e4 <main+0xf4>)
 800135a:	4823      	ldr	r0, [pc, #140]	; (80013e8 <main+0xf8>)
 800135c:	f7ff fbd2 	bl	8000b04 <USART_ReceiveDataInterrupt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ef      	bne.n	8001346 <main+0x56>

    	USART_SendData(&USART3Handle, (uint8_t*)msg[cnt], strlen(msg[cnt]));
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <main+0xf0>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <main+0xf0>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ff4a 	bl	8000210 <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4621      	mov	r1, r4
 8001382:	4819      	ldr	r0, [pc, #100]	; (80013e8 <main+0xf8>)
 8001384:	f7ff fb71 	bl	8000a6a <USART_SendData>

    	printf("Transmitted : %s\n", msg[cnt]);
 8001388:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <main+0xf0>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	4619      	mov	r1, r3
 8001392:	4816      	ldr	r0, [pc, #88]	; (80013ec <main+0xfc>)
 8001394:	f000 f96e 	bl	8001674 <iprintf>

    	while(rxCmplt != SET);
 8001398:	bf00      	nop
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <main+0x100>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d1fb      	bne.n	800139a <main+0xaa>

    	rx_buffer[strlen(msg[cnt])+ 1] = '\0';
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <main+0xf0>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe ff30 	bl	8000210 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <main+0xf4>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	54d1      	strb	r1, [r2, r3]

    	printf("Received: %s\n", rx_buffer);
 80013ba:	490a      	ldr	r1, [pc, #40]	; (80013e4 <main+0xf4>)
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <main+0x104>)
 80013be:	f000 f959 	bl	8001674 <iprintf>

    	rxCmplt = RESET;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <main+0x100>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]

    	cnt ++;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3301      	adds	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 80013ce:	e7a5      	b.n	800131c <main+0x2c>
 80013d0:	40004800 	.word	0x40004800
 80013d4:	08002558 	.word	0x08002558
 80013d8:	40020800 	.word	0x40020800
 80013dc:	aaaaaaab 	.word	0xaaaaaaab
 80013e0:	20000014 	.word	0x20000014
 80013e4:	200000d4 	.word	0x200000d4
 80013e8:	200000b0 	.word	0x200000b0
 80013ec:	08002570 	.word	0x08002570
 80013f0:	200000a0 	.word	0x200000a0
 80013f4:	08002584 	.word	0x08002584

080013f8 <USART3_IRQHandler>:
	return 0;
}


void USART3_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	USART_IRQHandling(&USART3Handle);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <USART3_IRQHandler+0x10>)
 80013fe:	f7ff fc25 	bl	8000c4c <USART_IRQHandling>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200000b0 	.word	0x200000b0

0800140c <USART_ApplicationEventCallback>:


void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle, uint8_t AppEvent)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
   if(AppEvent == USART_EVENT_RX_CMPLT)
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d103      	bne.n	8001426 <USART_ApplicationEventCallback+0x1a>
   {
			rxCmplt = SET;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <USART_ApplicationEventCallback+0x30>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]

   }else if (AppEvent == USART_EVENT_TX_CMPLT)
   {
	   printf("Tx Complete\n");
   }
}
 8001424:	e005      	b.n	8001432 <USART_ApplicationEventCallback+0x26>
   }else if (AppEvent == USART_EVENT_TX_CMPLT)
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <USART_ApplicationEventCallback+0x26>
	   printf("Tx Complete\n");
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <USART_ApplicationEventCallback+0x34>)
 800142e:	f000 f995 	bl	800175c <puts>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200000a0 	.word	0x200000a0
 8001440:	08002594 	.word	0x08002594

08001444 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <ITM_SendChar+0x44>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <ITM_SendChar+0x44>)
 8001454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001458:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <ITM_SendChar+0x48>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <ITM_SendChar+0x48>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001466:	bf00      	nop
 8001468:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f8      	beq.n	8001468 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001476:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	e000edfc 	.word	0xe000edfc
 800148c:	e0000e00 	.word	0xe0000e00

08001490 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e00a      	b.n	80014b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014a2:	f3af 8000 	nop.w
 80014a6:	4601      	mov	r1, r0
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	60ba      	str	r2, [r7, #8]
 80014ae:	b2ca      	uxtb	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf0      	blt.n	80014a2 <_read+0x12>
	}

return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);	//ITM Debuger enabled
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffad 	bl	8001444 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>
	}
	return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_close>:

int _close(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
	return -1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001528:	605a      	str	r2, [r3, #4]
	return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
	return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
	...

08001564 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x50>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x16>
		heap_end = &end;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <_sbrk+0x50>)
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <_sbrk+0x54>)
 8001578:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <_sbrk+0x50>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <_sbrk+0x50>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	466a      	mov	r2, sp
 800158a:	4293      	cmp	r3, r2
 800158c:	d907      	bls.n	800159e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800158e:	f000 f83f 	bl	8001610 <__errno>
 8001592:	4602      	mov	r2, r0
 8001594:	230c      	movs	r3, #12
 8001596:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	e006      	b.n	80015ac <_sbrk+0x48>
	}

	heap_end += incr;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <_sbrk+0x50>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <_sbrk+0x50>)
 80015a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200000a4 	.word	0x200000a4
 80015b8:	200004d8 	.word	0x200004d8

080015bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <LoopForever+0xe>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d8:	4c0b      	ldr	r4, [pc, #44]	; (8001608 <LoopForever+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015e6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80015ea:	f000 f817 	bl	800161c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ee:	f7ff fe7f 	bl	80012f0 <main>

080015f2 <LoopForever>:

LoopForever:
    b LoopForever
 80015f2:	e7fe      	b.n	80015f2 <LoopForever>
  ldr   r0, =_estack
 80015f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001600:	08002640 	.word	0x08002640
  ldr r2, =_sbss
 8001604:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001608:	200004d8 	.word	0x200004d8

0800160c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>
	...

08001610 <__errno>:
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <__errno+0x8>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000020 	.word	0x20000020

0800161c <__libc_init_array>:
 800161c:	b570      	push	{r4, r5, r6, lr}
 800161e:	4e0d      	ldr	r6, [pc, #52]	; (8001654 <__libc_init_array+0x38>)
 8001620:	4c0d      	ldr	r4, [pc, #52]	; (8001658 <__libc_init_array+0x3c>)
 8001622:	1ba4      	subs	r4, r4, r6
 8001624:	10a4      	asrs	r4, r4, #2
 8001626:	2500      	movs	r5, #0
 8001628:	42a5      	cmp	r5, r4
 800162a:	d109      	bne.n	8001640 <__libc_init_array+0x24>
 800162c:	4e0b      	ldr	r6, [pc, #44]	; (800165c <__libc_init_array+0x40>)
 800162e:	4c0c      	ldr	r4, [pc, #48]	; (8001660 <__libc_init_array+0x44>)
 8001630:	f000 ff66 	bl	8002500 <_init>
 8001634:	1ba4      	subs	r4, r4, r6
 8001636:	10a4      	asrs	r4, r4, #2
 8001638:	2500      	movs	r5, #0
 800163a:	42a5      	cmp	r5, r4
 800163c:	d105      	bne.n	800164a <__libc_init_array+0x2e>
 800163e:	bd70      	pop	{r4, r5, r6, pc}
 8001640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001644:	4798      	blx	r3
 8001646:	3501      	adds	r5, #1
 8001648:	e7ee      	b.n	8001628 <__libc_init_array+0xc>
 800164a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800164e:	4798      	blx	r3
 8001650:	3501      	adds	r5, #1
 8001652:	e7f2      	b.n	800163a <__libc_init_array+0x1e>
 8001654:	08002638 	.word	0x08002638
 8001658:	08002638 	.word	0x08002638
 800165c:	08002638 	.word	0x08002638
 8001660:	0800263c 	.word	0x0800263c

08001664 <memset>:
 8001664:	4402      	add	r2, r0
 8001666:	4603      	mov	r3, r0
 8001668:	4293      	cmp	r3, r2
 800166a:	d100      	bne.n	800166e <memset+0xa>
 800166c:	4770      	bx	lr
 800166e:	f803 1b01 	strb.w	r1, [r3], #1
 8001672:	e7f9      	b.n	8001668 <memset+0x4>

08001674 <iprintf>:
 8001674:	b40f      	push	{r0, r1, r2, r3}
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <iprintf+0x2c>)
 8001678:	b513      	push	{r0, r1, r4, lr}
 800167a:	681c      	ldr	r4, [r3, #0]
 800167c:	b124      	cbz	r4, 8001688 <iprintf+0x14>
 800167e:	69a3      	ldr	r3, [r4, #24]
 8001680:	b913      	cbnz	r3, 8001688 <iprintf+0x14>
 8001682:	4620      	mov	r0, r4
 8001684:	f000 fa22 	bl	8001acc <__sinit>
 8001688:	ab05      	add	r3, sp, #20
 800168a:	9a04      	ldr	r2, [sp, #16]
 800168c:	68a1      	ldr	r1, [r4, #8]
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	4620      	mov	r0, r4
 8001692:	f000 fbd9 	bl	8001e48 <_vfiprintf_r>
 8001696:	b002      	add	sp, #8
 8001698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800169c:	b004      	add	sp, #16
 800169e:	4770      	bx	lr
 80016a0:	20000020 	.word	0x20000020

080016a4 <_puts_r>:
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	460e      	mov	r6, r1
 80016a8:	4605      	mov	r5, r0
 80016aa:	b118      	cbz	r0, 80016b4 <_puts_r+0x10>
 80016ac:	6983      	ldr	r3, [r0, #24]
 80016ae:	b90b      	cbnz	r3, 80016b4 <_puts_r+0x10>
 80016b0:	f000 fa0c 	bl	8001acc <__sinit>
 80016b4:	69ab      	ldr	r3, [r5, #24]
 80016b6:	68ac      	ldr	r4, [r5, #8]
 80016b8:	b913      	cbnz	r3, 80016c0 <_puts_r+0x1c>
 80016ba:	4628      	mov	r0, r5
 80016bc:	f000 fa06 	bl	8001acc <__sinit>
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <_puts_r+0xac>)
 80016c2:	429c      	cmp	r4, r3
 80016c4:	d117      	bne.n	80016f6 <_puts_r+0x52>
 80016c6:	686c      	ldr	r4, [r5, #4]
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	071b      	lsls	r3, r3, #28
 80016cc:	d51d      	bpl.n	800170a <_puts_r+0x66>
 80016ce:	6923      	ldr	r3, [r4, #16]
 80016d0:	b1db      	cbz	r3, 800170a <_puts_r+0x66>
 80016d2:	3e01      	subs	r6, #1
 80016d4:	68a3      	ldr	r3, [r4, #8]
 80016d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80016da:	3b01      	subs	r3, #1
 80016dc:	60a3      	str	r3, [r4, #8]
 80016de:	b9e9      	cbnz	r1, 800171c <_puts_r+0x78>
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da2e      	bge.n	8001742 <_puts_r+0x9e>
 80016e4:	4622      	mov	r2, r4
 80016e6:	210a      	movs	r1, #10
 80016e8:	4628      	mov	r0, r5
 80016ea:	f000 f83f 	bl	800176c <__swbuf_r>
 80016ee:	3001      	adds	r0, #1
 80016f0:	d011      	beq.n	8001716 <_puts_r+0x72>
 80016f2:	200a      	movs	r0, #10
 80016f4:	e011      	b.n	800171a <_puts_r+0x76>
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <_puts_r+0xb0>)
 80016f8:	429c      	cmp	r4, r3
 80016fa:	d101      	bne.n	8001700 <_puts_r+0x5c>
 80016fc:	68ac      	ldr	r4, [r5, #8]
 80016fe:	e7e3      	b.n	80016c8 <_puts_r+0x24>
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <_puts_r+0xb4>)
 8001702:	429c      	cmp	r4, r3
 8001704:	bf08      	it	eq
 8001706:	68ec      	ldreq	r4, [r5, #12]
 8001708:	e7de      	b.n	80016c8 <_puts_r+0x24>
 800170a:	4621      	mov	r1, r4
 800170c:	4628      	mov	r0, r5
 800170e:	f000 f87f 	bl	8001810 <__swsetup_r>
 8001712:	2800      	cmp	r0, #0
 8001714:	d0dd      	beq.n	80016d2 <_puts_r+0x2e>
 8001716:	f04f 30ff 	mov.w	r0, #4294967295
 800171a:	bd70      	pop	{r4, r5, r6, pc}
 800171c:	2b00      	cmp	r3, #0
 800171e:	da04      	bge.n	800172a <_puts_r+0x86>
 8001720:	69a2      	ldr	r2, [r4, #24]
 8001722:	429a      	cmp	r2, r3
 8001724:	dc06      	bgt.n	8001734 <_puts_r+0x90>
 8001726:	290a      	cmp	r1, #10
 8001728:	d004      	beq.n	8001734 <_puts_r+0x90>
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	6022      	str	r2, [r4, #0]
 8001730:	7019      	strb	r1, [r3, #0]
 8001732:	e7cf      	b.n	80016d4 <_puts_r+0x30>
 8001734:	4622      	mov	r2, r4
 8001736:	4628      	mov	r0, r5
 8001738:	f000 f818 	bl	800176c <__swbuf_r>
 800173c:	3001      	adds	r0, #1
 800173e:	d1c9      	bne.n	80016d4 <_puts_r+0x30>
 8001740:	e7e9      	b.n	8001716 <_puts_r+0x72>
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	200a      	movs	r0, #10
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	6022      	str	r2, [r4, #0]
 800174a:	7018      	strb	r0, [r3, #0]
 800174c:	e7e5      	b.n	800171a <_puts_r+0x76>
 800174e:	bf00      	nop
 8001750:	080025c4 	.word	0x080025c4
 8001754:	080025e4 	.word	0x080025e4
 8001758:	080025a4 	.word	0x080025a4

0800175c <puts>:
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <puts+0xc>)
 800175e:	4601      	mov	r1, r0
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	f7ff bf9f 	b.w	80016a4 <_puts_r>
 8001766:	bf00      	nop
 8001768:	20000020 	.word	0x20000020

0800176c <__swbuf_r>:
 800176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176e:	460e      	mov	r6, r1
 8001770:	4614      	mov	r4, r2
 8001772:	4605      	mov	r5, r0
 8001774:	b118      	cbz	r0, 800177e <__swbuf_r+0x12>
 8001776:	6983      	ldr	r3, [r0, #24]
 8001778:	b90b      	cbnz	r3, 800177e <__swbuf_r+0x12>
 800177a:	f000 f9a7 	bl	8001acc <__sinit>
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <__swbuf_r+0x98>)
 8001780:	429c      	cmp	r4, r3
 8001782:	d12a      	bne.n	80017da <__swbuf_r+0x6e>
 8001784:	686c      	ldr	r4, [r5, #4]
 8001786:	69a3      	ldr	r3, [r4, #24]
 8001788:	60a3      	str	r3, [r4, #8]
 800178a:	89a3      	ldrh	r3, [r4, #12]
 800178c:	071a      	lsls	r2, r3, #28
 800178e:	d52e      	bpl.n	80017ee <__swbuf_r+0x82>
 8001790:	6923      	ldr	r3, [r4, #16]
 8001792:	b363      	cbz	r3, 80017ee <__swbuf_r+0x82>
 8001794:	6923      	ldr	r3, [r4, #16]
 8001796:	6820      	ldr	r0, [r4, #0]
 8001798:	1ac0      	subs	r0, r0, r3
 800179a:	6963      	ldr	r3, [r4, #20]
 800179c:	b2f6      	uxtb	r6, r6
 800179e:	4283      	cmp	r3, r0
 80017a0:	4637      	mov	r7, r6
 80017a2:	dc04      	bgt.n	80017ae <__swbuf_r+0x42>
 80017a4:	4621      	mov	r1, r4
 80017a6:	4628      	mov	r0, r5
 80017a8:	f000 f926 	bl	80019f8 <_fflush_r>
 80017ac:	bb28      	cbnz	r0, 80017fa <__swbuf_r+0x8e>
 80017ae:	68a3      	ldr	r3, [r4, #8]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60a3      	str	r3, [r4, #8]
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	6022      	str	r2, [r4, #0]
 80017ba:	701e      	strb	r6, [r3, #0]
 80017bc:	6963      	ldr	r3, [r4, #20]
 80017be:	3001      	adds	r0, #1
 80017c0:	4283      	cmp	r3, r0
 80017c2:	d004      	beq.n	80017ce <__swbuf_r+0x62>
 80017c4:	89a3      	ldrh	r3, [r4, #12]
 80017c6:	07db      	lsls	r3, r3, #31
 80017c8:	d519      	bpl.n	80017fe <__swbuf_r+0x92>
 80017ca:	2e0a      	cmp	r6, #10
 80017cc:	d117      	bne.n	80017fe <__swbuf_r+0x92>
 80017ce:	4621      	mov	r1, r4
 80017d0:	4628      	mov	r0, r5
 80017d2:	f000 f911 	bl	80019f8 <_fflush_r>
 80017d6:	b190      	cbz	r0, 80017fe <__swbuf_r+0x92>
 80017d8:	e00f      	b.n	80017fa <__swbuf_r+0x8e>
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <__swbuf_r+0x9c>)
 80017dc:	429c      	cmp	r4, r3
 80017de:	d101      	bne.n	80017e4 <__swbuf_r+0x78>
 80017e0:	68ac      	ldr	r4, [r5, #8]
 80017e2:	e7d0      	b.n	8001786 <__swbuf_r+0x1a>
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <__swbuf_r+0xa0>)
 80017e6:	429c      	cmp	r4, r3
 80017e8:	bf08      	it	eq
 80017ea:	68ec      	ldreq	r4, [r5, #12]
 80017ec:	e7cb      	b.n	8001786 <__swbuf_r+0x1a>
 80017ee:	4621      	mov	r1, r4
 80017f0:	4628      	mov	r0, r5
 80017f2:	f000 f80d 	bl	8001810 <__swsetup_r>
 80017f6:	2800      	cmp	r0, #0
 80017f8:	d0cc      	beq.n	8001794 <__swbuf_r+0x28>
 80017fa:	f04f 37ff 	mov.w	r7, #4294967295
 80017fe:	4638      	mov	r0, r7
 8001800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001802:	bf00      	nop
 8001804:	080025c4 	.word	0x080025c4
 8001808:	080025e4 	.word	0x080025e4
 800180c:	080025a4 	.word	0x080025a4

08001810 <__swsetup_r>:
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <__swsetup_r+0xcc>)
 8001812:	b570      	push	{r4, r5, r6, lr}
 8001814:	681d      	ldr	r5, [r3, #0]
 8001816:	4606      	mov	r6, r0
 8001818:	460c      	mov	r4, r1
 800181a:	b125      	cbz	r5, 8001826 <__swsetup_r+0x16>
 800181c:	69ab      	ldr	r3, [r5, #24]
 800181e:	b913      	cbnz	r3, 8001826 <__swsetup_r+0x16>
 8001820:	4628      	mov	r0, r5
 8001822:	f000 f953 	bl	8001acc <__sinit>
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <__swsetup_r+0xd0>)
 8001828:	429c      	cmp	r4, r3
 800182a:	d10f      	bne.n	800184c <__swsetup_r+0x3c>
 800182c:	686c      	ldr	r4, [r5, #4]
 800182e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001832:	b29a      	uxth	r2, r3
 8001834:	0715      	lsls	r5, r2, #28
 8001836:	d42c      	bmi.n	8001892 <__swsetup_r+0x82>
 8001838:	06d0      	lsls	r0, r2, #27
 800183a:	d411      	bmi.n	8001860 <__swsetup_r+0x50>
 800183c:	2209      	movs	r2, #9
 800183e:	6032      	str	r2, [r6, #0]
 8001840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001844:	81a3      	strh	r3, [r4, #12]
 8001846:	f04f 30ff 	mov.w	r0, #4294967295
 800184a:	e03e      	b.n	80018ca <__swsetup_r+0xba>
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <__swsetup_r+0xd4>)
 800184e:	429c      	cmp	r4, r3
 8001850:	d101      	bne.n	8001856 <__swsetup_r+0x46>
 8001852:	68ac      	ldr	r4, [r5, #8]
 8001854:	e7eb      	b.n	800182e <__swsetup_r+0x1e>
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <__swsetup_r+0xd8>)
 8001858:	429c      	cmp	r4, r3
 800185a:	bf08      	it	eq
 800185c:	68ec      	ldreq	r4, [r5, #12]
 800185e:	e7e6      	b.n	800182e <__swsetup_r+0x1e>
 8001860:	0751      	lsls	r1, r2, #29
 8001862:	d512      	bpl.n	800188a <__swsetup_r+0x7a>
 8001864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001866:	b141      	cbz	r1, 800187a <__swsetup_r+0x6a>
 8001868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800186c:	4299      	cmp	r1, r3
 800186e:	d002      	beq.n	8001876 <__swsetup_r+0x66>
 8001870:	4630      	mov	r0, r6
 8001872:	f000 fa19 	bl	8001ca8 <_free_r>
 8001876:	2300      	movs	r3, #0
 8001878:	6363      	str	r3, [r4, #52]	; 0x34
 800187a:	89a3      	ldrh	r3, [r4, #12]
 800187c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001880:	81a3      	strh	r3, [r4, #12]
 8001882:	2300      	movs	r3, #0
 8001884:	6063      	str	r3, [r4, #4]
 8001886:	6923      	ldr	r3, [r4, #16]
 8001888:	6023      	str	r3, [r4, #0]
 800188a:	89a3      	ldrh	r3, [r4, #12]
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	81a3      	strh	r3, [r4, #12]
 8001892:	6923      	ldr	r3, [r4, #16]
 8001894:	b94b      	cbnz	r3, 80018aa <__swsetup_r+0x9a>
 8001896:	89a3      	ldrh	r3, [r4, #12]
 8001898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800189c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a0:	d003      	beq.n	80018aa <__swsetup_r+0x9a>
 80018a2:	4621      	mov	r1, r4
 80018a4:	4630      	mov	r0, r6
 80018a6:	f000 f9bf 	bl	8001c28 <__smakebuf_r>
 80018aa:	89a2      	ldrh	r2, [r4, #12]
 80018ac:	f012 0301 	ands.w	r3, r2, #1
 80018b0:	d00c      	beq.n	80018cc <__swsetup_r+0xbc>
 80018b2:	2300      	movs	r3, #0
 80018b4:	60a3      	str	r3, [r4, #8]
 80018b6:	6963      	ldr	r3, [r4, #20]
 80018b8:	425b      	negs	r3, r3
 80018ba:	61a3      	str	r3, [r4, #24]
 80018bc:	6923      	ldr	r3, [r4, #16]
 80018be:	b953      	cbnz	r3, 80018d6 <__swsetup_r+0xc6>
 80018c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80018c8:	d1ba      	bne.n	8001840 <__swsetup_r+0x30>
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	0792      	lsls	r2, r2, #30
 80018ce:	bf58      	it	pl
 80018d0:	6963      	ldrpl	r3, [r4, #20]
 80018d2:	60a3      	str	r3, [r4, #8]
 80018d4:	e7f2      	b.n	80018bc <__swsetup_r+0xac>
 80018d6:	2000      	movs	r0, #0
 80018d8:	e7f7      	b.n	80018ca <__swsetup_r+0xba>
 80018da:	bf00      	nop
 80018dc:	20000020 	.word	0x20000020
 80018e0:	080025c4 	.word	0x080025c4
 80018e4:	080025e4 	.word	0x080025e4
 80018e8:	080025a4 	.word	0x080025a4

080018ec <__sflush_r>:
 80018ec:	898a      	ldrh	r2, [r1, #12]
 80018ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f2:	4605      	mov	r5, r0
 80018f4:	0710      	lsls	r0, r2, #28
 80018f6:	460c      	mov	r4, r1
 80018f8:	d458      	bmi.n	80019ac <__sflush_r+0xc0>
 80018fa:	684b      	ldr	r3, [r1, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dc05      	bgt.n	800190c <__sflush_r+0x20>
 8001900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	dc02      	bgt.n	800190c <__sflush_r+0x20>
 8001906:	2000      	movs	r0, #0
 8001908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800190c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800190e:	2e00      	cmp	r6, #0
 8001910:	d0f9      	beq.n	8001906 <__sflush_r+0x1a>
 8001912:	2300      	movs	r3, #0
 8001914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001918:	682f      	ldr	r7, [r5, #0]
 800191a:	6a21      	ldr	r1, [r4, #32]
 800191c:	602b      	str	r3, [r5, #0]
 800191e:	d032      	beq.n	8001986 <__sflush_r+0x9a>
 8001920:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001922:	89a3      	ldrh	r3, [r4, #12]
 8001924:	075a      	lsls	r2, r3, #29
 8001926:	d505      	bpl.n	8001934 <__sflush_r+0x48>
 8001928:	6863      	ldr	r3, [r4, #4]
 800192a:	1ac0      	subs	r0, r0, r3
 800192c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800192e:	b10b      	cbz	r3, 8001934 <__sflush_r+0x48>
 8001930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001932:	1ac0      	subs	r0, r0, r3
 8001934:	2300      	movs	r3, #0
 8001936:	4602      	mov	r2, r0
 8001938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800193a:	6a21      	ldr	r1, [r4, #32]
 800193c:	4628      	mov	r0, r5
 800193e:	47b0      	blx	r6
 8001940:	1c43      	adds	r3, r0, #1
 8001942:	89a3      	ldrh	r3, [r4, #12]
 8001944:	d106      	bne.n	8001954 <__sflush_r+0x68>
 8001946:	6829      	ldr	r1, [r5, #0]
 8001948:	291d      	cmp	r1, #29
 800194a:	d848      	bhi.n	80019de <__sflush_r+0xf2>
 800194c:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <__sflush_r+0x108>)
 800194e:	40ca      	lsrs	r2, r1
 8001950:	07d6      	lsls	r6, r2, #31
 8001952:	d544      	bpl.n	80019de <__sflush_r+0xf2>
 8001954:	2200      	movs	r2, #0
 8001956:	6062      	str	r2, [r4, #4]
 8001958:	04d9      	lsls	r1, r3, #19
 800195a:	6922      	ldr	r2, [r4, #16]
 800195c:	6022      	str	r2, [r4, #0]
 800195e:	d504      	bpl.n	800196a <__sflush_r+0x7e>
 8001960:	1c42      	adds	r2, r0, #1
 8001962:	d101      	bne.n	8001968 <__sflush_r+0x7c>
 8001964:	682b      	ldr	r3, [r5, #0]
 8001966:	b903      	cbnz	r3, 800196a <__sflush_r+0x7e>
 8001968:	6560      	str	r0, [r4, #84]	; 0x54
 800196a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800196c:	602f      	str	r7, [r5, #0]
 800196e:	2900      	cmp	r1, #0
 8001970:	d0c9      	beq.n	8001906 <__sflush_r+0x1a>
 8001972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001976:	4299      	cmp	r1, r3
 8001978:	d002      	beq.n	8001980 <__sflush_r+0x94>
 800197a:	4628      	mov	r0, r5
 800197c:	f000 f994 	bl	8001ca8 <_free_r>
 8001980:	2000      	movs	r0, #0
 8001982:	6360      	str	r0, [r4, #52]	; 0x34
 8001984:	e7c0      	b.n	8001908 <__sflush_r+0x1c>
 8001986:	2301      	movs	r3, #1
 8001988:	4628      	mov	r0, r5
 800198a:	47b0      	blx	r6
 800198c:	1c41      	adds	r1, r0, #1
 800198e:	d1c8      	bne.n	8001922 <__sflush_r+0x36>
 8001990:	682b      	ldr	r3, [r5, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0c5      	beq.n	8001922 <__sflush_r+0x36>
 8001996:	2b1d      	cmp	r3, #29
 8001998:	d001      	beq.n	800199e <__sflush_r+0xb2>
 800199a:	2b16      	cmp	r3, #22
 800199c:	d101      	bne.n	80019a2 <__sflush_r+0xb6>
 800199e:	602f      	str	r7, [r5, #0]
 80019a0:	e7b1      	b.n	8001906 <__sflush_r+0x1a>
 80019a2:	89a3      	ldrh	r3, [r4, #12]
 80019a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a8:	81a3      	strh	r3, [r4, #12]
 80019aa:	e7ad      	b.n	8001908 <__sflush_r+0x1c>
 80019ac:	690f      	ldr	r7, [r1, #16]
 80019ae:	2f00      	cmp	r7, #0
 80019b0:	d0a9      	beq.n	8001906 <__sflush_r+0x1a>
 80019b2:	0793      	lsls	r3, r2, #30
 80019b4:	680e      	ldr	r6, [r1, #0]
 80019b6:	bf08      	it	eq
 80019b8:	694b      	ldreq	r3, [r1, #20]
 80019ba:	600f      	str	r7, [r1, #0]
 80019bc:	bf18      	it	ne
 80019be:	2300      	movne	r3, #0
 80019c0:	eba6 0807 	sub.w	r8, r6, r7
 80019c4:	608b      	str	r3, [r1, #8]
 80019c6:	f1b8 0f00 	cmp.w	r8, #0
 80019ca:	dd9c      	ble.n	8001906 <__sflush_r+0x1a>
 80019cc:	4643      	mov	r3, r8
 80019ce:	463a      	mov	r2, r7
 80019d0:	6a21      	ldr	r1, [r4, #32]
 80019d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80019d4:	4628      	mov	r0, r5
 80019d6:	47b0      	blx	r6
 80019d8:	2800      	cmp	r0, #0
 80019da:	dc06      	bgt.n	80019ea <__sflush_r+0xfe>
 80019dc:	89a3      	ldrh	r3, [r4, #12]
 80019de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e2:	81a3      	strh	r3, [r4, #12]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	e78e      	b.n	8001908 <__sflush_r+0x1c>
 80019ea:	4407      	add	r7, r0
 80019ec:	eba8 0800 	sub.w	r8, r8, r0
 80019f0:	e7e9      	b.n	80019c6 <__sflush_r+0xda>
 80019f2:	bf00      	nop
 80019f4:	20400001 	.word	0x20400001

080019f8 <_fflush_r>:
 80019f8:	b538      	push	{r3, r4, r5, lr}
 80019fa:	690b      	ldr	r3, [r1, #16]
 80019fc:	4605      	mov	r5, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	b1db      	cbz	r3, 8001a3a <_fflush_r+0x42>
 8001a02:	b118      	cbz	r0, 8001a0c <_fflush_r+0x14>
 8001a04:	6983      	ldr	r3, [r0, #24]
 8001a06:	b90b      	cbnz	r3, 8001a0c <_fflush_r+0x14>
 8001a08:	f000 f860 	bl	8001acc <__sinit>
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <_fflush_r+0x48>)
 8001a0e:	429c      	cmp	r4, r3
 8001a10:	d109      	bne.n	8001a26 <_fflush_r+0x2e>
 8001a12:	686c      	ldr	r4, [r5, #4]
 8001a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a18:	b17b      	cbz	r3, 8001a3a <_fflush_r+0x42>
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a22:	f7ff bf63 	b.w	80018ec <__sflush_r>
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <_fflush_r+0x4c>)
 8001a28:	429c      	cmp	r4, r3
 8001a2a:	d101      	bne.n	8001a30 <_fflush_r+0x38>
 8001a2c:	68ac      	ldr	r4, [r5, #8]
 8001a2e:	e7f1      	b.n	8001a14 <_fflush_r+0x1c>
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <_fflush_r+0x50>)
 8001a32:	429c      	cmp	r4, r3
 8001a34:	bf08      	it	eq
 8001a36:	68ec      	ldreq	r4, [r5, #12]
 8001a38:	e7ec      	b.n	8001a14 <_fflush_r+0x1c>
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	bd38      	pop	{r3, r4, r5, pc}
 8001a3e:	bf00      	nop
 8001a40:	080025c4 	.word	0x080025c4
 8001a44:	080025e4 	.word	0x080025e4
 8001a48:	080025a4 	.word	0x080025a4

08001a4c <std>:
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	b510      	push	{r4, lr}
 8001a50:	4604      	mov	r4, r0
 8001a52:	e9c0 3300 	strd	r3, r3, [r0]
 8001a56:	6083      	str	r3, [r0, #8]
 8001a58:	8181      	strh	r1, [r0, #12]
 8001a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8001a5c:	81c2      	strh	r2, [r0, #14]
 8001a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a62:	6183      	str	r3, [r0, #24]
 8001a64:	4619      	mov	r1, r3
 8001a66:	2208      	movs	r2, #8
 8001a68:	305c      	adds	r0, #92	; 0x5c
 8001a6a:	f7ff fdfb 	bl	8001664 <memset>
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <std+0x38>)
 8001a70:	6263      	str	r3, [r4, #36]	; 0x24
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <std+0x3c>)
 8001a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <std+0x40>)
 8001a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <std+0x44>)
 8001a7c:	6224      	str	r4, [r4, #32]
 8001a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8001a80:	bd10      	pop	{r4, pc}
 8001a82:	bf00      	nop
 8001a84:	080023a5 	.word	0x080023a5
 8001a88:	080023c7 	.word	0x080023c7
 8001a8c:	080023ff 	.word	0x080023ff
 8001a90:	08002423 	.word	0x08002423

08001a94 <_cleanup_r>:
 8001a94:	4901      	ldr	r1, [pc, #4]	; (8001a9c <_cleanup_r+0x8>)
 8001a96:	f000 b885 	b.w	8001ba4 <_fwalk_reent>
 8001a9a:	bf00      	nop
 8001a9c:	080019f9 	.word	0x080019f9

08001aa0 <__sfmoreglue>:
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	1e4a      	subs	r2, r1, #1
 8001aa4:	2568      	movs	r5, #104	; 0x68
 8001aa6:	4355      	muls	r5, r2
 8001aa8:	460e      	mov	r6, r1
 8001aaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001aae:	f000 f949 	bl	8001d44 <_malloc_r>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	b140      	cbz	r0, 8001ac8 <__sfmoreglue+0x28>
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	e9c0 1600 	strd	r1, r6, [r0]
 8001abc:	300c      	adds	r0, #12
 8001abe:	60a0      	str	r0, [r4, #8]
 8001ac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ac4:	f7ff fdce 	bl	8001664 <memset>
 8001ac8:	4620      	mov	r0, r4
 8001aca:	bd70      	pop	{r4, r5, r6, pc}

08001acc <__sinit>:
 8001acc:	6983      	ldr	r3, [r0, #24]
 8001ace:	b510      	push	{r4, lr}
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	bb33      	cbnz	r3, 8001b22 <__sinit+0x56>
 8001ad4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001ad8:	6503      	str	r3, [r0, #80]	; 0x50
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <__sinit+0x58>)
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <__sinit+0x5c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6282      	str	r2, [r0, #40]	; 0x28
 8001ae2:	4298      	cmp	r0, r3
 8001ae4:	bf04      	itt	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	6183      	streq	r3, [r0, #24]
 8001aea:	f000 f81f 	bl	8001b2c <__sfp>
 8001aee:	6060      	str	r0, [r4, #4]
 8001af0:	4620      	mov	r0, r4
 8001af2:	f000 f81b 	bl	8001b2c <__sfp>
 8001af6:	60a0      	str	r0, [r4, #8]
 8001af8:	4620      	mov	r0, r4
 8001afa:	f000 f817 	bl	8001b2c <__sfp>
 8001afe:	2200      	movs	r2, #0
 8001b00:	60e0      	str	r0, [r4, #12]
 8001b02:	2104      	movs	r1, #4
 8001b04:	6860      	ldr	r0, [r4, #4]
 8001b06:	f7ff ffa1 	bl	8001a4c <std>
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2109      	movs	r1, #9
 8001b0e:	68a0      	ldr	r0, [r4, #8]
 8001b10:	f7ff ff9c 	bl	8001a4c <std>
 8001b14:	2202      	movs	r2, #2
 8001b16:	2112      	movs	r1, #18
 8001b18:	68e0      	ldr	r0, [r4, #12]
 8001b1a:	f7ff ff97 	bl	8001a4c <std>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61a3      	str	r3, [r4, #24]
 8001b22:	bd10      	pop	{r4, pc}
 8001b24:	080025a0 	.word	0x080025a0
 8001b28:	08001a95 	.word	0x08001a95

08001b2c <__sfp>:
 8001b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <__sfp+0x70>)
 8001b30:	681e      	ldr	r6, [r3, #0]
 8001b32:	69b3      	ldr	r3, [r6, #24]
 8001b34:	4607      	mov	r7, r0
 8001b36:	b913      	cbnz	r3, 8001b3e <__sfp+0x12>
 8001b38:	4630      	mov	r0, r6
 8001b3a:	f7ff ffc7 	bl	8001acc <__sinit>
 8001b3e:	3648      	adds	r6, #72	; 0x48
 8001b40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	d503      	bpl.n	8001b50 <__sfp+0x24>
 8001b48:	6833      	ldr	r3, [r6, #0]
 8001b4a:	b133      	cbz	r3, 8001b5a <__sfp+0x2e>
 8001b4c:	6836      	ldr	r6, [r6, #0]
 8001b4e:	e7f7      	b.n	8001b40 <__sfp+0x14>
 8001b50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b54:	b16d      	cbz	r5, 8001b72 <__sfp+0x46>
 8001b56:	3468      	adds	r4, #104	; 0x68
 8001b58:	e7f4      	b.n	8001b44 <__sfp+0x18>
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	4638      	mov	r0, r7
 8001b5e:	f7ff ff9f 	bl	8001aa0 <__sfmoreglue>
 8001b62:	6030      	str	r0, [r6, #0]
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d1f1      	bne.n	8001b4c <__sfp+0x20>
 8001b68:	230c      	movs	r3, #12
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	4620      	mov	r0, r4
 8001b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <__sfp+0x74>)
 8001b74:	6665      	str	r5, [r4, #100]	; 0x64
 8001b76:	e9c4 5500 	strd	r5, r5, [r4]
 8001b7a:	60a5      	str	r5, [r4, #8]
 8001b7c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001b80:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001b84:	2208      	movs	r2, #8
 8001b86:	4629      	mov	r1, r5
 8001b88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b8c:	f7ff fd6a 	bl	8001664 <memset>
 8001b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001b98:	e7e9      	b.n	8001b6e <__sfp+0x42>
 8001b9a:	bf00      	nop
 8001b9c:	080025a0 	.word	0x080025a0
 8001ba0:	ffff0001 	.word	0xffff0001

08001ba4 <_fwalk_reent>:
 8001ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ba8:	4680      	mov	r8, r0
 8001baa:	4689      	mov	r9, r1
 8001bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001bb0:	2600      	movs	r6, #0
 8001bb2:	b914      	cbnz	r4, 8001bba <_fwalk_reent+0x16>
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001bbe:	3f01      	subs	r7, #1
 8001bc0:	d501      	bpl.n	8001bc6 <_fwalk_reent+0x22>
 8001bc2:	6824      	ldr	r4, [r4, #0]
 8001bc4:	e7f5      	b.n	8001bb2 <_fwalk_reent+0xe>
 8001bc6:	89ab      	ldrh	r3, [r5, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d907      	bls.n	8001bdc <_fwalk_reent+0x38>
 8001bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	d003      	beq.n	8001bdc <_fwalk_reent+0x38>
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	4640      	mov	r0, r8
 8001bd8:	47c8      	blx	r9
 8001bda:	4306      	orrs	r6, r0
 8001bdc:	3568      	adds	r5, #104	; 0x68
 8001bde:	e7ee      	b.n	8001bbe <_fwalk_reent+0x1a>

08001be0 <__swhatbuf_r>:
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	460e      	mov	r6, r1
 8001be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001be8:	2900      	cmp	r1, #0
 8001bea:	b096      	sub	sp, #88	; 0x58
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	da07      	bge.n	8001c02 <__swhatbuf_r+0x22>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	602b      	str	r3, [r5, #0]
 8001bf6:	89b3      	ldrh	r3, [r6, #12]
 8001bf8:	061a      	lsls	r2, r3, #24
 8001bfa:	d410      	bmi.n	8001c1e <__swhatbuf_r+0x3e>
 8001bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c00:	e00e      	b.n	8001c20 <__swhatbuf_r+0x40>
 8001c02:	466a      	mov	r2, sp
 8001c04:	f000 fc34 	bl	8002470 <_fstat_r>
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	dbf2      	blt.n	8001bf2 <__swhatbuf_r+0x12>
 8001c0c:	9a01      	ldr	r2, [sp, #4]
 8001c0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c16:	425a      	negs	r2, r3
 8001c18:	415a      	adcs	r2, r3
 8001c1a:	602a      	str	r2, [r5, #0]
 8001c1c:	e7ee      	b.n	8001bfc <__swhatbuf_r+0x1c>
 8001c1e:	2340      	movs	r3, #64	; 0x40
 8001c20:	2000      	movs	r0, #0
 8001c22:	6023      	str	r3, [r4, #0]
 8001c24:	b016      	add	sp, #88	; 0x58
 8001c26:	bd70      	pop	{r4, r5, r6, pc}

08001c28 <__smakebuf_r>:
 8001c28:	898b      	ldrh	r3, [r1, #12]
 8001c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c2c:	079d      	lsls	r5, r3, #30
 8001c2e:	4606      	mov	r6, r0
 8001c30:	460c      	mov	r4, r1
 8001c32:	d507      	bpl.n	8001c44 <__smakebuf_r+0x1c>
 8001c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	6123      	str	r3, [r4, #16]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	6163      	str	r3, [r4, #20]
 8001c40:	b002      	add	sp, #8
 8001c42:	bd70      	pop	{r4, r5, r6, pc}
 8001c44:	ab01      	add	r3, sp, #4
 8001c46:	466a      	mov	r2, sp
 8001c48:	f7ff ffca 	bl	8001be0 <__swhatbuf_r>
 8001c4c:	9900      	ldr	r1, [sp, #0]
 8001c4e:	4605      	mov	r5, r0
 8001c50:	4630      	mov	r0, r6
 8001c52:	f000 f877 	bl	8001d44 <_malloc_r>
 8001c56:	b948      	cbnz	r0, 8001c6c <__smakebuf_r+0x44>
 8001c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c5c:	059a      	lsls	r2, r3, #22
 8001c5e:	d4ef      	bmi.n	8001c40 <__smakebuf_r+0x18>
 8001c60:	f023 0303 	bic.w	r3, r3, #3
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	81a3      	strh	r3, [r4, #12]
 8001c6a:	e7e3      	b.n	8001c34 <__smakebuf_r+0xc>
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <__smakebuf_r+0x7c>)
 8001c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001c70:	89a3      	ldrh	r3, [r4, #12]
 8001c72:	6020      	str	r0, [r4, #0]
 8001c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c78:	81a3      	strh	r3, [r4, #12]
 8001c7a:	9b00      	ldr	r3, [sp, #0]
 8001c7c:	6163      	str	r3, [r4, #20]
 8001c7e:	9b01      	ldr	r3, [sp, #4]
 8001c80:	6120      	str	r0, [r4, #16]
 8001c82:	b15b      	cbz	r3, 8001c9c <__smakebuf_r+0x74>
 8001c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c88:	4630      	mov	r0, r6
 8001c8a:	f000 fc03 	bl	8002494 <_isatty_r>
 8001c8e:	b128      	cbz	r0, 8001c9c <__smakebuf_r+0x74>
 8001c90:	89a3      	ldrh	r3, [r4, #12]
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	81a3      	strh	r3, [r4, #12]
 8001c9c:	89a3      	ldrh	r3, [r4, #12]
 8001c9e:	431d      	orrs	r5, r3
 8001ca0:	81a5      	strh	r5, [r4, #12]
 8001ca2:	e7cd      	b.n	8001c40 <__smakebuf_r+0x18>
 8001ca4:	08001a95 	.word	0x08001a95

08001ca8 <_free_r>:
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4605      	mov	r5, r0
 8001cac:	2900      	cmp	r1, #0
 8001cae:	d045      	beq.n	8001d3c <_free_r+0x94>
 8001cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cb4:	1f0c      	subs	r4, r1, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bfb8      	it	lt
 8001cba:	18e4      	addlt	r4, r4, r3
 8001cbc:	f000 fc0c 	bl	80024d8 <__malloc_lock>
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <_free_r+0x98>)
 8001cc2:	6813      	ldr	r3, [r2, #0]
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	b933      	cbnz	r3, 8001cd6 <_free_r+0x2e>
 8001cc8:	6063      	str	r3, [r4, #4]
 8001cca:	6014      	str	r4, [r2, #0]
 8001ccc:	4628      	mov	r0, r5
 8001cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cd2:	f000 bc02 	b.w	80024da <__malloc_unlock>
 8001cd6:	42a3      	cmp	r3, r4
 8001cd8:	d90c      	bls.n	8001cf4 <_free_r+0x4c>
 8001cda:	6821      	ldr	r1, [r4, #0]
 8001cdc:	1862      	adds	r2, r4, r1
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	bf04      	itt	eq
 8001ce2:	681a      	ldreq	r2, [r3, #0]
 8001ce4:	685b      	ldreq	r3, [r3, #4]
 8001ce6:	6063      	str	r3, [r4, #4]
 8001ce8:	bf04      	itt	eq
 8001cea:	1852      	addeq	r2, r2, r1
 8001cec:	6022      	streq	r2, [r4, #0]
 8001cee:	6004      	str	r4, [r0, #0]
 8001cf0:	e7ec      	b.n	8001ccc <_free_r+0x24>
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	b10a      	cbz	r2, 8001cfc <_free_r+0x54>
 8001cf8:	42a2      	cmp	r2, r4
 8001cfa:	d9fa      	bls.n	8001cf2 <_free_r+0x4a>
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	1858      	adds	r0, r3, r1
 8001d00:	42a0      	cmp	r0, r4
 8001d02:	d10b      	bne.n	8001d1c <_free_r+0x74>
 8001d04:	6820      	ldr	r0, [r4, #0]
 8001d06:	4401      	add	r1, r0
 8001d08:	1858      	adds	r0, r3, r1
 8001d0a:	4282      	cmp	r2, r0
 8001d0c:	6019      	str	r1, [r3, #0]
 8001d0e:	d1dd      	bne.n	8001ccc <_free_r+0x24>
 8001d10:	6810      	ldr	r0, [r2, #0]
 8001d12:	6852      	ldr	r2, [r2, #4]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	4401      	add	r1, r0
 8001d18:	6019      	str	r1, [r3, #0]
 8001d1a:	e7d7      	b.n	8001ccc <_free_r+0x24>
 8001d1c:	d902      	bls.n	8001d24 <_free_r+0x7c>
 8001d1e:	230c      	movs	r3, #12
 8001d20:	602b      	str	r3, [r5, #0]
 8001d22:	e7d3      	b.n	8001ccc <_free_r+0x24>
 8001d24:	6820      	ldr	r0, [r4, #0]
 8001d26:	1821      	adds	r1, r4, r0
 8001d28:	428a      	cmp	r2, r1
 8001d2a:	bf04      	itt	eq
 8001d2c:	6811      	ldreq	r1, [r2, #0]
 8001d2e:	6852      	ldreq	r2, [r2, #4]
 8001d30:	6062      	str	r2, [r4, #4]
 8001d32:	bf04      	itt	eq
 8001d34:	1809      	addeq	r1, r1, r0
 8001d36:	6021      	streq	r1, [r4, #0]
 8001d38:	605c      	str	r4, [r3, #4]
 8001d3a:	e7c7      	b.n	8001ccc <_free_r+0x24>
 8001d3c:	bd38      	pop	{r3, r4, r5, pc}
 8001d3e:	bf00      	nop
 8001d40:	200000a8 	.word	0x200000a8

08001d44 <_malloc_r>:
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	1ccd      	adds	r5, r1, #3
 8001d48:	f025 0503 	bic.w	r5, r5, #3
 8001d4c:	3508      	adds	r5, #8
 8001d4e:	2d0c      	cmp	r5, #12
 8001d50:	bf38      	it	cc
 8001d52:	250c      	movcc	r5, #12
 8001d54:	2d00      	cmp	r5, #0
 8001d56:	4606      	mov	r6, r0
 8001d58:	db01      	blt.n	8001d5e <_malloc_r+0x1a>
 8001d5a:	42a9      	cmp	r1, r5
 8001d5c:	d903      	bls.n	8001d66 <_malloc_r+0x22>
 8001d5e:	230c      	movs	r3, #12
 8001d60:	6033      	str	r3, [r6, #0]
 8001d62:	2000      	movs	r0, #0
 8001d64:	bd70      	pop	{r4, r5, r6, pc}
 8001d66:	f000 fbb7 	bl	80024d8 <__malloc_lock>
 8001d6a:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <_malloc_r+0xac>)
 8001d6c:	6814      	ldr	r4, [r2, #0]
 8001d6e:	4621      	mov	r1, r4
 8001d70:	b991      	cbnz	r1, 8001d98 <_malloc_r+0x54>
 8001d72:	4c20      	ldr	r4, [pc, #128]	; (8001df4 <_malloc_r+0xb0>)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	b91b      	cbnz	r3, 8001d80 <_malloc_r+0x3c>
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f000 fb03 	bl	8002384 <_sbrk_r>
 8001d7e:	6020      	str	r0, [r4, #0]
 8001d80:	4629      	mov	r1, r5
 8001d82:	4630      	mov	r0, r6
 8001d84:	f000 fafe 	bl	8002384 <_sbrk_r>
 8001d88:	1c43      	adds	r3, r0, #1
 8001d8a:	d124      	bne.n	8001dd6 <_malloc_r+0x92>
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	6033      	str	r3, [r6, #0]
 8001d90:	4630      	mov	r0, r6
 8001d92:	f000 fba2 	bl	80024da <__malloc_unlock>
 8001d96:	e7e4      	b.n	8001d62 <_malloc_r+0x1e>
 8001d98:	680b      	ldr	r3, [r1, #0]
 8001d9a:	1b5b      	subs	r3, r3, r5
 8001d9c:	d418      	bmi.n	8001dd0 <_malloc_r+0x8c>
 8001d9e:	2b0b      	cmp	r3, #11
 8001da0:	d90f      	bls.n	8001dc2 <_malloc_r+0x7e>
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	50cd      	str	r5, [r1, r3]
 8001da6:	18cc      	adds	r4, r1, r3
 8001da8:	4630      	mov	r0, r6
 8001daa:	f000 fb96 	bl	80024da <__malloc_unlock>
 8001dae:	f104 000b 	add.w	r0, r4, #11
 8001db2:	1d23      	adds	r3, r4, #4
 8001db4:	f020 0007 	bic.w	r0, r0, #7
 8001db8:	1ac3      	subs	r3, r0, r3
 8001dba:	d0d3      	beq.n	8001d64 <_malloc_r+0x20>
 8001dbc:	425a      	negs	r2, r3
 8001dbe:	50e2      	str	r2, [r4, r3]
 8001dc0:	e7d0      	b.n	8001d64 <_malloc_r+0x20>
 8001dc2:	428c      	cmp	r4, r1
 8001dc4:	684b      	ldr	r3, [r1, #4]
 8001dc6:	bf16      	itet	ne
 8001dc8:	6063      	strne	r3, [r4, #4]
 8001dca:	6013      	streq	r3, [r2, #0]
 8001dcc:	460c      	movne	r4, r1
 8001dce:	e7eb      	b.n	8001da8 <_malloc_r+0x64>
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	6849      	ldr	r1, [r1, #4]
 8001dd4:	e7cc      	b.n	8001d70 <_malloc_r+0x2c>
 8001dd6:	1cc4      	adds	r4, r0, #3
 8001dd8:	f024 0403 	bic.w	r4, r4, #3
 8001ddc:	42a0      	cmp	r0, r4
 8001dde:	d005      	beq.n	8001dec <_malloc_r+0xa8>
 8001de0:	1a21      	subs	r1, r4, r0
 8001de2:	4630      	mov	r0, r6
 8001de4:	f000 face 	bl	8002384 <_sbrk_r>
 8001de8:	3001      	adds	r0, #1
 8001dea:	d0cf      	beq.n	8001d8c <_malloc_r+0x48>
 8001dec:	6025      	str	r5, [r4, #0]
 8001dee:	e7db      	b.n	8001da8 <_malloc_r+0x64>
 8001df0:	200000a8 	.word	0x200000a8
 8001df4:	200000ac 	.word	0x200000ac

08001df8 <__sfputc_r>:
 8001df8:	6893      	ldr	r3, [r2, #8]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	b410      	push	{r4}
 8001e00:	6093      	str	r3, [r2, #8]
 8001e02:	da07      	bge.n	8001e14 <__sfputc_r+0x1c>
 8001e04:	6994      	ldr	r4, [r2, #24]
 8001e06:	42a3      	cmp	r3, r4
 8001e08:	db01      	blt.n	8001e0e <__sfputc_r+0x16>
 8001e0a:	290a      	cmp	r1, #10
 8001e0c:	d102      	bne.n	8001e14 <__sfputc_r+0x1c>
 8001e0e:	bc10      	pop	{r4}
 8001e10:	f7ff bcac 	b.w	800176c <__swbuf_r>
 8001e14:	6813      	ldr	r3, [r2, #0]
 8001e16:	1c58      	adds	r0, r3, #1
 8001e18:	6010      	str	r0, [r2, #0]
 8001e1a:	7019      	strb	r1, [r3, #0]
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	bc10      	pop	{r4}
 8001e20:	4770      	bx	lr

08001e22 <__sfputs_r>:
 8001e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e24:	4606      	mov	r6, r0
 8001e26:	460f      	mov	r7, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	18d5      	adds	r5, r2, r3
 8001e2c:	42ac      	cmp	r4, r5
 8001e2e:	d101      	bne.n	8001e34 <__sfputs_r+0x12>
 8001e30:	2000      	movs	r0, #0
 8001e32:	e007      	b.n	8001e44 <__sfputs_r+0x22>
 8001e34:	463a      	mov	r2, r7
 8001e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	f7ff ffdc 	bl	8001df8 <__sfputc_r>
 8001e40:	1c43      	adds	r3, r0, #1
 8001e42:	d1f3      	bne.n	8001e2c <__sfputs_r+0xa>
 8001e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e48 <_vfiprintf_r>:
 8001e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	b09d      	sub	sp, #116	; 0x74
 8001e50:	4617      	mov	r7, r2
 8001e52:	461d      	mov	r5, r3
 8001e54:	4606      	mov	r6, r0
 8001e56:	b118      	cbz	r0, 8001e60 <_vfiprintf_r+0x18>
 8001e58:	6983      	ldr	r3, [r0, #24]
 8001e5a:	b90b      	cbnz	r3, 8001e60 <_vfiprintf_r+0x18>
 8001e5c:	f7ff fe36 	bl	8001acc <__sinit>
 8001e60:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <_vfiprintf_r+0x20c>)
 8001e62:	429c      	cmp	r4, r3
 8001e64:	d158      	bne.n	8001f18 <_vfiprintf_r+0xd0>
 8001e66:	6874      	ldr	r4, [r6, #4]
 8001e68:	89a3      	ldrh	r3, [r4, #12]
 8001e6a:	0718      	lsls	r0, r3, #28
 8001e6c:	d55e      	bpl.n	8001f2c <_vfiprintf_r+0xe4>
 8001e6e:	6923      	ldr	r3, [r4, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05b      	beq.n	8001f2c <_vfiprintf_r+0xe4>
 8001e74:	2300      	movs	r3, #0
 8001e76:	9309      	str	r3, [sp, #36]	; 0x24
 8001e78:	2320      	movs	r3, #32
 8001e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e7e:	2330      	movs	r3, #48	; 0x30
 8001e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e84:	9503      	str	r5, [sp, #12]
 8001e86:	f04f 0b01 	mov.w	fp, #1
 8001e8a:	46b8      	mov	r8, r7
 8001e8c:	4645      	mov	r5, r8
 8001e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001e92:	b10b      	cbz	r3, 8001e98 <_vfiprintf_r+0x50>
 8001e94:	2b25      	cmp	r3, #37	; 0x25
 8001e96:	d154      	bne.n	8001f42 <_vfiprintf_r+0xfa>
 8001e98:	ebb8 0a07 	subs.w	sl, r8, r7
 8001e9c:	d00b      	beq.n	8001eb6 <_vfiprintf_r+0x6e>
 8001e9e:	4653      	mov	r3, sl
 8001ea0:	463a      	mov	r2, r7
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f7ff ffbc 	bl	8001e22 <__sfputs_r>
 8001eaa:	3001      	adds	r0, #1
 8001eac:	f000 80c2 	beq.w	8002034 <_vfiprintf_r+0x1ec>
 8001eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eb2:	4453      	add	r3, sl
 8001eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8001eb6:	f898 3000 	ldrb.w	r3, [r8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80ba 	beq.w	8002034 <_vfiprintf_r+0x1ec>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001eca:	9304      	str	r3, [sp, #16]
 8001ecc:	9307      	str	r3, [sp, #28]
 8001ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8001ed4:	46a8      	mov	r8, r5
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001edc:	485e      	ldr	r0, [pc, #376]	; (8002058 <_vfiprintf_r+0x210>)
 8001ede:	f7fe f99f 	bl	8000220 <memchr>
 8001ee2:	9b04      	ldr	r3, [sp, #16]
 8001ee4:	bb78      	cbnz	r0, 8001f46 <_vfiprintf_r+0xfe>
 8001ee6:	06d9      	lsls	r1, r3, #27
 8001ee8:	bf44      	itt	mi
 8001eea:	2220      	movmi	r2, #32
 8001eec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ef0:	071a      	lsls	r2, r3, #28
 8001ef2:	bf44      	itt	mi
 8001ef4:	222b      	movmi	r2, #43	; 0x2b
 8001ef6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001efa:	782a      	ldrb	r2, [r5, #0]
 8001efc:	2a2a      	cmp	r2, #42	; 0x2a
 8001efe:	d02a      	beq.n	8001f56 <_vfiprintf_r+0x10e>
 8001f00:	9a07      	ldr	r2, [sp, #28]
 8001f02:	46a8      	mov	r8, r5
 8001f04:	2000      	movs	r0, #0
 8001f06:	250a      	movs	r5, #10
 8001f08:	4641      	mov	r1, r8
 8001f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f0e:	3b30      	subs	r3, #48	; 0x30
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	d969      	bls.n	8001fe8 <_vfiprintf_r+0x1a0>
 8001f14:	b360      	cbz	r0, 8001f70 <_vfiprintf_r+0x128>
 8001f16:	e024      	b.n	8001f62 <_vfiprintf_r+0x11a>
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <_vfiprintf_r+0x214>)
 8001f1a:	429c      	cmp	r4, r3
 8001f1c:	d101      	bne.n	8001f22 <_vfiprintf_r+0xda>
 8001f1e:	68b4      	ldr	r4, [r6, #8]
 8001f20:	e7a2      	b.n	8001e68 <_vfiprintf_r+0x20>
 8001f22:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <_vfiprintf_r+0x218>)
 8001f24:	429c      	cmp	r4, r3
 8001f26:	bf08      	it	eq
 8001f28:	68f4      	ldreq	r4, [r6, #12]
 8001f2a:	e79d      	b.n	8001e68 <_vfiprintf_r+0x20>
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	4630      	mov	r0, r6
 8001f30:	f7ff fc6e 	bl	8001810 <__swsetup_r>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d09d      	beq.n	8001e74 <_vfiprintf_r+0x2c>
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	b01d      	add	sp, #116	; 0x74
 8001f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f42:	46a8      	mov	r8, r5
 8001f44:	e7a2      	b.n	8001e8c <_vfiprintf_r+0x44>
 8001f46:	4a44      	ldr	r2, [pc, #272]	; (8002058 <_vfiprintf_r+0x210>)
 8001f48:	1a80      	subs	r0, r0, r2
 8001f4a:	fa0b f000 	lsl.w	r0, fp, r0
 8001f4e:	4318      	orrs	r0, r3
 8001f50:	9004      	str	r0, [sp, #16]
 8001f52:	4645      	mov	r5, r8
 8001f54:	e7be      	b.n	8001ed4 <_vfiprintf_r+0x8c>
 8001f56:	9a03      	ldr	r2, [sp, #12]
 8001f58:	1d11      	adds	r1, r2, #4
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	9103      	str	r1, [sp, #12]
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	db01      	blt.n	8001f66 <_vfiprintf_r+0x11e>
 8001f62:	9207      	str	r2, [sp, #28]
 8001f64:	e004      	b.n	8001f70 <_vfiprintf_r+0x128>
 8001f66:	4252      	negs	r2, r2
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	9207      	str	r2, [sp, #28]
 8001f6e:	9304      	str	r3, [sp, #16]
 8001f70:	f898 3000 	ldrb.w	r3, [r8]
 8001f74:	2b2e      	cmp	r3, #46	; 0x2e
 8001f76:	d10e      	bne.n	8001f96 <_vfiprintf_r+0x14e>
 8001f78:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f7e:	d138      	bne.n	8001ff2 <_vfiprintf_r+0x1aa>
 8001f80:	9b03      	ldr	r3, [sp, #12]
 8001f82:	1d1a      	adds	r2, r3, #4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	9203      	str	r2, [sp, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bfb8      	it	lt
 8001f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f90:	f108 0802 	add.w	r8, r8, #2
 8001f94:	9305      	str	r3, [sp, #20]
 8001f96:	4d33      	ldr	r5, [pc, #204]	; (8002064 <_vfiprintf_r+0x21c>)
 8001f98:	f898 1000 	ldrb.w	r1, [r8]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	f7fe f93e 	bl	8000220 <memchr>
 8001fa4:	b140      	cbz	r0, 8001fb8 <_vfiprintf_r+0x170>
 8001fa6:	2340      	movs	r3, #64	; 0x40
 8001fa8:	1b40      	subs	r0, r0, r5
 8001faa:	fa03 f000 	lsl.w	r0, r3, r0
 8001fae:	9b04      	ldr	r3, [sp, #16]
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	f108 0801 	add.w	r8, r8, #1
 8001fb6:	9304      	str	r3, [sp, #16]
 8001fb8:	f898 1000 	ldrb.w	r1, [r8]
 8001fbc:	482a      	ldr	r0, [pc, #168]	; (8002068 <_vfiprintf_r+0x220>)
 8001fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fc2:	2206      	movs	r2, #6
 8001fc4:	f108 0701 	add.w	r7, r8, #1
 8001fc8:	f7fe f92a 	bl	8000220 <memchr>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d037      	beq.n	8002040 <_vfiprintf_r+0x1f8>
 8001fd0:	4b26      	ldr	r3, [pc, #152]	; (800206c <_vfiprintf_r+0x224>)
 8001fd2:	bb1b      	cbnz	r3, 800201c <_vfiprintf_r+0x1d4>
 8001fd4:	9b03      	ldr	r3, [sp, #12]
 8001fd6:	3307      	adds	r3, #7
 8001fd8:	f023 0307 	bic.w	r3, r3, #7
 8001fdc:	3308      	adds	r3, #8
 8001fde:	9303      	str	r3, [sp, #12]
 8001fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fe2:	444b      	add	r3, r9
 8001fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8001fe6:	e750      	b.n	8001e8a <_vfiprintf_r+0x42>
 8001fe8:	fb05 3202 	mla	r2, r5, r2, r3
 8001fec:	2001      	movs	r0, #1
 8001fee:	4688      	mov	r8, r1
 8001ff0:	e78a      	b.n	8001f08 <_vfiprintf_r+0xc0>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f108 0801 	add.w	r8, r8, #1
 8001ff8:	9305      	str	r3, [sp, #20]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	250a      	movs	r5, #10
 8001ffe:	4640      	mov	r0, r8
 8002000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002004:	3a30      	subs	r2, #48	; 0x30
 8002006:	2a09      	cmp	r2, #9
 8002008:	d903      	bls.n	8002012 <_vfiprintf_r+0x1ca>
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0c3      	beq.n	8001f96 <_vfiprintf_r+0x14e>
 800200e:	9105      	str	r1, [sp, #20]
 8002010:	e7c1      	b.n	8001f96 <_vfiprintf_r+0x14e>
 8002012:	fb05 2101 	mla	r1, r5, r1, r2
 8002016:	2301      	movs	r3, #1
 8002018:	4680      	mov	r8, r0
 800201a:	e7f0      	b.n	8001ffe <_vfiprintf_r+0x1b6>
 800201c:	ab03      	add	r3, sp, #12
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4622      	mov	r2, r4
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <_vfiprintf_r+0x228>)
 8002024:	a904      	add	r1, sp, #16
 8002026:	4630      	mov	r0, r6
 8002028:	f3af 8000 	nop.w
 800202c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002030:	4681      	mov	r9, r0
 8002032:	d1d5      	bne.n	8001fe0 <_vfiprintf_r+0x198>
 8002034:	89a3      	ldrh	r3, [r4, #12]
 8002036:	065b      	lsls	r3, r3, #25
 8002038:	f53f af7e 	bmi.w	8001f38 <_vfiprintf_r+0xf0>
 800203c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800203e:	e77d      	b.n	8001f3c <_vfiprintf_r+0xf4>
 8002040:	ab03      	add	r3, sp, #12
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	4622      	mov	r2, r4
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <_vfiprintf_r+0x228>)
 8002048:	a904      	add	r1, sp, #16
 800204a:	4630      	mov	r0, r6
 800204c:	f000 f888 	bl	8002160 <_printf_i>
 8002050:	e7ec      	b.n	800202c <_vfiprintf_r+0x1e4>
 8002052:	bf00      	nop
 8002054:	080025c4 	.word	0x080025c4
 8002058:	08002604 	.word	0x08002604
 800205c:	080025e4 	.word	0x080025e4
 8002060:	080025a4 	.word	0x080025a4
 8002064:	0800260a 	.word	0x0800260a
 8002068:	0800260e 	.word	0x0800260e
 800206c:	00000000 	.word	0x00000000
 8002070:	08001e23 	.word	0x08001e23

08002074 <_printf_common>:
 8002074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002078:	4691      	mov	r9, r2
 800207a:	461f      	mov	r7, r3
 800207c:	688a      	ldr	r2, [r1, #8]
 800207e:	690b      	ldr	r3, [r1, #16]
 8002080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002084:	4293      	cmp	r3, r2
 8002086:	bfb8      	it	lt
 8002088:	4613      	movlt	r3, r2
 800208a:	f8c9 3000 	str.w	r3, [r9]
 800208e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002092:	4606      	mov	r6, r0
 8002094:	460c      	mov	r4, r1
 8002096:	b112      	cbz	r2, 800209e <_printf_common+0x2a>
 8002098:	3301      	adds	r3, #1
 800209a:	f8c9 3000 	str.w	r3, [r9]
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	0699      	lsls	r1, r3, #26
 80020a2:	bf42      	ittt	mi
 80020a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80020a8:	3302      	addmi	r3, #2
 80020aa:	f8c9 3000 	strmi.w	r3, [r9]
 80020ae:	6825      	ldr	r5, [r4, #0]
 80020b0:	f015 0506 	ands.w	r5, r5, #6
 80020b4:	d107      	bne.n	80020c6 <_printf_common+0x52>
 80020b6:	f104 0a19 	add.w	sl, r4, #25
 80020ba:	68e3      	ldr	r3, [r4, #12]
 80020bc:	f8d9 2000 	ldr.w	r2, [r9]
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	42ab      	cmp	r3, r5
 80020c4:	dc28      	bgt.n	8002118 <_printf_common+0xa4>
 80020c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	3300      	adds	r3, #0
 80020ce:	bf18      	it	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	0692      	lsls	r2, r2, #26
 80020d4:	d42d      	bmi.n	8002132 <_printf_common+0xbe>
 80020d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020da:	4639      	mov	r1, r7
 80020dc:	4630      	mov	r0, r6
 80020de:	47c0      	blx	r8
 80020e0:	3001      	adds	r0, #1
 80020e2:	d020      	beq.n	8002126 <_printf_common+0xb2>
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	68e5      	ldr	r5, [r4, #12]
 80020e8:	f8d9 2000 	ldr.w	r2, [r9]
 80020ec:	f003 0306 	and.w	r3, r3, #6
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	bf08      	it	eq
 80020f4:	1aad      	subeq	r5, r5, r2
 80020f6:	68a3      	ldr	r3, [r4, #8]
 80020f8:	6922      	ldr	r2, [r4, #16]
 80020fa:	bf0c      	ite	eq
 80020fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002100:	2500      	movne	r5, #0
 8002102:	4293      	cmp	r3, r2
 8002104:	bfc4      	itt	gt
 8002106:	1a9b      	subgt	r3, r3, r2
 8002108:	18ed      	addgt	r5, r5, r3
 800210a:	f04f 0900 	mov.w	r9, #0
 800210e:	341a      	adds	r4, #26
 8002110:	454d      	cmp	r5, r9
 8002112:	d11a      	bne.n	800214a <_printf_common+0xd6>
 8002114:	2000      	movs	r0, #0
 8002116:	e008      	b.n	800212a <_printf_common+0xb6>
 8002118:	2301      	movs	r3, #1
 800211a:	4652      	mov	r2, sl
 800211c:	4639      	mov	r1, r7
 800211e:	4630      	mov	r0, r6
 8002120:	47c0      	blx	r8
 8002122:	3001      	adds	r0, #1
 8002124:	d103      	bne.n	800212e <_printf_common+0xba>
 8002126:	f04f 30ff 	mov.w	r0, #4294967295
 800212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800212e:	3501      	adds	r5, #1
 8002130:	e7c3      	b.n	80020ba <_printf_common+0x46>
 8002132:	18e1      	adds	r1, r4, r3
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	2030      	movs	r0, #48	; 0x30
 8002138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800213c:	4422      	add	r2, r4
 800213e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002146:	3302      	adds	r3, #2
 8002148:	e7c5      	b.n	80020d6 <_printf_common+0x62>
 800214a:	2301      	movs	r3, #1
 800214c:	4622      	mov	r2, r4
 800214e:	4639      	mov	r1, r7
 8002150:	4630      	mov	r0, r6
 8002152:	47c0      	blx	r8
 8002154:	3001      	adds	r0, #1
 8002156:	d0e6      	beq.n	8002126 <_printf_common+0xb2>
 8002158:	f109 0901 	add.w	r9, r9, #1
 800215c:	e7d8      	b.n	8002110 <_printf_common+0x9c>
	...

08002160 <_printf_i>:
 8002160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002164:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002168:	460c      	mov	r4, r1
 800216a:	7e09      	ldrb	r1, [r1, #24]
 800216c:	b085      	sub	sp, #20
 800216e:	296e      	cmp	r1, #110	; 0x6e
 8002170:	4617      	mov	r7, r2
 8002172:	4606      	mov	r6, r0
 8002174:	4698      	mov	r8, r3
 8002176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002178:	f000 80b3 	beq.w	80022e2 <_printf_i+0x182>
 800217c:	d822      	bhi.n	80021c4 <_printf_i+0x64>
 800217e:	2963      	cmp	r1, #99	; 0x63
 8002180:	d036      	beq.n	80021f0 <_printf_i+0x90>
 8002182:	d80a      	bhi.n	800219a <_printf_i+0x3a>
 8002184:	2900      	cmp	r1, #0
 8002186:	f000 80b9 	beq.w	80022fc <_printf_i+0x19c>
 800218a:	2958      	cmp	r1, #88	; 0x58
 800218c:	f000 8083 	beq.w	8002296 <_printf_i+0x136>
 8002190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002198:	e032      	b.n	8002200 <_printf_i+0xa0>
 800219a:	2964      	cmp	r1, #100	; 0x64
 800219c:	d001      	beq.n	80021a2 <_printf_i+0x42>
 800219e:	2969      	cmp	r1, #105	; 0x69
 80021a0:	d1f6      	bne.n	8002190 <_printf_i+0x30>
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	0605      	lsls	r5, r0, #24
 80021a8:	f103 0104 	add.w	r1, r3, #4
 80021ac:	d52a      	bpl.n	8002204 <_printf_i+0xa4>
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	da03      	bge.n	80021be <_printf_i+0x5e>
 80021b6:	222d      	movs	r2, #45	; 0x2d
 80021b8:	425b      	negs	r3, r3
 80021ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80021be:	486f      	ldr	r0, [pc, #444]	; (800237c <_printf_i+0x21c>)
 80021c0:	220a      	movs	r2, #10
 80021c2:	e039      	b.n	8002238 <_printf_i+0xd8>
 80021c4:	2973      	cmp	r1, #115	; 0x73
 80021c6:	f000 809d 	beq.w	8002304 <_printf_i+0x1a4>
 80021ca:	d808      	bhi.n	80021de <_printf_i+0x7e>
 80021cc:	296f      	cmp	r1, #111	; 0x6f
 80021ce:	d020      	beq.n	8002212 <_printf_i+0xb2>
 80021d0:	2970      	cmp	r1, #112	; 0x70
 80021d2:	d1dd      	bne.n	8002190 <_printf_i+0x30>
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	f043 0320 	orr.w	r3, r3, #32
 80021da:	6023      	str	r3, [r4, #0]
 80021dc:	e003      	b.n	80021e6 <_printf_i+0x86>
 80021de:	2975      	cmp	r1, #117	; 0x75
 80021e0:	d017      	beq.n	8002212 <_printf_i+0xb2>
 80021e2:	2978      	cmp	r1, #120	; 0x78
 80021e4:	d1d4      	bne.n	8002190 <_printf_i+0x30>
 80021e6:	2378      	movs	r3, #120	; 0x78
 80021e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021ec:	4864      	ldr	r0, [pc, #400]	; (8002380 <_printf_i+0x220>)
 80021ee:	e055      	b.n	800229c <_printf_i+0x13c>
 80021f0:	6813      	ldr	r3, [r2, #0]
 80021f2:	1d19      	adds	r1, r3, #4
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6011      	str	r1, [r2, #0]
 80021f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002200:	2301      	movs	r3, #1
 8002202:	e08c      	b.n	800231e <_printf_i+0x1be>
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6011      	str	r1, [r2, #0]
 8002208:	f010 0f40 	tst.w	r0, #64	; 0x40
 800220c:	bf18      	it	ne
 800220e:	b21b      	sxthne	r3, r3
 8002210:	e7cf      	b.n	80021b2 <_printf_i+0x52>
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	6825      	ldr	r5, [r4, #0]
 8002216:	1d18      	adds	r0, r3, #4
 8002218:	6010      	str	r0, [r2, #0]
 800221a:	0628      	lsls	r0, r5, #24
 800221c:	d501      	bpl.n	8002222 <_printf_i+0xc2>
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	e002      	b.n	8002228 <_printf_i+0xc8>
 8002222:	0668      	lsls	r0, r5, #25
 8002224:	d5fb      	bpl.n	800221e <_printf_i+0xbe>
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	4854      	ldr	r0, [pc, #336]	; (800237c <_printf_i+0x21c>)
 800222a:	296f      	cmp	r1, #111	; 0x6f
 800222c:	bf14      	ite	ne
 800222e:	220a      	movne	r2, #10
 8002230:	2208      	moveq	r2, #8
 8002232:	2100      	movs	r1, #0
 8002234:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002238:	6865      	ldr	r5, [r4, #4]
 800223a:	60a5      	str	r5, [r4, #8]
 800223c:	2d00      	cmp	r5, #0
 800223e:	f2c0 8095 	blt.w	800236c <_printf_i+0x20c>
 8002242:	6821      	ldr	r1, [r4, #0]
 8002244:	f021 0104 	bic.w	r1, r1, #4
 8002248:	6021      	str	r1, [r4, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d13d      	bne.n	80022ca <_printf_i+0x16a>
 800224e:	2d00      	cmp	r5, #0
 8002250:	f040 808e 	bne.w	8002370 <_printf_i+0x210>
 8002254:	4665      	mov	r5, ip
 8002256:	2a08      	cmp	r2, #8
 8002258:	d10b      	bne.n	8002272 <_printf_i+0x112>
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	07db      	lsls	r3, r3, #31
 800225e:	d508      	bpl.n	8002272 <_printf_i+0x112>
 8002260:	6923      	ldr	r3, [r4, #16]
 8002262:	6862      	ldr	r2, [r4, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	bfde      	ittt	le
 8002268:	2330      	movle	r3, #48	; 0x30
 800226a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800226e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002272:	ebac 0305 	sub.w	r3, ip, r5
 8002276:	6123      	str	r3, [r4, #16]
 8002278:	f8cd 8000 	str.w	r8, [sp]
 800227c:	463b      	mov	r3, r7
 800227e:	aa03      	add	r2, sp, #12
 8002280:	4621      	mov	r1, r4
 8002282:	4630      	mov	r0, r6
 8002284:	f7ff fef6 	bl	8002074 <_printf_common>
 8002288:	3001      	adds	r0, #1
 800228a:	d14d      	bne.n	8002328 <_printf_i+0x1c8>
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	b005      	add	sp, #20
 8002292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002296:	4839      	ldr	r0, [pc, #228]	; (800237c <_printf_i+0x21c>)
 8002298:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800229c:	6813      	ldr	r3, [r2, #0]
 800229e:	6821      	ldr	r1, [r4, #0]
 80022a0:	1d1d      	adds	r5, r3, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6015      	str	r5, [r2, #0]
 80022a6:	060a      	lsls	r2, r1, #24
 80022a8:	d50b      	bpl.n	80022c2 <_printf_i+0x162>
 80022aa:	07ca      	lsls	r2, r1, #31
 80022ac:	bf44      	itt	mi
 80022ae:	f041 0120 	orrmi.w	r1, r1, #32
 80022b2:	6021      	strmi	r1, [r4, #0]
 80022b4:	b91b      	cbnz	r3, 80022be <_printf_i+0x15e>
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	f022 0220 	bic.w	r2, r2, #32
 80022bc:	6022      	str	r2, [r4, #0]
 80022be:	2210      	movs	r2, #16
 80022c0:	e7b7      	b.n	8002232 <_printf_i+0xd2>
 80022c2:	064d      	lsls	r5, r1, #25
 80022c4:	bf48      	it	mi
 80022c6:	b29b      	uxthmi	r3, r3
 80022c8:	e7ef      	b.n	80022aa <_printf_i+0x14a>
 80022ca:	4665      	mov	r5, ip
 80022cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80022d0:	fb02 3311 	mls	r3, r2, r1, r3
 80022d4:	5cc3      	ldrb	r3, [r0, r3]
 80022d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80022da:	460b      	mov	r3, r1
 80022dc:	2900      	cmp	r1, #0
 80022de:	d1f5      	bne.n	80022cc <_printf_i+0x16c>
 80022e0:	e7b9      	b.n	8002256 <_printf_i+0xf6>
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	6825      	ldr	r5, [r4, #0]
 80022e6:	6961      	ldr	r1, [r4, #20]
 80022e8:	1d18      	adds	r0, r3, #4
 80022ea:	6010      	str	r0, [r2, #0]
 80022ec:	0628      	lsls	r0, r5, #24
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	d501      	bpl.n	80022f6 <_printf_i+0x196>
 80022f2:	6019      	str	r1, [r3, #0]
 80022f4:	e002      	b.n	80022fc <_printf_i+0x19c>
 80022f6:	066a      	lsls	r2, r5, #25
 80022f8:	d5fb      	bpl.n	80022f2 <_printf_i+0x192>
 80022fa:	8019      	strh	r1, [r3, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	6123      	str	r3, [r4, #16]
 8002300:	4665      	mov	r5, ip
 8002302:	e7b9      	b.n	8002278 <_printf_i+0x118>
 8002304:	6813      	ldr	r3, [r2, #0]
 8002306:	1d19      	adds	r1, r3, #4
 8002308:	6011      	str	r1, [r2, #0]
 800230a:	681d      	ldr	r5, [r3, #0]
 800230c:	6862      	ldr	r2, [r4, #4]
 800230e:	2100      	movs	r1, #0
 8002310:	4628      	mov	r0, r5
 8002312:	f7fd ff85 	bl	8000220 <memchr>
 8002316:	b108      	cbz	r0, 800231c <_printf_i+0x1bc>
 8002318:	1b40      	subs	r0, r0, r5
 800231a:	6060      	str	r0, [r4, #4]
 800231c:	6863      	ldr	r3, [r4, #4]
 800231e:	6123      	str	r3, [r4, #16]
 8002320:	2300      	movs	r3, #0
 8002322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002326:	e7a7      	b.n	8002278 <_printf_i+0x118>
 8002328:	6923      	ldr	r3, [r4, #16]
 800232a:	462a      	mov	r2, r5
 800232c:	4639      	mov	r1, r7
 800232e:	4630      	mov	r0, r6
 8002330:	47c0      	blx	r8
 8002332:	3001      	adds	r0, #1
 8002334:	d0aa      	beq.n	800228c <_printf_i+0x12c>
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	079b      	lsls	r3, r3, #30
 800233a:	d413      	bmi.n	8002364 <_printf_i+0x204>
 800233c:	68e0      	ldr	r0, [r4, #12]
 800233e:	9b03      	ldr	r3, [sp, #12]
 8002340:	4298      	cmp	r0, r3
 8002342:	bfb8      	it	lt
 8002344:	4618      	movlt	r0, r3
 8002346:	e7a3      	b.n	8002290 <_printf_i+0x130>
 8002348:	2301      	movs	r3, #1
 800234a:	464a      	mov	r2, r9
 800234c:	4639      	mov	r1, r7
 800234e:	4630      	mov	r0, r6
 8002350:	47c0      	blx	r8
 8002352:	3001      	adds	r0, #1
 8002354:	d09a      	beq.n	800228c <_printf_i+0x12c>
 8002356:	3501      	adds	r5, #1
 8002358:	68e3      	ldr	r3, [r4, #12]
 800235a:	9a03      	ldr	r2, [sp, #12]
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	42ab      	cmp	r3, r5
 8002360:	dcf2      	bgt.n	8002348 <_printf_i+0x1e8>
 8002362:	e7eb      	b.n	800233c <_printf_i+0x1dc>
 8002364:	2500      	movs	r5, #0
 8002366:	f104 0919 	add.w	r9, r4, #25
 800236a:	e7f5      	b.n	8002358 <_printf_i+0x1f8>
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ac      	bne.n	80022ca <_printf_i+0x16a>
 8002370:	7803      	ldrb	r3, [r0, #0]
 8002372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002376:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800237a:	e76c      	b.n	8002256 <_printf_i+0xf6>
 800237c:	08002615 	.word	0x08002615
 8002380:	08002626 	.word	0x08002626

08002384 <_sbrk_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	4c06      	ldr	r4, [pc, #24]	; (80023a0 <_sbrk_r+0x1c>)
 8002388:	2300      	movs	r3, #0
 800238a:	4605      	mov	r5, r0
 800238c:	4608      	mov	r0, r1
 800238e:	6023      	str	r3, [r4, #0]
 8002390:	f7ff f8e8 	bl	8001564 <_sbrk>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d102      	bne.n	800239e <_sbrk_r+0x1a>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	b103      	cbz	r3, 800239e <_sbrk_r+0x1a>
 800239c:	602b      	str	r3, [r5, #0]
 800239e:	bd38      	pop	{r3, r4, r5, pc}
 80023a0:	200004d4 	.word	0x200004d4

080023a4 <__sread>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	460c      	mov	r4, r1
 80023a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023ac:	f000 f896 	bl	80024dc <_read_r>
 80023b0:	2800      	cmp	r0, #0
 80023b2:	bfab      	itete	ge
 80023b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023b6:	89a3      	ldrhlt	r3, [r4, #12]
 80023b8:	181b      	addge	r3, r3, r0
 80023ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023be:	bfac      	ite	ge
 80023c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80023c2:	81a3      	strhlt	r3, [r4, #12]
 80023c4:	bd10      	pop	{r4, pc}

080023c6 <__swrite>:
 80023c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ca:	461f      	mov	r7, r3
 80023cc:	898b      	ldrh	r3, [r1, #12]
 80023ce:	05db      	lsls	r3, r3, #23
 80023d0:	4605      	mov	r5, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	4616      	mov	r6, r2
 80023d6:	d505      	bpl.n	80023e4 <__swrite+0x1e>
 80023d8:	2302      	movs	r3, #2
 80023da:	2200      	movs	r2, #0
 80023dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e0:	f000 f868 	bl	80024b4 <_lseek_r>
 80023e4:	89a3      	ldrh	r3, [r4, #12]
 80023e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023ee:	81a3      	strh	r3, [r4, #12]
 80023f0:	4632      	mov	r2, r6
 80023f2:	463b      	mov	r3, r7
 80023f4:	4628      	mov	r0, r5
 80023f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023fa:	f000 b817 	b.w	800242c <_write_r>

080023fe <__sseek>:
 80023fe:	b510      	push	{r4, lr}
 8002400:	460c      	mov	r4, r1
 8002402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002406:	f000 f855 	bl	80024b4 <_lseek_r>
 800240a:	1c43      	adds	r3, r0, #1
 800240c:	89a3      	ldrh	r3, [r4, #12]
 800240e:	bf15      	itete	ne
 8002410:	6560      	strne	r0, [r4, #84]	; 0x54
 8002412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800241a:	81a3      	strheq	r3, [r4, #12]
 800241c:	bf18      	it	ne
 800241e:	81a3      	strhne	r3, [r4, #12]
 8002420:	bd10      	pop	{r4, pc}

08002422 <__sclose>:
 8002422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002426:	f000 b813 	b.w	8002450 <_close_r>
	...

0800242c <_write_r>:
 800242c:	b538      	push	{r3, r4, r5, lr}
 800242e:	4c07      	ldr	r4, [pc, #28]	; (800244c <_write_r+0x20>)
 8002430:	4605      	mov	r5, r0
 8002432:	4608      	mov	r0, r1
 8002434:	4611      	mov	r1, r2
 8002436:	2200      	movs	r2, #0
 8002438:	6022      	str	r2, [r4, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	f7ff f845 	bl	80014ca <_write>
 8002440:	1c43      	adds	r3, r0, #1
 8002442:	d102      	bne.n	800244a <_write_r+0x1e>
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	b103      	cbz	r3, 800244a <_write_r+0x1e>
 8002448:	602b      	str	r3, [r5, #0]
 800244a:	bd38      	pop	{r3, r4, r5, pc}
 800244c:	200004d4 	.word	0x200004d4

08002450 <_close_r>:
 8002450:	b538      	push	{r3, r4, r5, lr}
 8002452:	4c06      	ldr	r4, [pc, #24]	; (800246c <_close_r+0x1c>)
 8002454:	2300      	movs	r3, #0
 8002456:	4605      	mov	r5, r0
 8002458:	4608      	mov	r0, r1
 800245a:	6023      	str	r3, [r4, #0]
 800245c:	f7ff f851 	bl	8001502 <_close>
 8002460:	1c43      	adds	r3, r0, #1
 8002462:	d102      	bne.n	800246a <_close_r+0x1a>
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	b103      	cbz	r3, 800246a <_close_r+0x1a>
 8002468:	602b      	str	r3, [r5, #0]
 800246a:	bd38      	pop	{r3, r4, r5, pc}
 800246c:	200004d4 	.word	0x200004d4

08002470 <_fstat_r>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	4c07      	ldr	r4, [pc, #28]	; (8002490 <_fstat_r+0x20>)
 8002474:	2300      	movs	r3, #0
 8002476:	4605      	mov	r5, r0
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	f7ff f84b 	bl	8001518 <_fstat>
 8002482:	1c43      	adds	r3, r0, #1
 8002484:	d102      	bne.n	800248c <_fstat_r+0x1c>
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	b103      	cbz	r3, 800248c <_fstat_r+0x1c>
 800248a:	602b      	str	r3, [r5, #0]
 800248c:	bd38      	pop	{r3, r4, r5, pc}
 800248e:	bf00      	nop
 8002490:	200004d4 	.word	0x200004d4

08002494 <_isatty_r>:
 8002494:	b538      	push	{r3, r4, r5, lr}
 8002496:	4c06      	ldr	r4, [pc, #24]	; (80024b0 <_isatty_r+0x1c>)
 8002498:	2300      	movs	r3, #0
 800249a:	4605      	mov	r5, r0
 800249c:	4608      	mov	r0, r1
 800249e:	6023      	str	r3, [r4, #0]
 80024a0:	f7ff f849 	bl	8001536 <_isatty>
 80024a4:	1c43      	adds	r3, r0, #1
 80024a6:	d102      	bne.n	80024ae <_isatty_r+0x1a>
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	b103      	cbz	r3, 80024ae <_isatty_r+0x1a>
 80024ac:	602b      	str	r3, [r5, #0]
 80024ae:	bd38      	pop	{r3, r4, r5, pc}
 80024b0:	200004d4 	.word	0x200004d4

080024b4 <_lseek_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	4c07      	ldr	r4, [pc, #28]	; (80024d4 <_lseek_r+0x20>)
 80024b8:	4605      	mov	r5, r0
 80024ba:	4608      	mov	r0, r1
 80024bc:	4611      	mov	r1, r2
 80024be:	2200      	movs	r2, #0
 80024c0:	6022      	str	r2, [r4, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f7ff f841 	bl	800154a <_lseek>
 80024c8:	1c43      	adds	r3, r0, #1
 80024ca:	d102      	bne.n	80024d2 <_lseek_r+0x1e>
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	b103      	cbz	r3, 80024d2 <_lseek_r+0x1e>
 80024d0:	602b      	str	r3, [r5, #0]
 80024d2:	bd38      	pop	{r3, r4, r5, pc}
 80024d4:	200004d4 	.word	0x200004d4

080024d8 <__malloc_lock>:
 80024d8:	4770      	bx	lr

080024da <__malloc_unlock>:
 80024da:	4770      	bx	lr

080024dc <_read_r>:
 80024dc:	b538      	push	{r3, r4, r5, lr}
 80024de:	4c07      	ldr	r4, [pc, #28]	; (80024fc <_read_r+0x20>)
 80024e0:	4605      	mov	r5, r0
 80024e2:	4608      	mov	r0, r1
 80024e4:	4611      	mov	r1, r2
 80024e6:	2200      	movs	r2, #0
 80024e8:	6022      	str	r2, [r4, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	f7fe ffd0 	bl	8001490 <_read>
 80024f0:	1c43      	adds	r3, r0, #1
 80024f2:	d102      	bne.n	80024fa <_read_r+0x1e>
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	b103      	cbz	r3, 80024fa <_read_r+0x1e>
 80024f8:	602b      	str	r3, [r5, #0]
 80024fa:	bd38      	pop	{r3, r4, r5, pc}
 80024fc:	200004d4 	.word	0x200004d4

08002500 <_init>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr

0800250c <_fini>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	bf00      	nop
 8002510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002512:	bc08      	pop	{r3}
 8002514:	469e      	mov	lr, r3
 8002516:	4770      	bx	lr
