
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08001e04  08001e04  00011e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f24  08001f24  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001f24  08001f24  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f24  08001f24  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f24  08001f24  00011f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f28  08001f28  00011f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08001f90  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001f90  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003144  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008fb  00000000  00000000  000231d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000210  00000000  00000000  00023ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b8  00000000  00000000  00023ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003432  00000000  00000000  00023e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ef0  00000000  00000000  000272ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000be13  00000000  00000000  000291ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00034fcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e98  00000000  00000000  00035048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001dec 	.word	0x08001dec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001dec 	.word	0x08001dec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <SPI2_GPIOInits>:
/* Arduino LED */
#define LED_PIN					13 //9


void SPI2_GPIOInits(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <SPI2_GPIOInits+0x58>)
 80002b8:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ba:	2302      	movs	r3, #2
 80002bc:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002be:	2305      	movs	r3, #5
 80002c0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002c2:	2300      	movs	r3, #0
 80002c4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002c6:	2301      	movs	r3, #1
 80002c8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ca:	2302      	movs	r3, #2
 80002cc:	72bb      	strb	r3, [r7, #10]

	/* SCLK Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ce:	230d      	movs	r3, #13
 80002d0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fae3 	bl	80008a0 <GPIO_Init>

	/* MOSI Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002da:	230f      	movs	r3, #15
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fadd 	bl	80008a0 <GPIO_Init>

	/* MISO Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002e6:	230e      	movs	r3, #14
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fad7 	bl	80008a0 <GPIO_Init>

	/* NSS Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002f2:	230c      	movs	r3, #12
 80002f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fad1 	bl	80008a0 <GPIO_Init>

}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40020400 	.word	0x40020400

0800030c <SPI2_Inits>:


void SPI2_Inits(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
	SPI_Handle_t SPIHandle;

	SPIHandle.pSPIx = SPI2;
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <SPI2_Inits+0x38>)
 8000314:	607b      	str	r3, [r7, #4]
	SPIHandle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000316:	2301      	movs	r3, #1
 8000318:	727b      	strb	r3, [r7, #9]
	SPIHandle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800031a:	2301      	movs	r3, #1
 800031c:	723b      	strb	r3, [r7, #8]
	SPIHandle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; //2MHz
 800031e:	2302      	movs	r3, #2
 8000320:	72bb      	strb	r3, [r7, #10]
	SPIHandle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000322:	2300      	movs	r3, #0
 8000324:	72fb      	strb	r3, [r7, #11]
	SPIHandle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000326:	2300      	movs	r3, #0
 8000328:	733b      	strb	r3, [r7, #12]
	SPIHandle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800032a:	2300      	movs	r3, #0
 800032c:	737b      	strb	r3, [r7, #13]
	SPIHandle.SPIConfig.SPI_SSM = SPI_SSM_DI; //HW Slave management enabled for NSS pin
 800032e:	2300      	movs	r3, #0
 8000330:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPIHandle);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fcd3 	bl	8000ce0 <SPI_Init>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40003800 	.word	0x40003800

08000348 <GPIO_ButtonInit>:


void GPIO_ButtonInit(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOC;
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <GPIO_ButtonInit+0x2c>)
 8000350:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000352:	230d      	movs	r3, #13
 8000354:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000356:	2300      	movs	r3, #0
 8000358:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800035a:	2302      	movs	r3, #2
 800035c:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 800035e:	2300      	movs	r3, #0
 8000360:	72fb      	strb	r3, [r7, #11]

	//GPIO_PeriClockControl(GPIOC, ENABLE);

	GPIO_Init(&GpioBtn);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fa9b 	bl	80008a0 <GPIO_Init>
}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40020800 	.word	0x40020800

08000378 <delay>:

void delay(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	e002      	b.n	800038a <delay+0x12>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a03      	ldr	r2, [pc, #12]	; (800039c <delay+0x24>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d9f8      	bls.n	8000384 <delay+0xc>
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	0003d08f 	.word	0x0003d08f

080003a0 <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackByte)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	if(ackByte == 0xF5)
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2bf5      	cmp	r3, #245	; 0xf5
 80003ae:	d101      	bne.n	80003b4 <SPI_VerifyResponse+0x14>
	{
		return 1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	e000      	b.n	80003b6 <SPI_VerifyResponse+0x16>
	}

	return 0;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr

080003c0 <main>:


int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
	uint8_t dummyWrite = 0xFF;
 80003c6:	23ff      	movs	r3, #255	; 0xff
 80003c8:	73fb      	strb	r3, [r7, #15]
	uint8_t dummyRead;

	GPIO_ButtonInit();
 80003ca:	f7ff ffbd 	bl	8000348 <GPIO_ButtonInit>

	/* Initialize GPIO pins to behave as SPI2 pins */
	SPI2_GPIOInits();
 80003ce:	f7ff ff6f 	bl	80002b0 <SPI2_GPIOInits>

	/* Initialize SPI2 peripheral parameters */
	SPI2_Inits();
 80003d2:	f7ff ff9b 	bl	800030c <SPI2_Inits>
	 * Making SSOE 1 does NSS output enable.
	 * The NSS pin is automatically managed by hardware.
	 * i.e. when SPE=1, NSS will be pulled to LOW and
	 * NSS pin will be HIGH when SPE=0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 80003d6:	2101      	movs	r1, #1
 80003d8:	484f      	ldr	r0, [pc, #316]	; (8000518 <main+0x158>)
 80003da:	f000 fd73 	bl	8000ec4 <SPI_SSOEConfig>

	while(1)
	{
		/* Wait till button is pressed */
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 80003de:	bf00      	nop
 80003e0:	210d      	movs	r1, #13
 80003e2:	484e      	ldr	r0, [pc, #312]	; (800051c <main+0x15c>)
 80003e4:	f000 fbf6 	bl	8000bd4 <GPIO_ReadFromInputPin>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d1f8      	bne.n	80003e0 <main+0x20>

		printf("\nSPI communication started!");
 80003ee:	484c      	ldr	r0, [pc, #304]	; (8000520 <main+0x160>)
 80003f0:	f000 fdb6 	bl	8000f60 <iprintf>

		/* 200ms delay */
		delay();
 80003f4:	f7ff ffc0 	bl	8000378 <delay>

		/* Enable SPI2 peripheral */
		SPI_PeripheralControl(SPI2, ENABLE);
 80003f8:	2101      	movs	r1, #1
 80003fa:	4847      	ldr	r0, [pc, #284]	; (8000518 <main+0x158>)
 80003fc:	f000 fd47 	bl	8000e8e <SPI_PeripheralControl>

		/* Send SPI data: CMD LED Control */
		uint8_t commandCode = COMMAND_LED_CTRL;
 8000400:	2350      	movs	r3, #80	; 0x50
 8000402:	737b      	strb	r3, [r7, #13]

		/* Send command */
		SPI_SendData(SPI2, &commandCode, 1);
 8000404:	f107 030d 	add.w	r3, r7, #13
 8000408:	2201      	movs	r2, #1
 800040a:	4619      	mov	r1, r3
 800040c:	4842      	ldr	r0, [pc, #264]	; (8000518 <main+0x158>)
 800040e:	f000 fcce 	bl	8000dae <SPI_SendData>

		/* Dummy read to clear off the RXNE */
		SPI_ReceiveData(SPI2, &dummyRead, 1);
 8000412:	f107 030e 	add.w	r3, r7, #14
 8000416:	2201      	movs	r2, #1
 8000418:	4619      	mov	r1, r3
 800041a:	483f      	ldr	r0, [pc, #252]	; (8000518 <main+0x158>)
 800041c:	f000 fcff 	bl	8000e1e <SPI_ReceiveData>

		/* Send dummy bits (byte) to fetch the response from slave */
		SPI_SendData(SPI2, &dummyWrite, 1);
 8000420:	f107 030f 	add.w	r3, r7, #15
 8000424:	2201      	movs	r2, #1
 8000426:	4619      	mov	r1, r3
 8000428:	483b      	ldr	r0, [pc, #236]	; (8000518 <main+0x158>)
 800042a:	f000 fcc0 	bl	8000dae <SPI_SendData>

		/* Receive Acknowledgment byte */
		uint8_t ackByte;
		SPI_ReceiveData(SPI2, &ackByte, 1);
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	2201      	movs	r2, #1
 8000434:	4619      	mov	r1, r3
 8000436:	4838      	ldr	r0, [pc, #224]	; (8000518 <main+0x158>)
 8000438:	f000 fcf1 	bl	8000e1e <SPI_ReceiveData>

		/* Verify response from SPI slave */
		uint8_t args[2];
		if( SPI_VerifyResponse(ackByte) )
 800043c:	7b3b      	ldrb	r3, [r7, #12]
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ffae 	bl	80003a0 <SPI_VerifyResponse>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d00d      	beq.n	8000466 <main+0xa6>
		{
			/* Send arguments */
			args[0] = LED_PIN;
 800044a:	230d      	movs	r3, #13
 800044c:	723b      	strb	r3, [r7, #8]
			args[1] = LED_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	727b      	strb	r3, [r7, #9]
			SPI_SendData(SPI2, args, 2);
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	2202      	movs	r2, #2
 8000458:	4619      	mov	r1, r3
 800045a:	482f      	ldr	r0, [pc, #188]	; (8000518 <main+0x158>)
 800045c:	f000 fca7 	bl	8000dae <SPI_SendData>
			printf("Command LED executed!\n");
 8000460:	4830      	ldr	r0, [pc, #192]	; (8000524 <main+0x164>)
 8000462:	f000 fdf1 	bl	8001048 <puts>
		}
		/* End of CMD LED Control */

		/* Send SPI data: CMD Sensor Read */
		commandCode = COMMAND_SENSOR_READ;
 8000466:	2351      	movs	r3, #81	; 0x51
 8000468:	737b      	strb	r3, [r7, #13]

		/* Send command */
		SPI_SendData(SPI2, &commandCode, 1);
 800046a:	f107 030d 	add.w	r3, r7, #13
 800046e:	2201      	movs	r2, #1
 8000470:	4619      	mov	r1, r3
 8000472:	4829      	ldr	r0, [pc, #164]	; (8000518 <main+0x158>)
 8000474:	f000 fc9b 	bl	8000dae <SPI_SendData>

		/* Dummy read to clear off the RXNE */
		SPI_ReceiveData(SPI2, &dummyRead, 1);
 8000478:	f107 030e 	add.w	r3, r7, #14
 800047c:	2201      	movs	r2, #1
 800047e:	4619      	mov	r1, r3
 8000480:	4825      	ldr	r0, [pc, #148]	; (8000518 <main+0x158>)
 8000482:	f000 fccc 	bl	8000e1e <SPI_ReceiveData>

		/* Send dummy bits (byte) to fetch the response from slave */
		SPI_SendData(SPI2, &dummyWrite, 1);
 8000486:	f107 030f 	add.w	r3, r7, #15
 800048a:	2201      	movs	r2, #1
 800048c:	4619      	mov	r1, r3
 800048e:	4822      	ldr	r0, [pc, #136]	; (8000518 <main+0x158>)
 8000490:	f000 fc8d 	bl	8000dae <SPI_SendData>

		/* Receive Acknowledgment byte */
		SPI_ReceiveData(SPI2, &ackByte, 1);
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	2201      	movs	r2, #1
 800049a:	4619      	mov	r1, r3
 800049c:	481e      	ldr	r0, [pc, #120]	; (8000518 <main+0x158>)
 800049e:	f000 fcbe 	bl	8000e1e <SPI_ReceiveData>

		/* Verify response from SPI slave */
		if( SPI_VerifyResponse(ackByte) )
 80004a2:	7b3b      	ldrb	r3, [r7, #12]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ff7b 	bl	80003a0 <SPI_VerifyResponse>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d026      	beq.n	80004fe <main+0x13e>
		{
			/* Send arguments */
			args[0] = ANALOG_PIN0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	723b      	strb	r3, [r7, #8]
			SPI_SendData(SPI2, args, 1);
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	2201      	movs	r2, #1
 80004ba:	4619      	mov	r1, r3
 80004bc:	4816      	ldr	r0, [pc, #88]	; (8000518 <main+0x158>)
 80004be:	f000 fc76 	bl	8000dae <SPI_SendData>
			printf("Command Sensor Read executed!\n");
 80004c2:	4819      	ldr	r0, [pc, #100]	; (8000528 <main+0x168>)
 80004c4:	f000 fdc0 	bl	8001048 <puts>

			/* Dummy read to clear off the RXNE */
			SPI_ReceiveData(SPI2, &dummyRead, 1);
 80004c8:	f107 030e 	add.w	r3, r7, #14
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	4811      	ldr	r0, [pc, #68]	; (8000518 <main+0x158>)
 80004d2:	f000 fca4 	bl	8000e1e <SPI_ReceiveData>

			/* Send dummy bits (byte) to fetch the response from slave */
			SPI_SendData(SPI2, &dummyWrite, 1);
 80004d6:	f107 030f 	add.w	r3, r7, #15
 80004da:	2201      	movs	r2, #1
 80004dc:	4619      	mov	r1, r3
 80004de:	480e      	ldr	r0, [pc, #56]	; (8000518 <main+0x158>)
 80004e0:	f000 fc65 	bl	8000dae <SPI_SendData>

			/* Wait for Slave to be ready with data */
			delay();
 80004e4:	f7ff ff48 	bl	8000378 <delay>

			/* Receive Sensor Data from Slave */
			uint8_t analogRead;
			SPI_ReceiveData(SPI2, &analogRead, 1);
 80004e8:	1dfb      	adds	r3, r7, #7
 80004ea:	2201      	movs	r2, #1
 80004ec:	4619      	mov	r1, r3
 80004ee:	480a      	ldr	r0, [pc, #40]	; (8000518 <main+0x158>)
 80004f0:	f000 fc95 	bl	8000e1e <SPI_ReceiveData>
			printf("Analog read value: %d\n",analogRead);
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	4619      	mov	r1, r3
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <main+0x16c>)
 80004fa:	f000 fd31 	bl	8000f60 <iprintf>
		}
		/* End of CMD Sensor Read */

		/* Confirm SPI2 not busy */
		SPI_GetFlagStatus(SPI2, SPI_SR_BSY);
 80004fe:	2107      	movs	r1, #7
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x158>)
 8000502:	f000 fc41 	bl	8000d88 <SPI_GetFlagStatus>

		/* Disable SPI2 peripheral */
		SPI_PeripheralControl(SPI2, DISABLE);
 8000506:	2100      	movs	r1, #0
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <main+0x158>)
 800050a:	f000 fcc0 	bl	8000e8e <SPI_PeripheralControl>

		printf("\nSPI communication closed!");
 800050e:	4808      	ldr	r0, [pc, #32]	; (8000530 <main+0x170>)
 8000510:	f000 fd26 	bl	8000f60 <iprintf>
	{
 8000514:	e763      	b.n	80003de <main+0x1e>
 8000516:	bf00      	nop
 8000518:	40003800 	.word	0x40003800
 800051c:	40020800 	.word	0x40020800
 8000520:	08001e04 	.word	0x08001e04
 8000524:	08001e20 	.word	0x08001e20
 8000528:	08001e38 	.word	0x08001e38
 800052c:	08001e58 	.word	0x08001e58
 8000530:	08001e70 	.word	0x08001e70

08000534 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <ITM_SendChar+0x44>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <ITM_SendChar+0x44>)
 8000544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000548:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <ITM_SendChar+0x48>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <ITM_SendChar+0x48>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000556:	bf00      	nop
 8000558:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f8      	beq.n	8000558 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000566:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	6013      	str	r3, [r2, #0]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	e000edfc 	.word	0xe000edfc
 800057c:	e0000e00 	.word	0xe0000e00

08000580 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	e00a      	b.n	80005a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000592:	f3af 8000 	nop.w
 8000596:	4601      	mov	r1, r0
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	b2ca      	uxtb	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbf0      	blt.n	8000592 <_read+0x12>
	}

return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b086      	sub	sp, #24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e009      	b.n	80005e0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);	//ITM Debuger enabled
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffad 	bl	8000534 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf1      	blt.n	80005cc <_write+0x12>
	}
	return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_close>:

int _close(int file)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
	return -1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000618:	605a      	str	r2, [r3, #4]
	return 0;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <_isatty>:

int _isatty(int file)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
	return 1;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800063a:	b480      	push	{r7}
 800063c:	b085      	sub	sp, #20
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
	return 0;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
	...

08000654 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <_sbrk+0x50>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x16>
		heap_end = &end;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <_sbrk+0x50>)
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <_sbrk+0x54>)
 8000668:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <_sbrk+0x50>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <_sbrk+0x50>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	466a      	mov	r2, sp
 800067a:	4293      	cmp	r3, r2
 800067c:	d907      	bls.n	800068e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800067e:	f000 fc3d 	bl	8000efc <__errno>
 8000682:	4602      	mov	r2, r0
 8000684:	230c      	movs	r3, #12
 8000686:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	e006      	b.n	800069c <_sbrk+0x48>
	}

	heap_end += incr;
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <_sbrk+0x50>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <_sbrk+0x50>)
 8000698:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000080 	.word	0x20000080
 80006a8:	20000090 	.word	0x20000090

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b2:	490e      	ldr	r1, [pc, #56]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c8:	4c0b      	ldr	r4, [pc, #44]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006d6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 fc15 	bl	8000f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fe6f 	bl	80003c0 <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006f0:	08001f2c 	.word	0x08001f2c
  ldr r2, =_sbss
 80006f4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006f8:	20000090 	.word	0x20000090

080006fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <GPIO_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d157      	bne.n	80007c2 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a59      	ldr	r2, [pc, #356]	; (800087c <GPIO_PeriClockControl+0x17c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800071a:	4b59      	ldr	r3, [pc, #356]	; (8000880 <GPIO_PeriClockControl+0x180>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a58      	ldr	r2, [pc, #352]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000726:	e0a3      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a56      	ldr	r2, [pc, #344]	; (8000884 <GPIO_PeriClockControl+0x184>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d106      	bne.n	800073e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000730:	4b53      	ldr	r3, [pc, #332]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a52      	ldr	r2, [pc, #328]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073c:	e098      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a51      	ldr	r2, [pc, #324]	; (8000888 <GPIO_PeriClockControl+0x188>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000746:	4b4e      	ldr	r3, [pc, #312]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a4d      	ldr	r2, [pc, #308]	; (8000880 <GPIO_PeriClockControl+0x180>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000752:	e08d      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a4d      	ldr	r2, [pc, #308]	; (800088c <GPIO_PeriClockControl+0x18c>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d106      	bne.n	800076a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800075c:	4b48      	ldr	r3, [pc, #288]	; (8000880 <GPIO_PeriClockControl+0x180>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a47      	ldr	r2, [pc, #284]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000768:	e082      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a48      	ldr	r2, [pc, #288]	; (8000890 <GPIO_PeriClockControl+0x190>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000772:	4b43      	ldr	r3, [pc, #268]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a42      	ldr	r2, [pc, #264]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077e:	e077      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a44      	ldr	r2, [pc, #272]	; (8000894 <GPIO_PeriClockControl+0x194>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d106      	bne.n	8000796 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000788:	4b3d      	ldr	r3, [pc, #244]	; (8000880 <GPIO_PeriClockControl+0x180>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	4a3c      	ldr	r2, [pc, #240]	; (8000880 <GPIO_PeriClockControl+0x180>)
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000794:	e06c      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a3f      	ldr	r2, [pc, #252]	; (8000898 <GPIO_PeriClockControl+0x198>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d106      	bne.n	80007ac <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007aa:	e061      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a3b      	ldr	r2, [pc, #236]	; (800089c <GPIO_PeriClockControl+0x19c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d15d      	bne.n	8000870 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a31      	ldr	r2, [pc, #196]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c0:	e056      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a2d      	ldr	r2, [pc, #180]	; (800087c <GPIO_PeriClockControl+0x17c>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d6:	e04b      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <GPIO_PeriClockControl+0x184>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007e6:	f023 0302 	bic.w	r3, r3, #2
 80007ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ec:	e040      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a25      	ldr	r2, [pc, #148]	; (8000888 <GPIO_PeriClockControl+0x188>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d106      	bne.n	8000804 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <GPIO_PeriClockControl+0x180>)
 80007fc:	f023 0304 	bic.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000802:	e035      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a21      	ldr	r2, [pc, #132]	; (800088c <GPIO_PeriClockControl+0x18c>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d106      	bne.n	800081a <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <GPIO_PeriClockControl+0x180>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000812:	f023 0308 	bic.w	r3, r3, #8
 8000816:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000818:	e02a      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <GPIO_PeriClockControl+0x190>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000828:	f023 0310 	bic.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800082e:	e01f      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a18      	ldr	r2, [pc, #96]	; (8000894 <GPIO_PeriClockControl+0x194>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d106      	bne.n	8000846 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <GPIO_PeriClockControl+0x180>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a10      	ldr	r2, [pc, #64]	; (8000880 <GPIO_PeriClockControl+0x180>)
 800083e:	f023 0320 	bic.w	r3, r3, #32
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000844:	e014      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <GPIO_PeriClockControl+0x198>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085a:	e009      	b.n	8000870 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <GPIO_PeriClockControl+0x19c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d105      	bne.n	8000870 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <GPIO_PeriClockControl+0x180>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <GPIO_PeriClockControl+0x180>)
 800086a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40020000 	.word	0x40020000
 8000880:	40023800 	.word	0x40023800
 8000884:	40020400 	.word	0x40020400
 8000888:	40020800 	.word	0x40020800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40021000 	.word	0x40021000
 8000894:	40021400 	.word	0x40021400
 8000898:	40021800 	.word	0x40021800
 800089c:	40021c00 	.word	0x40021c00

080008a0 <GPIO_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

	/* Enable peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff24 	bl	8000700 <GPIO_PeriClockControl>

	/* GPIO pin mode configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	795b      	ldrb	r3, [r3, #5]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d822      	bhi.n	8000906 <GPIO_Init+0x66>
	{
		/* Non interrupt mode */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	461a      	mov	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing pin
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2103      	movs	r1, #3
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	400a      	ands	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;//Setting pin
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6819      	ldr	r1, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	e0c1      	b.n	8000a8a <GPIO_Init+0x1ea>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	795b      	ldrb	r3, [r3, #5]
 800090a:	2b04      	cmp	r3, #4
 800090c:	d117      	bne.n	800093e <GPIO_Init+0x9e>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800090e:	4b47      	ldr	r3, [pc, #284]	; (8000a2c <GPIO_Init+0x18c>)
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	7912      	ldrb	r2, [r2, #4]
 8000916:	4611      	mov	r1, r2
 8000918:	2201      	movs	r2, #1
 800091a:	408a      	lsls	r2, r1
 800091c:	4611      	mov	r1, r2
 800091e:	4a43      	ldr	r2, [pc, #268]	; (8000a2c <GPIO_Init+0x18c>)
 8000920:	430b      	orrs	r3, r1
 8000922:	60d3      	str	r3, [r2, #12]
			/* Clear corresponding RTSR bit */
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000924:	4b41      	ldr	r3, [pc, #260]	; (8000a2c <GPIO_Init+0x18c>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	7912      	ldrb	r2, [r2, #4]
 800092c:	4611      	mov	r1, r2
 800092e:	2201      	movs	r2, #1
 8000930:	408a      	lsls	r2, r1
 8000932:	43d2      	mvns	r2, r2
 8000934:	4611      	mov	r1, r2
 8000936:	4a3d      	ldr	r2, [pc, #244]	; (8000a2c <GPIO_Init+0x18c>)
 8000938:	400b      	ands	r3, r1
 800093a:	6093      	str	r3, [r2, #8]
 800093c:	e035      	b.n	80009aa <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	795b      	ldrb	r3, [r3, #5]
 8000942:	2b05      	cmp	r3, #5
 8000944:	d117      	bne.n	8000976 <GPIO_Init+0xd6>
		{
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000946:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <GPIO_Init+0x18c>)
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	7912      	ldrb	r2, [r2, #4]
 800094e:	4611      	mov	r1, r2
 8000950:	2201      	movs	r2, #1
 8000952:	408a      	lsls	r2, r1
 8000954:	4611      	mov	r1, r2
 8000956:	4a35      	ldr	r2, [pc, #212]	; (8000a2c <GPIO_Init+0x18c>)
 8000958:	430b      	orrs	r3, r1
 800095a:	6093      	str	r3, [r2, #8]
			/* Clear corresponding FTSR bit */
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800095c:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <GPIO_Init+0x18c>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	7912      	ldrb	r2, [r2, #4]
 8000964:	4611      	mov	r1, r2
 8000966:	2201      	movs	r2, #1
 8000968:	408a      	lsls	r2, r1
 800096a:	43d2      	mvns	r2, r2
 800096c:	4611      	mov	r1, r2
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <GPIO_Init+0x18c>)
 8000970:	400b      	ands	r3, r1
 8000972:	60d3      	str	r3, [r2, #12]
 8000974:	e019      	b.n	80009aa <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	795b      	ldrb	r3, [r3, #5]
 800097a:	2b06      	cmp	r3, #6
 800097c:	d115      	bne.n	80009aa <GPIO_Init+0x10a>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <GPIO_Init+0x18c>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	7912      	ldrb	r2, [r2, #4]
 8000986:	4611      	mov	r1, r2
 8000988:	2201      	movs	r2, #1
 800098a:	408a      	lsls	r2, r1
 800098c:	4611      	mov	r1, r2
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <GPIO_Init+0x18c>)
 8000990:	430b      	orrs	r3, r1
 8000992:	60d3      	str	r3, [r2, #12]
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <GPIO_Init+0x18c>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	7912      	ldrb	r2, [r2, #4]
 800099c:	4611      	mov	r1, r2
 800099e:	2201      	movs	r2, #1
 80009a0:	408a      	lsls	r2, r1
 80009a2:	4611      	mov	r1, r2
 80009a4:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <GPIO_Init+0x18c>)
 80009a6:	430b      	orrs	r3, r1
 80009a8:	6093      	str	r3, [r2, #8]
		}

		/* Configure GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	791b      	ldrb	r3, [r3, #4]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <GPIO_Init+0x190>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d044      	beq.n	8000a50 <GPIO_Init+0x1b0>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <GPIO_Init+0x194>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d02b      	beq.n	8000a28 <GPIO_Init+0x188>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <GPIO_Init+0x198>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d024      	beq.n	8000a24 <GPIO_Init+0x184>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <GPIO_Init+0x19c>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d01d      	beq.n	8000a20 <GPIO_Init+0x180>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <GPIO_Init+0x1a0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d016      	beq.n	8000a1c <GPIO_Init+0x17c>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <GPIO_Init+0x1a4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d00f      	beq.n	8000a18 <GPIO_Init+0x178>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <GPIO_Init+0x1a8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d008      	beq.n	8000a14 <GPIO_Init+0x174>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <GPIO_Init+0x1ac>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d101      	bne.n	8000a10 <GPIO_Init+0x170>
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	e020      	b.n	8000a52 <GPIO_Init+0x1b2>
 8000a10:	2300      	movs	r3, #0
 8000a12:	e01e      	b.n	8000a52 <GPIO_Init+0x1b2>
 8000a14:	2306      	movs	r3, #6
 8000a16:	e01c      	b.n	8000a52 <GPIO_Init+0x1b2>
 8000a18:	2305      	movs	r3, #5
 8000a1a:	e01a      	b.n	8000a52 <GPIO_Init+0x1b2>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	e018      	b.n	8000a52 <GPIO_Init+0x1b2>
 8000a20:	2303      	movs	r3, #3
 8000a22:	e016      	b.n	8000a52 <GPIO_Init+0x1b2>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e014      	b.n	8000a52 <GPIO_Init+0x1b2>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e012      	b.n	8000a52 <GPIO_Init+0x1b2>
 8000a2c:	40013c00 	.word	0x40013c00
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40021400 	.word	0x40021400
 8000a48:	40021800 	.word	0x40021800
 8000a4c:	40021c00 	.word	0x40021c00
 8000a50:	2300      	movs	r3, #0
 8000a52:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a54:	4b5c      	ldr	r3, [pc, #368]	; (8000bc8 <GPIO_Init+0x328>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a58:	4a5b      	ldr	r2, [pc, #364]	; (8000bc8 <GPIO_Init+0x328>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000a60:	7c7a      	ldrb	r2, [r7, #17]
 8000a62:	7cbb      	ldrb	r3, [r7, #18]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	fa02 f103 	lsl.w	r1, r2, r3
 8000a6a:	4a58      	ldr	r2, [pc, #352]	; (8000bcc <GPIO_Init+0x32c>)
 8000a6c:	7cfb      	ldrb	r3, [r7, #19]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/* Enable EXTI interrupt delivery using IMR */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a74:	4b56      	ldr	r3, [pc, #344]	; (8000bd0 <GPIO_Init+0x330>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	7912      	ldrb	r2, [r2, #4]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	2201      	movs	r2, #1
 8000a80:	408a      	lsls	r2, r1
 8000a82:	4611      	mov	r1, r2
 8000a84:	4a52      	ldr	r2, [pc, #328]	; (8000bd0 <GPIO_Init+0x330>)
 8000a86:	430b      	orrs	r3, r1
 8000a88:	6013      	str	r3, [r2, #0]
	}

	/* GPIO pin speed configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	799b      	ldrb	r3, [r3, #6]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	791b      	ldrb	r3, [r3, #4]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6899      	ldr	r1, [r3, #8]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

	/* GPIO pull up/down settings configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	79db      	ldrb	r3, [r3, #7]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2103      	movs	r1, #3
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	400a      	ands	r2, r1
 8000afc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68d9      	ldr	r1, [r3, #12]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]

	/* GPIO output type configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7a1b      	ldrb	r3, [r3, #8]
 8000b16:	461a      	mov	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	791b      	ldrb	r3, [r3, #4]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2301      	movs	r3, #1
 8000b30:	408b      	lsls	r3, r1
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4619      	mov	r1, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6859      	ldr	r1, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]

	/* GPIO alt functionality configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	795b      	ldrb	r3, [r3, #5]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d131      	bne.n	8000bbe <GPIO_Init+0x31e>
	{
		/* Alt functionality registers configuration */
		uint8_t afrBitNum, afrLowHighReg;

		afrLowHighReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	743b      	strb	r3, [r7, #16]
		afrBitNum = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] &= ~(0xF << (4 * afrBitNum));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	7c3a      	ldrb	r2, [r7, #16]
 8000b72:	3208      	adds	r2, #8
 8000b74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	7c3a      	ldrb	r2, [r7, #16]
 8000b8c:	4001      	ands	r1, r0
 8000b8e:	3208      	adds	r2, #8
 8000b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * afrBitNum);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	7c3a      	ldrb	r2, [r7, #16]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7a5b      	ldrb	r3, [r3, #9]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	7c3a      	ldrb	r2, [r7, #16]
 8000bb6:	4301      	orrs	r1, r0
 8000bb8:	3208      	adds	r2, #8
 8000bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	40013c00 	.word	0x40013c00

08000bd4 <GPIO_ReadFromInputPin>:
 *
 * @Note			- 0 or 1
 *
 *****************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t )((pGPIOx->IDR >> PinNumber) & 0x00000001 );
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	691a      	ldr	r2, [r3, #16]
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]

	return value;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
	...

08000c00 <SPI_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d12b      	bne.n	8000c6a <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a2d      	ldr	r2, [pc, #180]	; (8000ccc <SPI_PeriClockControl+0xcc>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d106      	bne.n	8000c28 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a2c      	ldr	r2, [pc, #176]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 8000c26:	e04b      	b.n	8000cc0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <SPI_PeriClockControl+0xd4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d106      	bne.n	8000c3e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c3c:	e040      	b.n	8000cc0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <SPI_PeriClockControl+0xd8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d106      	bne.n	8000c54 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c52:	e035      	b.n	8000cc0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a21      	ldr	r2, [pc, #132]	; (8000cdc <SPI_PeriClockControl+0xdc>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d131      	bne.n	8000cc0 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c66:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c68:	e02a      	b.n	8000cc0 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <SPI_PeriClockControl+0xcc>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d106      	bne.n	8000c80 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c7e:	e01f      	b.n	8000cc0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <SPI_PeriClockControl+0xd4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d106      	bne.n	8000c96 <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c94:	e014      	b.n	8000cc0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <SPI_PeriClockControl+0xd8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d106      	bne.n	8000cac <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000caa:	e009      	b.n	8000cc0 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <SPI_PeriClockControl+0xdc>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d105      	bne.n	8000cc0 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb8:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <SPI_PeriClockControl+0xd0>)
 8000cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cbe:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40003800 	.word	0x40003800
 8000cd8:	40003c00 	.word	0x40003c00
 8000cdc:	40013400 	.word	0x40013400

08000ce0 <SPI_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	/* SPI_CR1 register configuration */
	uint32_t tempreg = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]

	/* Enable peripheral clock */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff84 	bl	8000c00 <SPI_PeriClockControl>

	/* Device mode configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	791b      	ldrb	r3, [r3, #4]
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]

	/* Bus configuration */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	795b      	ldrb	r3, [r3, #5]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d104      	bne.n	8000d18 <SPI_Init+0x38>
	{
		/* Bidirectional mode clear */
		tempreg &= ~(1 << 15);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e014      	b.n	8000d42 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	795b      	ldrb	r3, [r3, #5]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d104      	bne.n	8000d2a <SPI_Init+0x4a>
	{
		/* Bidirectional mode set */
		tempreg |= (1 << 15);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	e00b      	b.n	8000d42 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	795b      	ldrb	r3, [r3, #5]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d107      	bne.n	8000d42 <SPI_Init+0x62>
	{
		/* Bidirectional mode clear */
		tempreg &= ~(1 << 15);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d38:	60fb      	str	r3, [r7, #12]

		/* Rx only mode set */
		tempreg &= ~(1 << 10);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d40:	60fb      	str	r3, [r7, #12]
	}

	/* SPI serial clock speed (baud rate) configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	799b      	ldrb	r3, [r3, #6]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

	/* DFF configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	79db      	ldrb	r3, [r3, #7]
 8000d54:	02db      	lsls	r3, r3, #11
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]

	/* CPOL configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7a1b      	ldrb	r3, [r3, #8]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	461a      	mov	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]

	/* CPHA configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7a5b      	ldrb	r3, [r3, #9]
 8000d70:	461a      	mov	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]

	/* Save temperg in CR1 register */
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	601a      	str	r2, [r3, #0]

}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SPI_GetFlagStatus>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <SPI_SendData>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Length)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
	while(Length > 0)
 8000dba:	e029      	b.n	8000e10 <SPI_SendData+0x62>
	{
		/* Wait until TXE is set */
		while(SPI_GetFlagStatus(pSPIx->SR, SPI_TXE_FLAG) == FLAG_RESET);
 8000dbc:	bf00      	nop
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffdf 	bl	8000d88 <SPI_GetFlagStatus>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f6      	beq.n	8000dbe <SPI_SendData+0x10>

		if( pSPIx->CR1 & (1 << SPI_CR1_DFF) )
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00e      	beq.n	8000dfa <SPI_SendData+0x4c>
		{
			/* Load data into data register */
			/* 16 bit */
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	60da      	str	r2, [r3, #12]
			Length--;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
			Length--;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	e00a      	b.n	8000e10 <SPI_SendData+0x62>
		}
		else
		{
			/* 8 bit */
			pSPIx->DR = *pTxBuffer;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	60da      	str	r2, [r3, #12]
			Length--;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
	while(Length > 0)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1d2      	bne.n	8000dbc <SPI_SendData+0xe>
		}
	}
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <SPI_ReceiveData>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Length)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
	while(Length > 0)
 8000e2a:	e029      	b.n	8000e80 <SPI_ReceiveData+0x62>
	{
		/* Wait until RXNE is set */
		while(SPI_GetFlagStatus(pSPIx->SR, SPI_RXNE_FLAG) == FLAG_RESET);
 8000e2c:	bf00      	nop
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2101      	movs	r1, #1
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ffa7 	bl	8000d88 <SPI_GetFlagStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f6      	beq.n	8000e2e <SPI_ReceiveData+0x10>

		if( pSPIx->CR1 & (1 << SPI_CR1_DFF) )
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00e      	beq.n	8000e6a <SPI_ReceiveData+0x4c>
		{
			/* Load data from DR to RxBuffer */
			/* 16 bit */
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	801a      	strh	r2, [r3, #0]
			Length--;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
			Length--;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3301      	adds	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	e00a      	b.n	8000e80 <SPI_ReceiveData+0x62>
		}
		else
		{
			/* 8 bit */
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	801a      	strh	r2, [r3, #0]
			Length--;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
	while(Length > 0)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1d2      	bne.n	8000e2c <SPI_ReceiveData+0xe>
		}
	}
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <SPI_PeripheralControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d106      	bne.n	8000eae <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000eac:	e005      	b.n	8000eba <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <SPI_SSOEConfig>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d106      	bne.n	8000ee4 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f043 0204 	orr.w	r2, r3, #4
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000ee2:	e005      	b.n	8000ef0 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f023 0204 	bic.w	r2, r3, #4
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	605a      	str	r2, [r3, #4]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
	...

08000efc <__errno>:
 8000efc:	4b01      	ldr	r3, [pc, #4]	; (8000f04 <__errno+0x8>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000

08000f08 <__libc_init_array>:
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	4e0d      	ldr	r6, [pc, #52]	; (8000f40 <__libc_init_array+0x38>)
 8000f0c:	4c0d      	ldr	r4, [pc, #52]	; (8000f44 <__libc_init_array+0x3c>)
 8000f0e:	1ba4      	subs	r4, r4, r6
 8000f10:	10a4      	asrs	r4, r4, #2
 8000f12:	2500      	movs	r5, #0
 8000f14:	42a5      	cmp	r5, r4
 8000f16:	d109      	bne.n	8000f2c <__libc_init_array+0x24>
 8000f18:	4e0b      	ldr	r6, [pc, #44]	; (8000f48 <__libc_init_array+0x40>)
 8000f1a:	4c0c      	ldr	r4, [pc, #48]	; (8000f4c <__libc_init_array+0x44>)
 8000f1c:	f000 ff66 	bl	8001dec <_init>
 8000f20:	1ba4      	subs	r4, r4, r6
 8000f22:	10a4      	asrs	r4, r4, #2
 8000f24:	2500      	movs	r5, #0
 8000f26:	42a5      	cmp	r5, r4
 8000f28:	d105      	bne.n	8000f36 <__libc_init_array+0x2e>
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f30:	4798      	blx	r3
 8000f32:	3501      	adds	r5, #1
 8000f34:	e7ee      	b.n	8000f14 <__libc_init_array+0xc>
 8000f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f3a:	4798      	blx	r3
 8000f3c:	3501      	adds	r5, #1
 8000f3e:	e7f2      	b.n	8000f26 <__libc_init_array+0x1e>
 8000f40:	08001f24 	.word	0x08001f24
 8000f44:	08001f24 	.word	0x08001f24
 8000f48:	08001f24 	.word	0x08001f24
 8000f4c:	08001f28 	.word	0x08001f28

08000f50 <memset>:
 8000f50:	4402      	add	r2, r0
 8000f52:	4603      	mov	r3, r0
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d100      	bne.n	8000f5a <memset+0xa>
 8000f58:	4770      	bx	lr
 8000f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8000f5e:	e7f9      	b.n	8000f54 <memset+0x4>

08000f60 <iprintf>:
 8000f60:	b40f      	push	{r0, r1, r2, r3}
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <iprintf+0x2c>)
 8000f64:	b513      	push	{r0, r1, r4, lr}
 8000f66:	681c      	ldr	r4, [r3, #0]
 8000f68:	b124      	cbz	r4, 8000f74 <iprintf+0x14>
 8000f6a:	69a3      	ldr	r3, [r4, #24]
 8000f6c:	b913      	cbnz	r3, 8000f74 <iprintf+0x14>
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f000 fa22 	bl	80013b8 <__sinit>
 8000f74:	ab05      	add	r3, sp, #20
 8000f76:	9a04      	ldr	r2, [sp, #16]
 8000f78:	68a1      	ldr	r1, [r4, #8]
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f000 fbd9 	bl	8001734 <_vfiprintf_r>
 8000f82:	b002      	add	sp, #8
 8000f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f88:	b004      	add	sp, #16
 8000f8a:	4770      	bx	lr
 8000f8c:	20000000 	.word	0x20000000

08000f90 <_puts_r>:
 8000f90:	b570      	push	{r4, r5, r6, lr}
 8000f92:	460e      	mov	r6, r1
 8000f94:	4605      	mov	r5, r0
 8000f96:	b118      	cbz	r0, 8000fa0 <_puts_r+0x10>
 8000f98:	6983      	ldr	r3, [r0, #24]
 8000f9a:	b90b      	cbnz	r3, 8000fa0 <_puts_r+0x10>
 8000f9c:	f000 fa0c 	bl	80013b8 <__sinit>
 8000fa0:	69ab      	ldr	r3, [r5, #24]
 8000fa2:	68ac      	ldr	r4, [r5, #8]
 8000fa4:	b913      	cbnz	r3, 8000fac <_puts_r+0x1c>
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f000 fa06 	bl	80013b8 <__sinit>
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <_puts_r+0xac>)
 8000fae:	429c      	cmp	r4, r3
 8000fb0:	d117      	bne.n	8000fe2 <_puts_r+0x52>
 8000fb2:	686c      	ldr	r4, [r5, #4]
 8000fb4:	89a3      	ldrh	r3, [r4, #12]
 8000fb6:	071b      	lsls	r3, r3, #28
 8000fb8:	d51d      	bpl.n	8000ff6 <_puts_r+0x66>
 8000fba:	6923      	ldr	r3, [r4, #16]
 8000fbc:	b1db      	cbz	r3, 8000ff6 <_puts_r+0x66>
 8000fbe:	3e01      	subs	r6, #1
 8000fc0:	68a3      	ldr	r3, [r4, #8]
 8000fc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	60a3      	str	r3, [r4, #8]
 8000fca:	b9e9      	cbnz	r1, 8001008 <_puts_r+0x78>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	da2e      	bge.n	800102e <_puts_r+0x9e>
 8000fd0:	4622      	mov	r2, r4
 8000fd2:	210a      	movs	r1, #10
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f000 f83f 	bl	8001058 <__swbuf_r>
 8000fda:	3001      	adds	r0, #1
 8000fdc:	d011      	beq.n	8001002 <_puts_r+0x72>
 8000fde:	200a      	movs	r0, #10
 8000fe0:	e011      	b.n	8001006 <_puts_r+0x76>
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <_puts_r+0xb0>)
 8000fe4:	429c      	cmp	r4, r3
 8000fe6:	d101      	bne.n	8000fec <_puts_r+0x5c>
 8000fe8:	68ac      	ldr	r4, [r5, #8]
 8000fea:	e7e3      	b.n	8000fb4 <_puts_r+0x24>
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_puts_r+0xb4>)
 8000fee:	429c      	cmp	r4, r3
 8000ff0:	bf08      	it	eq
 8000ff2:	68ec      	ldreq	r4, [r5, #12]
 8000ff4:	e7de      	b.n	8000fb4 <_puts_r+0x24>
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f000 f87f 	bl	80010fc <__swsetup_r>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d0dd      	beq.n	8000fbe <_puts_r+0x2e>
 8001002:	f04f 30ff 	mov.w	r0, #4294967295
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 8001008:	2b00      	cmp	r3, #0
 800100a:	da04      	bge.n	8001016 <_puts_r+0x86>
 800100c:	69a2      	ldr	r2, [r4, #24]
 800100e:	429a      	cmp	r2, r3
 8001010:	dc06      	bgt.n	8001020 <_puts_r+0x90>
 8001012:	290a      	cmp	r1, #10
 8001014:	d004      	beq.n	8001020 <_puts_r+0x90>
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	6022      	str	r2, [r4, #0]
 800101c:	7019      	strb	r1, [r3, #0]
 800101e:	e7cf      	b.n	8000fc0 <_puts_r+0x30>
 8001020:	4622      	mov	r2, r4
 8001022:	4628      	mov	r0, r5
 8001024:	f000 f818 	bl	8001058 <__swbuf_r>
 8001028:	3001      	adds	r0, #1
 800102a:	d1c9      	bne.n	8000fc0 <_puts_r+0x30>
 800102c:	e7e9      	b.n	8001002 <_puts_r+0x72>
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	200a      	movs	r0, #10
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	6022      	str	r2, [r4, #0]
 8001036:	7018      	strb	r0, [r3, #0]
 8001038:	e7e5      	b.n	8001006 <_puts_r+0x76>
 800103a:	bf00      	nop
 800103c:	08001eb0 	.word	0x08001eb0
 8001040:	08001ed0 	.word	0x08001ed0
 8001044:	08001e90 	.word	0x08001e90

08001048 <puts>:
 8001048:	4b02      	ldr	r3, [pc, #8]	; (8001054 <puts+0xc>)
 800104a:	4601      	mov	r1, r0
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	f7ff bf9f 	b.w	8000f90 <_puts_r>
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <__swbuf_r>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	460e      	mov	r6, r1
 800105c:	4614      	mov	r4, r2
 800105e:	4605      	mov	r5, r0
 8001060:	b118      	cbz	r0, 800106a <__swbuf_r+0x12>
 8001062:	6983      	ldr	r3, [r0, #24]
 8001064:	b90b      	cbnz	r3, 800106a <__swbuf_r+0x12>
 8001066:	f000 f9a7 	bl	80013b8 <__sinit>
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <__swbuf_r+0x98>)
 800106c:	429c      	cmp	r4, r3
 800106e:	d12a      	bne.n	80010c6 <__swbuf_r+0x6e>
 8001070:	686c      	ldr	r4, [r5, #4]
 8001072:	69a3      	ldr	r3, [r4, #24]
 8001074:	60a3      	str	r3, [r4, #8]
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	071a      	lsls	r2, r3, #28
 800107a:	d52e      	bpl.n	80010da <__swbuf_r+0x82>
 800107c:	6923      	ldr	r3, [r4, #16]
 800107e:	b363      	cbz	r3, 80010da <__swbuf_r+0x82>
 8001080:	6923      	ldr	r3, [r4, #16]
 8001082:	6820      	ldr	r0, [r4, #0]
 8001084:	1ac0      	subs	r0, r0, r3
 8001086:	6963      	ldr	r3, [r4, #20]
 8001088:	b2f6      	uxtb	r6, r6
 800108a:	4283      	cmp	r3, r0
 800108c:	4637      	mov	r7, r6
 800108e:	dc04      	bgt.n	800109a <__swbuf_r+0x42>
 8001090:	4621      	mov	r1, r4
 8001092:	4628      	mov	r0, r5
 8001094:	f000 f926 	bl	80012e4 <_fflush_r>
 8001098:	bb28      	cbnz	r0, 80010e6 <__swbuf_r+0x8e>
 800109a:	68a3      	ldr	r3, [r4, #8]
 800109c:	3b01      	subs	r3, #1
 800109e:	60a3      	str	r3, [r4, #8]
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	6022      	str	r2, [r4, #0]
 80010a6:	701e      	strb	r6, [r3, #0]
 80010a8:	6963      	ldr	r3, [r4, #20]
 80010aa:	3001      	adds	r0, #1
 80010ac:	4283      	cmp	r3, r0
 80010ae:	d004      	beq.n	80010ba <__swbuf_r+0x62>
 80010b0:	89a3      	ldrh	r3, [r4, #12]
 80010b2:	07db      	lsls	r3, r3, #31
 80010b4:	d519      	bpl.n	80010ea <__swbuf_r+0x92>
 80010b6:	2e0a      	cmp	r6, #10
 80010b8:	d117      	bne.n	80010ea <__swbuf_r+0x92>
 80010ba:	4621      	mov	r1, r4
 80010bc:	4628      	mov	r0, r5
 80010be:	f000 f911 	bl	80012e4 <_fflush_r>
 80010c2:	b190      	cbz	r0, 80010ea <__swbuf_r+0x92>
 80010c4:	e00f      	b.n	80010e6 <__swbuf_r+0x8e>
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <__swbuf_r+0x9c>)
 80010c8:	429c      	cmp	r4, r3
 80010ca:	d101      	bne.n	80010d0 <__swbuf_r+0x78>
 80010cc:	68ac      	ldr	r4, [r5, #8]
 80010ce:	e7d0      	b.n	8001072 <__swbuf_r+0x1a>
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <__swbuf_r+0xa0>)
 80010d2:	429c      	cmp	r4, r3
 80010d4:	bf08      	it	eq
 80010d6:	68ec      	ldreq	r4, [r5, #12]
 80010d8:	e7cb      	b.n	8001072 <__swbuf_r+0x1a>
 80010da:	4621      	mov	r1, r4
 80010dc:	4628      	mov	r0, r5
 80010de:	f000 f80d 	bl	80010fc <__swsetup_r>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d0cc      	beq.n	8001080 <__swbuf_r+0x28>
 80010e6:	f04f 37ff 	mov.w	r7, #4294967295
 80010ea:	4638      	mov	r0, r7
 80010ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08001eb0 	.word	0x08001eb0
 80010f4:	08001ed0 	.word	0x08001ed0
 80010f8:	08001e90 	.word	0x08001e90

080010fc <__swsetup_r>:
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <__swsetup_r+0xcc>)
 80010fe:	b570      	push	{r4, r5, r6, lr}
 8001100:	681d      	ldr	r5, [r3, #0]
 8001102:	4606      	mov	r6, r0
 8001104:	460c      	mov	r4, r1
 8001106:	b125      	cbz	r5, 8001112 <__swsetup_r+0x16>
 8001108:	69ab      	ldr	r3, [r5, #24]
 800110a:	b913      	cbnz	r3, 8001112 <__swsetup_r+0x16>
 800110c:	4628      	mov	r0, r5
 800110e:	f000 f953 	bl	80013b8 <__sinit>
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <__swsetup_r+0xd0>)
 8001114:	429c      	cmp	r4, r3
 8001116:	d10f      	bne.n	8001138 <__swsetup_r+0x3c>
 8001118:	686c      	ldr	r4, [r5, #4]
 800111a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800111e:	b29a      	uxth	r2, r3
 8001120:	0715      	lsls	r5, r2, #28
 8001122:	d42c      	bmi.n	800117e <__swsetup_r+0x82>
 8001124:	06d0      	lsls	r0, r2, #27
 8001126:	d411      	bmi.n	800114c <__swsetup_r+0x50>
 8001128:	2209      	movs	r2, #9
 800112a:	6032      	str	r2, [r6, #0]
 800112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001130:	81a3      	strh	r3, [r4, #12]
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	e03e      	b.n	80011b6 <__swsetup_r+0xba>
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <__swsetup_r+0xd4>)
 800113a:	429c      	cmp	r4, r3
 800113c:	d101      	bne.n	8001142 <__swsetup_r+0x46>
 800113e:	68ac      	ldr	r4, [r5, #8]
 8001140:	e7eb      	b.n	800111a <__swsetup_r+0x1e>
 8001142:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <__swsetup_r+0xd8>)
 8001144:	429c      	cmp	r4, r3
 8001146:	bf08      	it	eq
 8001148:	68ec      	ldreq	r4, [r5, #12]
 800114a:	e7e6      	b.n	800111a <__swsetup_r+0x1e>
 800114c:	0751      	lsls	r1, r2, #29
 800114e:	d512      	bpl.n	8001176 <__swsetup_r+0x7a>
 8001150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001152:	b141      	cbz	r1, 8001166 <__swsetup_r+0x6a>
 8001154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001158:	4299      	cmp	r1, r3
 800115a:	d002      	beq.n	8001162 <__swsetup_r+0x66>
 800115c:	4630      	mov	r0, r6
 800115e:	f000 fa19 	bl	8001594 <_free_r>
 8001162:	2300      	movs	r3, #0
 8001164:	6363      	str	r3, [r4, #52]	; 0x34
 8001166:	89a3      	ldrh	r3, [r4, #12]
 8001168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800116c:	81a3      	strh	r3, [r4, #12]
 800116e:	2300      	movs	r3, #0
 8001170:	6063      	str	r3, [r4, #4]
 8001172:	6923      	ldr	r3, [r4, #16]
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	81a3      	strh	r3, [r4, #12]
 800117e:	6923      	ldr	r3, [r4, #16]
 8001180:	b94b      	cbnz	r3, 8001196 <__swsetup_r+0x9a>
 8001182:	89a3      	ldrh	r3, [r4, #12]
 8001184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118c:	d003      	beq.n	8001196 <__swsetup_r+0x9a>
 800118e:	4621      	mov	r1, r4
 8001190:	4630      	mov	r0, r6
 8001192:	f000 f9bf 	bl	8001514 <__smakebuf_r>
 8001196:	89a2      	ldrh	r2, [r4, #12]
 8001198:	f012 0301 	ands.w	r3, r2, #1
 800119c:	d00c      	beq.n	80011b8 <__swsetup_r+0xbc>
 800119e:	2300      	movs	r3, #0
 80011a0:	60a3      	str	r3, [r4, #8]
 80011a2:	6963      	ldr	r3, [r4, #20]
 80011a4:	425b      	negs	r3, r3
 80011a6:	61a3      	str	r3, [r4, #24]
 80011a8:	6923      	ldr	r3, [r4, #16]
 80011aa:	b953      	cbnz	r3, 80011c2 <__swsetup_r+0xc6>
 80011ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80011b4:	d1ba      	bne.n	800112c <__swsetup_r+0x30>
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
 80011b8:	0792      	lsls	r2, r2, #30
 80011ba:	bf58      	it	pl
 80011bc:	6963      	ldrpl	r3, [r4, #20]
 80011be:	60a3      	str	r3, [r4, #8]
 80011c0:	e7f2      	b.n	80011a8 <__swsetup_r+0xac>
 80011c2:	2000      	movs	r0, #0
 80011c4:	e7f7      	b.n	80011b6 <__swsetup_r+0xba>
 80011c6:	bf00      	nop
 80011c8:	20000000 	.word	0x20000000
 80011cc:	08001eb0 	.word	0x08001eb0
 80011d0:	08001ed0 	.word	0x08001ed0
 80011d4:	08001e90 	.word	0x08001e90

080011d8 <__sflush_r>:
 80011d8:	898a      	ldrh	r2, [r1, #12]
 80011da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011de:	4605      	mov	r5, r0
 80011e0:	0710      	lsls	r0, r2, #28
 80011e2:	460c      	mov	r4, r1
 80011e4:	d458      	bmi.n	8001298 <__sflush_r+0xc0>
 80011e6:	684b      	ldr	r3, [r1, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	dc05      	bgt.n	80011f8 <__sflush_r+0x20>
 80011ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dc02      	bgt.n	80011f8 <__sflush_r+0x20>
 80011f2:	2000      	movs	r0, #0
 80011f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d0f9      	beq.n	80011f2 <__sflush_r+0x1a>
 80011fe:	2300      	movs	r3, #0
 8001200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001204:	682f      	ldr	r7, [r5, #0]
 8001206:	6a21      	ldr	r1, [r4, #32]
 8001208:	602b      	str	r3, [r5, #0]
 800120a:	d032      	beq.n	8001272 <__sflush_r+0x9a>
 800120c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800120e:	89a3      	ldrh	r3, [r4, #12]
 8001210:	075a      	lsls	r2, r3, #29
 8001212:	d505      	bpl.n	8001220 <__sflush_r+0x48>
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	1ac0      	subs	r0, r0, r3
 8001218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800121a:	b10b      	cbz	r3, 8001220 <__sflush_r+0x48>
 800121c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800121e:	1ac0      	subs	r0, r0, r3
 8001220:	2300      	movs	r3, #0
 8001222:	4602      	mov	r2, r0
 8001224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001226:	6a21      	ldr	r1, [r4, #32]
 8001228:	4628      	mov	r0, r5
 800122a:	47b0      	blx	r6
 800122c:	1c43      	adds	r3, r0, #1
 800122e:	89a3      	ldrh	r3, [r4, #12]
 8001230:	d106      	bne.n	8001240 <__sflush_r+0x68>
 8001232:	6829      	ldr	r1, [r5, #0]
 8001234:	291d      	cmp	r1, #29
 8001236:	d848      	bhi.n	80012ca <__sflush_r+0xf2>
 8001238:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <__sflush_r+0x108>)
 800123a:	40ca      	lsrs	r2, r1
 800123c:	07d6      	lsls	r6, r2, #31
 800123e:	d544      	bpl.n	80012ca <__sflush_r+0xf2>
 8001240:	2200      	movs	r2, #0
 8001242:	6062      	str	r2, [r4, #4]
 8001244:	04d9      	lsls	r1, r3, #19
 8001246:	6922      	ldr	r2, [r4, #16]
 8001248:	6022      	str	r2, [r4, #0]
 800124a:	d504      	bpl.n	8001256 <__sflush_r+0x7e>
 800124c:	1c42      	adds	r2, r0, #1
 800124e:	d101      	bne.n	8001254 <__sflush_r+0x7c>
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	b903      	cbnz	r3, 8001256 <__sflush_r+0x7e>
 8001254:	6560      	str	r0, [r4, #84]	; 0x54
 8001256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001258:	602f      	str	r7, [r5, #0]
 800125a:	2900      	cmp	r1, #0
 800125c:	d0c9      	beq.n	80011f2 <__sflush_r+0x1a>
 800125e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001262:	4299      	cmp	r1, r3
 8001264:	d002      	beq.n	800126c <__sflush_r+0x94>
 8001266:	4628      	mov	r0, r5
 8001268:	f000 f994 	bl	8001594 <_free_r>
 800126c:	2000      	movs	r0, #0
 800126e:	6360      	str	r0, [r4, #52]	; 0x34
 8001270:	e7c0      	b.n	80011f4 <__sflush_r+0x1c>
 8001272:	2301      	movs	r3, #1
 8001274:	4628      	mov	r0, r5
 8001276:	47b0      	blx	r6
 8001278:	1c41      	adds	r1, r0, #1
 800127a:	d1c8      	bne.n	800120e <__sflush_r+0x36>
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0c5      	beq.n	800120e <__sflush_r+0x36>
 8001282:	2b1d      	cmp	r3, #29
 8001284:	d001      	beq.n	800128a <__sflush_r+0xb2>
 8001286:	2b16      	cmp	r3, #22
 8001288:	d101      	bne.n	800128e <__sflush_r+0xb6>
 800128a:	602f      	str	r7, [r5, #0]
 800128c:	e7b1      	b.n	80011f2 <__sflush_r+0x1a>
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001294:	81a3      	strh	r3, [r4, #12]
 8001296:	e7ad      	b.n	80011f4 <__sflush_r+0x1c>
 8001298:	690f      	ldr	r7, [r1, #16]
 800129a:	2f00      	cmp	r7, #0
 800129c:	d0a9      	beq.n	80011f2 <__sflush_r+0x1a>
 800129e:	0793      	lsls	r3, r2, #30
 80012a0:	680e      	ldr	r6, [r1, #0]
 80012a2:	bf08      	it	eq
 80012a4:	694b      	ldreq	r3, [r1, #20]
 80012a6:	600f      	str	r7, [r1, #0]
 80012a8:	bf18      	it	ne
 80012aa:	2300      	movne	r3, #0
 80012ac:	eba6 0807 	sub.w	r8, r6, r7
 80012b0:	608b      	str	r3, [r1, #8]
 80012b2:	f1b8 0f00 	cmp.w	r8, #0
 80012b6:	dd9c      	ble.n	80011f2 <__sflush_r+0x1a>
 80012b8:	4643      	mov	r3, r8
 80012ba:	463a      	mov	r2, r7
 80012bc:	6a21      	ldr	r1, [r4, #32]
 80012be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80012c0:	4628      	mov	r0, r5
 80012c2:	47b0      	blx	r6
 80012c4:	2800      	cmp	r0, #0
 80012c6:	dc06      	bgt.n	80012d6 <__sflush_r+0xfe>
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ce:	81a3      	strh	r3, [r4, #12]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	e78e      	b.n	80011f4 <__sflush_r+0x1c>
 80012d6:	4407      	add	r7, r0
 80012d8:	eba8 0800 	sub.w	r8, r8, r0
 80012dc:	e7e9      	b.n	80012b2 <__sflush_r+0xda>
 80012de:	bf00      	nop
 80012e0:	20400001 	.word	0x20400001

080012e4 <_fflush_r>:
 80012e4:	b538      	push	{r3, r4, r5, lr}
 80012e6:	690b      	ldr	r3, [r1, #16]
 80012e8:	4605      	mov	r5, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	b1db      	cbz	r3, 8001326 <_fflush_r+0x42>
 80012ee:	b118      	cbz	r0, 80012f8 <_fflush_r+0x14>
 80012f0:	6983      	ldr	r3, [r0, #24]
 80012f2:	b90b      	cbnz	r3, 80012f8 <_fflush_r+0x14>
 80012f4:	f000 f860 	bl	80013b8 <__sinit>
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <_fflush_r+0x48>)
 80012fa:	429c      	cmp	r4, r3
 80012fc:	d109      	bne.n	8001312 <_fflush_r+0x2e>
 80012fe:	686c      	ldr	r4, [r5, #4]
 8001300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001304:	b17b      	cbz	r3, 8001326 <_fflush_r+0x42>
 8001306:	4621      	mov	r1, r4
 8001308:	4628      	mov	r0, r5
 800130a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800130e:	f7ff bf63 	b.w	80011d8 <__sflush_r>
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <_fflush_r+0x4c>)
 8001314:	429c      	cmp	r4, r3
 8001316:	d101      	bne.n	800131c <_fflush_r+0x38>
 8001318:	68ac      	ldr	r4, [r5, #8]
 800131a:	e7f1      	b.n	8001300 <_fflush_r+0x1c>
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <_fflush_r+0x50>)
 800131e:	429c      	cmp	r4, r3
 8001320:	bf08      	it	eq
 8001322:	68ec      	ldreq	r4, [r5, #12]
 8001324:	e7ec      	b.n	8001300 <_fflush_r+0x1c>
 8001326:	2000      	movs	r0, #0
 8001328:	bd38      	pop	{r3, r4, r5, pc}
 800132a:	bf00      	nop
 800132c:	08001eb0 	.word	0x08001eb0
 8001330:	08001ed0 	.word	0x08001ed0
 8001334:	08001e90 	.word	0x08001e90

08001338 <std>:
 8001338:	2300      	movs	r3, #0
 800133a:	b510      	push	{r4, lr}
 800133c:	4604      	mov	r4, r0
 800133e:	e9c0 3300 	strd	r3, r3, [r0]
 8001342:	6083      	str	r3, [r0, #8]
 8001344:	8181      	strh	r1, [r0, #12]
 8001346:	6643      	str	r3, [r0, #100]	; 0x64
 8001348:	81c2      	strh	r2, [r0, #14]
 800134a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800134e:	6183      	str	r3, [r0, #24]
 8001350:	4619      	mov	r1, r3
 8001352:	2208      	movs	r2, #8
 8001354:	305c      	adds	r0, #92	; 0x5c
 8001356:	f7ff fdfb 	bl	8000f50 <memset>
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <std+0x38>)
 800135c:	6263      	str	r3, [r4, #36]	; 0x24
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <std+0x3c>)
 8001360:	62a3      	str	r3, [r4, #40]	; 0x28
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <std+0x40>)
 8001364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <std+0x44>)
 8001368:	6224      	str	r4, [r4, #32]
 800136a:	6323      	str	r3, [r4, #48]	; 0x30
 800136c:	bd10      	pop	{r4, pc}
 800136e:	bf00      	nop
 8001370:	08001c91 	.word	0x08001c91
 8001374:	08001cb3 	.word	0x08001cb3
 8001378:	08001ceb 	.word	0x08001ceb
 800137c:	08001d0f 	.word	0x08001d0f

08001380 <_cleanup_r>:
 8001380:	4901      	ldr	r1, [pc, #4]	; (8001388 <_cleanup_r+0x8>)
 8001382:	f000 b885 	b.w	8001490 <_fwalk_reent>
 8001386:	bf00      	nop
 8001388:	080012e5 	.word	0x080012e5

0800138c <__sfmoreglue>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	1e4a      	subs	r2, r1, #1
 8001390:	2568      	movs	r5, #104	; 0x68
 8001392:	4355      	muls	r5, r2
 8001394:	460e      	mov	r6, r1
 8001396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800139a:	f000 f949 	bl	8001630 <_malloc_r>
 800139e:	4604      	mov	r4, r0
 80013a0:	b140      	cbz	r0, 80013b4 <__sfmoreglue+0x28>
 80013a2:	2100      	movs	r1, #0
 80013a4:	e9c0 1600 	strd	r1, r6, [r0]
 80013a8:	300c      	adds	r0, #12
 80013aa:	60a0      	str	r0, [r4, #8]
 80013ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80013b0:	f7ff fdce 	bl	8000f50 <memset>
 80013b4:	4620      	mov	r0, r4
 80013b6:	bd70      	pop	{r4, r5, r6, pc}

080013b8 <__sinit>:
 80013b8:	6983      	ldr	r3, [r0, #24]
 80013ba:	b510      	push	{r4, lr}
 80013bc:	4604      	mov	r4, r0
 80013be:	bb33      	cbnz	r3, 800140e <__sinit+0x56>
 80013c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80013c4:	6503      	str	r3, [r0, #80]	; 0x50
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <__sinit+0x58>)
 80013c8:	4a12      	ldr	r2, [pc, #72]	; (8001414 <__sinit+0x5c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6282      	str	r2, [r0, #40]	; 0x28
 80013ce:	4298      	cmp	r0, r3
 80013d0:	bf04      	itt	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	6183      	streq	r3, [r0, #24]
 80013d6:	f000 f81f 	bl	8001418 <__sfp>
 80013da:	6060      	str	r0, [r4, #4]
 80013dc:	4620      	mov	r0, r4
 80013de:	f000 f81b 	bl	8001418 <__sfp>
 80013e2:	60a0      	str	r0, [r4, #8]
 80013e4:	4620      	mov	r0, r4
 80013e6:	f000 f817 	bl	8001418 <__sfp>
 80013ea:	2200      	movs	r2, #0
 80013ec:	60e0      	str	r0, [r4, #12]
 80013ee:	2104      	movs	r1, #4
 80013f0:	6860      	ldr	r0, [r4, #4]
 80013f2:	f7ff ffa1 	bl	8001338 <std>
 80013f6:	2201      	movs	r2, #1
 80013f8:	2109      	movs	r1, #9
 80013fa:	68a0      	ldr	r0, [r4, #8]
 80013fc:	f7ff ff9c 	bl	8001338 <std>
 8001400:	2202      	movs	r2, #2
 8001402:	2112      	movs	r1, #18
 8001404:	68e0      	ldr	r0, [r4, #12]
 8001406:	f7ff ff97 	bl	8001338 <std>
 800140a:	2301      	movs	r3, #1
 800140c:	61a3      	str	r3, [r4, #24]
 800140e:	bd10      	pop	{r4, pc}
 8001410:	08001e8c 	.word	0x08001e8c
 8001414:	08001381 	.word	0x08001381

08001418 <__sfp>:
 8001418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <__sfp+0x70>)
 800141c:	681e      	ldr	r6, [r3, #0]
 800141e:	69b3      	ldr	r3, [r6, #24]
 8001420:	4607      	mov	r7, r0
 8001422:	b913      	cbnz	r3, 800142a <__sfp+0x12>
 8001424:	4630      	mov	r0, r6
 8001426:	f7ff ffc7 	bl	80013b8 <__sinit>
 800142a:	3648      	adds	r6, #72	; 0x48
 800142c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001430:	3b01      	subs	r3, #1
 8001432:	d503      	bpl.n	800143c <__sfp+0x24>
 8001434:	6833      	ldr	r3, [r6, #0]
 8001436:	b133      	cbz	r3, 8001446 <__sfp+0x2e>
 8001438:	6836      	ldr	r6, [r6, #0]
 800143a:	e7f7      	b.n	800142c <__sfp+0x14>
 800143c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001440:	b16d      	cbz	r5, 800145e <__sfp+0x46>
 8001442:	3468      	adds	r4, #104	; 0x68
 8001444:	e7f4      	b.n	8001430 <__sfp+0x18>
 8001446:	2104      	movs	r1, #4
 8001448:	4638      	mov	r0, r7
 800144a:	f7ff ff9f 	bl	800138c <__sfmoreglue>
 800144e:	6030      	str	r0, [r6, #0]
 8001450:	2800      	cmp	r0, #0
 8001452:	d1f1      	bne.n	8001438 <__sfp+0x20>
 8001454:	230c      	movs	r3, #12
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	4604      	mov	r4, r0
 800145a:	4620      	mov	r0, r4
 800145c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <__sfp+0x74>)
 8001460:	6665      	str	r5, [r4, #100]	; 0x64
 8001462:	e9c4 5500 	strd	r5, r5, [r4]
 8001466:	60a5      	str	r5, [r4, #8]
 8001468:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800146c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001470:	2208      	movs	r2, #8
 8001472:	4629      	mov	r1, r5
 8001474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001478:	f7ff fd6a 	bl	8000f50 <memset>
 800147c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001484:	e7e9      	b.n	800145a <__sfp+0x42>
 8001486:	bf00      	nop
 8001488:	08001e8c 	.word	0x08001e8c
 800148c:	ffff0001 	.word	0xffff0001

08001490 <_fwalk_reent>:
 8001490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001494:	4680      	mov	r8, r0
 8001496:	4689      	mov	r9, r1
 8001498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800149c:	2600      	movs	r6, #0
 800149e:	b914      	cbnz	r4, 80014a6 <_fwalk_reent+0x16>
 80014a0:	4630      	mov	r0, r6
 80014a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80014aa:	3f01      	subs	r7, #1
 80014ac:	d501      	bpl.n	80014b2 <_fwalk_reent+0x22>
 80014ae:	6824      	ldr	r4, [r4, #0]
 80014b0:	e7f5      	b.n	800149e <_fwalk_reent+0xe>
 80014b2:	89ab      	ldrh	r3, [r5, #12]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d907      	bls.n	80014c8 <_fwalk_reent+0x38>
 80014b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014bc:	3301      	adds	r3, #1
 80014be:	d003      	beq.n	80014c8 <_fwalk_reent+0x38>
 80014c0:	4629      	mov	r1, r5
 80014c2:	4640      	mov	r0, r8
 80014c4:	47c8      	blx	r9
 80014c6:	4306      	orrs	r6, r0
 80014c8:	3568      	adds	r5, #104	; 0x68
 80014ca:	e7ee      	b.n	80014aa <_fwalk_reent+0x1a>

080014cc <__swhatbuf_r>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	460e      	mov	r6, r1
 80014d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014d4:	2900      	cmp	r1, #0
 80014d6:	b096      	sub	sp, #88	; 0x58
 80014d8:	4614      	mov	r4, r2
 80014da:	461d      	mov	r5, r3
 80014dc:	da07      	bge.n	80014ee <__swhatbuf_r+0x22>
 80014de:	2300      	movs	r3, #0
 80014e0:	602b      	str	r3, [r5, #0]
 80014e2:	89b3      	ldrh	r3, [r6, #12]
 80014e4:	061a      	lsls	r2, r3, #24
 80014e6:	d410      	bmi.n	800150a <__swhatbuf_r+0x3e>
 80014e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ec:	e00e      	b.n	800150c <__swhatbuf_r+0x40>
 80014ee:	466a      	mov	r2, sp
 80014f0:	f000 fc34 	bl	8001d5c <_fstat_r>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	dbf2      	blt.n	80014de <__swhatbuf_r+0x12>
 80014f8:	9a01      	ldr	r2, [sp, #4]
 80014fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80014fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001502:	425a      	negs	r2, r3
 8001504:	415a      	adcs	r2, r3
 8001506:	602a      	str	r2, [r5, #0]
 8001508:	e7ee      	b.n	80014e8 <__swhatbuf_r+0x1c>
 800150a:	2340      	movs	r3, #64	; 0x40
 800150c:	2000      	movs	r0, #0
 800150e:	6023      	str	r3, [r4, #0]
 8001510:	b016      	add	sp, #88	; 0x58
 8001512:	bd70      	pop	{r4, r5, r6, pc}

08001514 <__smakebuf_r>:
 8001514:	898b      	ldrh	r3, [r1, #12]
 8001516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001518:	079d      	lsls	r5, r3, #30
 800151a:	4606      	mov	r6, r0
 800151c:	460c      	mov	r4, r1
 800151e:	d507      	bpl.n	8001530 <__smakebuf_r+0x1c>
 8001520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	6123      	str	r3, [r4, #16]
 8001528:	2301      	movs	r3, #1
 800152a:	6163      	str	r3, [r4, #20]
 800152c:	b002      	add	sp, #8
 800152e:	bd70      	pop	{r4, r5, r6, pc}
 8001530:	ab01      	add	r3, sp, #4
 8001532:	466a      	mov	r2, sp
 8001534:	f7ff ffca 	bl	80014cc <__swhatbuf_r>
 8001538:	9900      	ldr	r1, [sp, #0]
 800153a:	4605      	mov	r5, r0
 800153c:	4630      	mov	r0, r6
 800153e:	f000 f877 	bl	8001630 <_malloc_r>
 8001542:	b948      	cbnz	r0, 8001558 <__smakebuf_r+0x44>
 8001544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001548:	059a      	lsls	r2, r3, #22
 800154a:	d4ef      	bmi.n	800152c <__smakebuf_r+0x18>
 800154c:	f023 0303 	bic.w	r3, r3, #3
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	81a3      	strh	r3, [r4, #12]
 8001556:	e7e3      	b.n	8001520 <__smakebuf_r+0xc>
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <__smakebuf_r+0x7c>)
 800155a:	62b3      	str	r3, [r6, #40]	; 0x28
 800155c:	89a3      	ldrh	r3, [r4, #12]
 800155e:	6020      	str	r0, [r4, #0]
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	81a3      	strh	r3, [r4, #12]
 8001566:	9b00      	ldr	r3, [sp, #0]
 8001568:	6163      	str	r3, [r4, #20]
 800156a:	9b01      	ldr	r3, [sp, #4]
 800156c:	6120      	str	r0, [r4, #16]
 800156e:	b15b      	cbz	r3, 8001588 <__smakebuf_r+0x74>
 8001570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001574:	4630      	mov	r0, r6
 8001576:	f000 fc03 	bl	8001d80 <_isatty_r>
 800157a:	b128      	cbz	r0, 8001588 <__smakebuf_r+0x74>
 800157c:	89a3      	ldrh	r3, [r4, #12]
 800157e:	f023 0303 	bic.w	r3, r3, #3
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	81a3      	strh	r3, [r4, #12]
 8001588:	89a3      	ldrh	r3, [r4, #12]
 800158a:	431d      	orrs	r5, r3
 800158c:	81a5      	strh	r5, [r4, #12]
 800158e:	e7cd      	b.n	800152c <__smakebuf_r+0x18>
 8001590:	08001381 	.word	0x08001381

08001594 <_free_r>:
 8001594:	b538      	push	{r3, r4, r5, lr}
 8001596:	4605      	mov	r5, r0
 8001598:	2900      	cmp	r1, #0
 800159a:	d045      	beq.n	8001628 <_free_r+0x94>
 800159c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015a0:	1f0c      	subs	r4, r1, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bfb8      	it	lt
 80015a6:	18e4      	addlt	r4, r4, r3
 80015a8:	f000 fc0c 	bl	8001dc4 <__malloc_lock>
 80015ac:	4a1f      	ldr	r2, [pc, #124]	; (800162c <_free_r+0x98>)
 80015ae:	6813      	ldr	r3, [r2, #0]
 80015b0:	4610      	mov	r0, r2
 80015b2:	b933      	cbnz	r3, 80015c2 <_free_r+0x2e>
 80015b4:	6063      	str	r3, [r4, #4]
 80015b6:	6014      	str	r4, [r2, #0]
 80015b8:	4628      	mov	r0, r5
 80015ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015be:	f000 bc02 	b.w	8001dc6 <__malloc_unlock>
 80015c2:	42a3      	cmp	r3, r4
 80015c4:	d90c      	bls.n	80015e0 <_free_r+0x4c>
 80015c6:	6821      	ldr	r1, [r4, #0]
 80015c8:	1862      	adds	r2, r4, r1
 80015ca:	4293      	cmp	r3, r2
 80015cc:	bf04      	itt	eq
 80015ce:	681a      	ldreq	r2, [r3, #0]
 80015d0:	685b      	ldreq	r3, [r3, #4]
 80015d2:	6063      	str	r3, [r4, #4]
 80015d4:	bf04      	itt	eq
 80015d6:	1852      	addeq	r2, r2, r1
 80015d8:	6022      	streq	r2, [r4, #0]
 80015da:	6004      	str	r4, [r0, #0]
 80015dc:	e7ec      	b.n	80015b8 <_free_r+0x24>
 80015de:	4613      	mov	r3, r2
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	b10a      	cbz	r2, 80015e8 <_free_r+0x54>
 80015e4:	42a2      	cmp	r2, r4
 80015e6:	d9fa      	bls.n	80015de <_free_r+0x4a>
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	1858      	adds	r0, r3, r1
 80015ec:	42a0      	cmp	r0, r4
 80015ee:	d10b      	bne.n	8001608 <_free_r+0x74>
 80015f0:	6820      	ldr	r0, [r4, #0]
 80015f2:	4401      	add	r1, r0
 80015f4:	1858      	adds	r0, r3, r1
 80015f6:	4282      	cmp	r2, r0
 80015f8:	6019      	str	r1, [r3, #0]
 80015fa:	d1dd      	bne.n	80015b8 <_free_r+0x24>
 80015fc:	6810      	ldr	r0, [r2, #0]
 80015fe:	6852      	ldr	r2, [r2, #4]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	4401      	add	r1, r0
 8001604:	6019      	str	r1, [r3, #0]
 8001606:	e7d7      	b.n	80015b8 <_free_r+0x24>
 8001608:	d902      	bls.n	8001610 <_free_r+0x7c>
 800160a:	230c      	movs	r3, #12
 800160c:	602b      	str	r3, [r5, #0]
 800160e:	e7d3      	b.n	80015b8 <_free_r+0x24>
 8001610:	6820      	ldr	r0, [r4, #0]
 8001612:	1821      	adds	r1, r4, r0
 8001614:	428a      	cmp	r2, r1
 8001616:	bf04      	itt	eq
 8001618:	6811      	ldreq	r1, [r2, #0]
 800161a:	6852      	ldreq	r2, [r2, #4]
 800161c:	6062      	str	r2, [r4, #4]
 800161e:	bf04      	itt	eq
 8001620:	1809      	addeq	r1, r1, r0
 8001622:	6021      	streq	r1, [r4, #0]
 8001624:	605c      	str	r4, [r3, #4]
 8001626:	e7c7      	b.n	80015b8 <_free_r+0x24>
 8001628:	bd38      	pop	{r3, r4, r5, pc}
 800162a:	bf00      	nop
 800162c:	20000084 	.word	0x20000084

08001630 <_malloc_r>:
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	1ccd      	adds	r5, r1, #3
 8001634:	f025 0503 	bic.w	r5, r5, #3
 8001638:	3508      	adds	r5, #8
 800163a:	2d0c      	cmp	r5, #12
 800163c:	bf38      	it	cc
 800163e:	250c      	movcc	r5, #12
 8001640:	2d00      	cmp	r5, #0
 8001642:	4606      	mov	r6, r0
 8001644:	db01      	blt.n	800164a <_malloc_r+0x1a>
 8001646:	42a9      	cmp	r1, r5
 8001648:	d903      	bls.n	8001652 <_malloc_r+0x22>
 800164a:	230c      	movs	r3, #12
 800164c:	6033      	str	r3, [r6, #0]
 800164e:	2000      	movs	r0, #0
 8001650:	bd70      	pop	{r4, r5, r6, pc}
 8001652:	f000 fbb7 	bl	8001dc4 <__malloc_lock>
 8001656:	4a21      	ldr	r2, [pc, #132]	; (80016dc <_malloc_r+0xac>)
 8001658:	6814      	ldr	r4, [r2, #0]
 800165a:	4621      	mov	r1, r4
 800165c:	b991      	cbnz	r1, 8001684 <_malloc_r+0x54>
 800165e:	4c20      	ldr	r4, [pc, #128]	; (80016e0 <_malloc_r+0xb0>)
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	b91b      	cbnz	r3, 800166c <_malloc_r+0x3c>
 8001664:	4630      	mov	r0, r6
 8001666:	f000 fb03 	bl	8001c70 <_sbrk_r>
 800166a:	6020      	str	r0, [r4, #0]
 800166c:	4629      	mov	r1, r5
 800166e:	4630      	mov	r0, r6
 8001670:	f000 fafe 	bl	8001c70 <_sbrk_r>
 8001674:	1c43      	adds	r3, r0, #1
 8001676:	d124      	bne.n	80016c2 <_malloc_r+0x92>
 8001678:	230c      	movs	r3, #12
 800167a:	6033      	str	r3, [r6, #0]
 800167c:	4630      	mov	r0, r6
 800167e:	f000 fba2 	bl	8001dc6 <__malloc_unlock>
 8001682:	e7e4      	b.n	800164e <_malloc_r+0x1e>
 8001684:	680b      	ldr	r3, [r1, #0]
 8001686:	1b5b      	subs	r3, r3, r5
 8001688:	d418      	bmi.n	80016bc <_malloc_r+0x8c>
 800168a:	2b0b      	cmp	r3, #11
 800168c:	d90f      	bls.n	80016ae <_malloc_r+0x7e>
 800168e:	600b      	str	r3, [r1, #0]
 8001690:	50cd      	str	r5, [r1, r3]
 8001692:	18cc      	adds	r4, r1, r3
 8001694:	4630      	mov	r0, r6
 8001696:	f000 fb96 	bl	8001dc6 <__malloc_unlock>
 800169a:	f104 000b 	add.w	r0, r4, #11
 800169e:	1d23      	adds	r3, r4, #4
 80016a0:	f020 0007 	bic.w	r0, r0, #7
 80016a4:	1ac3      	subs	r3, r0, r3
 80016a6:	d0d3      	beq.n	8001650 <_malloc_r+0x20>
 80016a8:	425a      	negs	r2, r3
 80016aa:	50e2      	str	r2, [r4, r3]
 80016ac:	e7d0      	b.n	8001650 <_malloc_r+0x20>
 80016ae:	428c      	cmp	r4, r1
 80016b0:	684b      	ldr	r3, [r1, #4]
 80016b2:	bf16      	itet	ne
 80016b4:	6063      	strne	r3, [r4, #4]
 80016b6:	6013      	streq	r3, [r2, #0]
 80016b8:	460c      	movne	r4, r1
 80016ba:	e7eb      	b.n	8001694 <_malloc_r+0x64>
 80016bc:	460c      	mov	r4, r1
 80016be:	6849      	ldr	r1, [r1, #4]
 80016c0:	e7cc      	b.n	800165c <_malloc_r+0x2c>
 80016c2:	1cc4      	adds	r4, r0, #3
 80016c4:	f024 0403 	bic.w	r4, r4, #3
 80016c8:	42a0      	cmp	r0, r4
 80016ca:	d005      	beq.n	80016d8 <_malloc_r+0xa8>
 80016cc:	1a21      	subs	r1, r4, r0
 80016ce:	4630      	mov	r0, r6
 80016d0:	f000 face 	bl	8001c70 <_sbrk_r>
 80016d4:	3001      	adds	r0, #1
 80016d6:	d0cf      	beq.n	8001678 <_malloc_r+0x48>
 80016d8:	6025      	str	r5, [r4, #0]
 80016da:	e7db      	b.n	8001694 <_malloc_r+0x64>
 80016dc:	20000084 	.word	0x20000084
 80016e0:	20000088 	.word	0x20000088

080016e4 <__sfputc_r>:
 80016e4:	6893      	ldr	r3, [r2, #8]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	b410      	push	{r4}
 80016ec:	6093      	str	r3, [r2, #8]
 80016ee:	da07      	bge.n	8001700 <__sfputc_r+0x1c>
 80016f0:	6994      	ldr	r4, [r2, #24]
 80016f2:	42a3      	cmp	r3, r4
 80016f4:	db01      	blt.n	80016fa <__sfputc_r+0x16>
 80016f6:	290a      	cmp	r1, #10
 80016f8:	d102      	bne.n	8001700 <__sfputc_r+0x1c>
 80016fa:	bc10      	pop	{r4}
 80016fc:	f7ff bcac 	b.w	8001058 <__swbuf_r>
 8001700:	6813      	ldr	r3, [r2, #0]
 8001702:	1c58      	adds	r0, r3, #1
 8001704:	6010      	str	r0, [r2, #0]
 8001706:	7019      	strb	r1, [r3, #0]
 8001708:	4608      	mov	r0, r1
 800170a:	bc10      	pop	{r4}
 800170c:	4770      	bx	lr

0800170e <__sfputs_r>:
 800170e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001710:	4606      	mov	r6, r0
 8001712:	460f      	mov	r7, r1
 8001714:	4614      	mov	r4, r2
 8001716:	18d5      	adds	r5, r2, r3
 8001718:	42ac      	cmp	r4, r5
 800171a:	d101      	bne.n	8001720 <__sfputs_r+0x12>
 800171c:	2000      	movs	r0, #0
 800171e:	e007      	b.n	8001730 <__sfputs_r+0x22>
 8001720:	463a      	mov	r2, r7
 8001722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001726:	4630      	mov	r0, r6
 8001728:	f7ff ffdc 	bl	80016e4 <__sfputc_r>
 800172c:	1c43      	adds	r3, r0, #1
 800172e:	d1f3      	bne.n	8001718 <__sfputs_r+0xa>
 8001730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001734 <_vfiprintf_r>:
 8001734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001738:	460c      	mov	r4, r1
 800173a:	b09d      	sub	sp, #116	; 0x74
 800173c:	4617      	mov	r7, r2
 800173e:	461d      	mov	r5, r3
 8001740:	4606      	mov	r6, r0
 8001742:	b118      	cbz	r0, 800174c <_vfiprintf_r+0x18>
 8001744:	6983      	ldr	r3, [r0, #24]
 8001746:	b90b      	cbnz	r3, 800174c <_vfiprintf_r+0x18>
 8001748:	f7ff fe36 	bl	80013b8 <__sinit>
 800174c:	4b7c      	ldr	r3, [pc, #496]	; (8001940 <_vfiprintf_r+0x20c>)
 800174e:	429c      	cmp	r4, r3
 8001750:	d158      	bne.n	8001804 <_vfiprintf_r+0xd0>
 8001752:	6874      	ldr	r4, [r6, #4]
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	0718      	lsls	r0, r3, #28
 8001758:	d55e      	bpl.n	8001818 <_vfiprintf_r+0xe4>
 800175a:	6923      	ldr	r3, [r4, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d05b      	beq.n	8001818 <_vfiprintf_r+0xe4>
 8001760:	2300      	movs	r3, #0
 8001762:	9309      	str	r3, [sp, #36]	; 0x24
 8001764:	2320      	movs	r3, #32
 8001766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800176a:	2330      	movs	r3, #48	; 0x30
 800176c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001770:	9503      	str	r5, [sp, #12]
 8001772:	f04f 0b01 	mov.w	fp, #1
 8001776:	46b8      	mov	r8, r7
 8001778:	4645      	mov	r5, r8
 800177a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800177e:	b10b      	cbz	r3, 8001784 <_vfiprintf_r+0x50>
 8001780:	2b25      	cmp	r3, #37	; 0x25
 8001782:	d154      	bne.n	800182e <_vfiprintf_r+0xfa>
 8001784:	ebb8 0a07 	subs.w	sl, r8, r7
 8001788:	d00b      	beq.n	80017a2 <_vfiprintf_r+0x6e>
 800178a:	4653      	mov	r3, sl
 800178c:	463a      	mov	r2, r7
 800178e:	4621      	mov	r1, r4
 8001790:	4630      	mov	r0, r6
 8001792:	f7ff ffbc 	bl	800170e <__sfputs_r>
 8001796:	3001      	adds	r0, #1
 8001798:	f000 80c2 	beq.w	8001920 <_vfiprintf_r+0x1ec>
 800179c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800179e:	4453      	add	r3, sl
 80017a0:	9309      	str	r3, [sp, #36]	; 0x24
 80017a2:	f898 3000 	ldrb.w	r3, [r8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80ba 	beq.w	8001920 <_vfiprintf_r+0x1ec>
 80017ac:	2300      	movs	r3, #0
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017b6:	9304      	str	r3, [sp, #16]
 80017b8:	9307      	str	r3, [sp, #28]
 80017ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017be:	931a      	str	r3, [sp, #104]	; 0x68
 80017c0:	46a8      	mov	r8, r5
 80017c2:	2205      	movs	r2, #5
 80017c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80017c8:	485e      	ldr	r0, [pc, #376]	; (8001944 <_vfiprintf_r+0x210>)
 80017ca:	f7fe fd21 	bl	8000210 <memchr>
 80017ce:	9b04      	ldr	r3, [sp, #16]
 80017d0:	bb78      	cbnz	r0, 8001832 <_vfiprintf_r+0xfe>
 80017d2:	06d9      	lsls	r1, r3, #27
 80017d4:	bf44      	itt	mi
 80017d6:	2220      	movmi	r2, #32
 80017d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017dc:	071a      	lsls	r2, r3, #28
 80017de:	bf44      	itt	mi
 80017e0:	222b      	movmi	r2, #43	; 0x2b
 80017e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017e6:	782a      	ldrb	r2, [r5, #0]
 80017e8:	2a2a      	cmp	r2, #42	; 0x2a
 80017ea:	d02a      	beq.n	8001842 <_vfiprintf_r+0x10e>
 80017ec:	9a07      	ldr	r2, [sp, #28]
 80017ee:	46a8      	mov	r8, r5
 80017f0:	2000      	movs	r0, #0
 80017f2:	250a      	movs	r5, #10
 80017f4:	4641      	mov	r1, r8
 80017f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017fa:	3b30      	subs	r3, #48	; 0x30
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d969      	bls.n	80018d4 <_vfiprintf_r+0x1a0>
 8001800:	b360      	cbz	r0, 800185c <_vfiprintf_r+0x128>
 8001802:	e024      	b.n	800184e <_vfiprintf_r+0x11a>
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <_vfiprintf_r+0x214>)
 8001806:	429c      	cmp	r4, r3
 8001808:	d101      	bne.n	800180e <_vfiprintf_r+0xda>
 800180a:	68b4      	ldr	r4, [r6, #8]
 800180c:	e7a2      	b.n	8001754 <_vfiprintf_r+0x20>
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <_vfiprintf_r+0x218>)
 8001810:	429c      	cmp	r4, r3
 8001812:	bf08      	it	eq
 8001814:	68f4      	ldreq	r4, [r6, #12]
 8001816:	e79d      	b.n	8001754 <_vfiprintf_r+0x20>
 8001818:	4621      	mov	r1, r4
 800181a:	4630      	mov	r0, r6
 800181c:	f7ff fc6e 	bl	80010fc <__swsetup_r>
 8001820:	2800      	cmp	r0, #0
 8001822:	d09d      	beq.n	8001760 <_vfiprintf_r+0x2c>
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	b01d      	add	sp, #116	; 0x74
 800182a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800182e:	46a8      	mov	r8, r5
 8001830:	e7a2      	b.n	8001778 <_vfiprintf_r+0x44>
 8001832:	4a44      	ldr	r2, [pc, #272]	; (8001944 <_vfiprintf_r+0x210>)
 8001834:	1a80      	subs	r0, r0, r2
 8001836:	fa0b f000 	lsl.w	r0, fp, r0
 800183a:	4318      	orrs	r0, r3
 800183c:	9004      	str	r0, [sp, #16]
 800183e:	4645      	mov	r5, r8
 8001840:	e7be      	b.n	80017c0 <_vfiprintf_r+0x8c>
 8001842:	9a03      	ldr	r2, [sp, #12]
 8001844:	1d11      	adds	r1, r2, #4
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	9103      	str	r1, [sp, #12]
 800184a:	2a00      	cmp	r2, #0
 800184c:	db01      	blt.n	8001852 <_vfiprintf_r+0x11e>
 800184e:	9207      	str	r2, [sp, #28]
 8001850:	e004      	b.n	800185c <_vfiprintf_r+0x128>
 8001852:	4252      	negs	r2, r2
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	9207      	str	r2, [sp, #28]
 800185a:	9304      	str	r3, [sp, #16]
 800185c:	f898 3000 	ldrb.w	r3, [r8]
 8001860:	2b2e      	cmp	r3, #46	; 0x2e
 8001862:	d10e      	bne.n	8001882 <_vfiprintf_r+0x14e>
 8001864:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001868:	2b2a      	cmp	r3, #42	; 0x2a
 800186a:	d138      	bne.n	80018de <_vfiprintf_r+0x1aa>
 800186c:	9b03      	ldr	r3, [sp, #12]
 800186e:	1d1a      	adds	r2, r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	9203      	str	r2, [sp, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	bfb8      	it	lt
 8001878:	f04f 33ff 	movlt.w	r3, #4294967295
 800187c:	f108 0802 	add.w	r8, r8, #2
 8001880:	9305      	str	r3, [sp, #20]
 8001882:	4d33      	ldr	r5, [pc, #204]	; (8001950 <_vfiprintf_r+0x21c>)
 8001884:	f898 1000 	ldrb.w	r1, [r8]
 8001888:	2203      	movs	r2, #3
 800188a:	4628      	mov	r0, r5
 800188c:	f7fe fcc0 	bl	8000210 <memchr>
 8001890:	b140      	cbz	r0, 80018a4 <_vfiprintf_r+0x170>
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	1b40      	subs	r0, r0, r5
 8001896:	fa03 f000 	lsl.w	r0, r3, r0
 800189a:	9b04      	ldr	r3, [sp, #16]
 800189c:	4303      	orrs	r3, r0
 800189e:	f108 0801 	add.w	r8, r8, #1
 80018a2:	9304      	str	r3, [sp, #16]
 80018a4:	f898 1000 	ldrb.w	r1, [r8]
 80018a8:	482a      	ldr	r0, [pc, #168]	; (8001954 <_vfiprintf_r+0x220>)
 80018aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018ae:	2206      	movs	r2, #6
 80018b0:	f108 0701 	add.w	r7, r8, #1
 80018b4:	f7fe fcac 	bl	8000210 <memchr>
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d037      	beq.n	800192c <_vfiprintf_r+0x1f8>
 80018bc:	4b26      	ldr	r3, [pc, #152]	; (8001958 <_vfiprintf_r+0x224>)
 80018be:	bb1b      	cbnz	r3, 8001908 <_vfiprintf_r+0x1d4>
 80018c0:	9b03      	ldr	r3, [sp, #12]
 80018c2:	3307      	adds	r3, #7
 80018c4:	f023 0307 	bic.w	r3, r3, #7
 80018c8:	3308      	adds	r3, #8
 80018ca:	9303      	str	r3, [sp, #12]
 80018cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018ce:	444b      	add	r3, r9
 80018d0:	9309      	str	r3, [sp, #36]	; 0x24
 80018d2:	e750      	b.n	8001776 <_vfiprintf_r+0x42>
 80018d4:	fb05 3202 	mla	r2, r5, r2, r3
 80018d8:	2001      	movs	r0, #1
 80018da:	4688      	mov	r8, r1
 80018dc:	e78a      	b.n	80017f4 <_vfiprintf_r+0xc0>
 80018de:	2300      	movs	r3, #0
 80018e0:	f108 0801 	add.w	r8, r8, #1
 80018e4:	9305      	str	r3, [sp, #20]
 80018e6:	4619      	mov	r1, r3
 80018e8:	250a      	movs	r5, #10
 80018ea:	4640      	mov	r0, r8
 80018ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018f0:	3a30      	subs	r2, #48	; 0x30
 80018f2:	2a09      	cmp	r2, #9
 80018f4:	d903      	bls.n	80018fe <_vfiprintf_r+0x1ca>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0c3      	beq.n	8001882 <_vfiprintf_r+0x14e>
 80018fa:	9105      	str	r1, [sp, #20]
 80018fc:	e7c1      	b.n	8001882 <_vfiprintf_r+0x14e>
 80018fe:	fb05 2101 	mla	r1, r5, r1, r2
 8001902:	2301      	movs	r3, #1
 8001904:	4680      	mov	r8, r0
 8001906:	e7f0      	b.n	80018ea <_vfiprintf_r+0x1b6>
 8001908:	ab03      	add	r3, sp, #12
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4622      	mov	r2, r4
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <_vfiprintf_r+0x228>)
 8001910:	a904      	add	r1, sp, #16
 8001912:	4630      	mov	r0, r6
 8001914:	f3af 8000 	nop.w
 8001918:	f1b0 3fff 	cmp.w	r0, #4294967295
 800191c:	4681      	mov	r9, r0
 800191e:	d1d5      	bne.n	80018cc <_vfiprintf_r+0x198>
 8001920:	89a3      	ldrh	r3, [r4, #12]
 8001922:	065b      	lsls	r3, r3, #25
 8001924:	f53f af7e 	bmi.w	8001824 <_vfiprintf_r+0xf0>
 8001928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800192a:	e77d      	b.n	8001828 <_vfiprintf_r+0xf4>
 800192c:	ab03      	add	r3, sp, #12
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4622      	mov	r2, r4
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <_vfiprintf_r+0x228>)
 8001934:	a904      	add	r1, sp, #16
 8001936:	4630      	mov	r0, r6
 8001938:	f000 f888 	bl	8001a4c <_printf_i>
 800193c:	e7ec      	b.n	8001918 <_vfiprintf_r+0x1e4>
 800193e:	bf00      	nop
 8001940:	08001eb0 	.word	0x08001eb0
 8001944:	08001ef0 	.word	0x08001ef0
 8001948:	08001ed0 	.word	0x08001ed0
 800194c:	08001e90 	.word	0x08001e90
 8001950:	08001ef6 	.word	0x08001ef6
 8001954:	08001efa 	.word	0x08001efa
 8001958:	00000000 	.word	0x00000000
 800195c:	0800170f 	.word	0x0800170f

08001960 <_printf_common>:
 8001960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001964:	4691      	mov	r9, r2
 8001966:	461f      	mov	r7, r3
 8001968:	688a      	ldr	r2, [r1, #8]
 800196a:	690b      	ldr	r3, [r1, #16]
 800196c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001970:	4293      	cmp	r3, r2
 8001972:	bfb8      	it	lt
 8001974:	4613      	movlt	r3, r2
 8001976:	f8c9 3000 	str.w	r3, [r9]
 800197a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800197e:	4606      	mov	r6, r0
 8001980:	460c      	mov	r4, r1
 8001982:	b112      	cbz	r2, 800198a <_printf_common+0x2a>
 8001984:	3301      	adds	r3, #1
 8001986:	f8c9 3000 	str.w	r3, [r9]
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	0699      	lsls	r1, r3, #26
 800198e:	bf42      	ittt	mi
 8001990:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001994:	3302      	addmi	r3, #2
 8001996:	f8c9 3000 	strmi.w	r3, [r9]
 800199a:	6825      	ldr	r5, [r4, #0]
 800199c:	f015 0506 	ands.w	r5, r5, #6
 80019a0:	d107      	bne.n	80019b2 <_printf_common+0x52>
 80019a2:	f104 0a19 	add.w	sl, r4, #25
 80019a6:	68e3      	ldr	r3, [r4, #12]
 80019a8:	f8d9 2000 	ldr.w	r2, [r9]
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	42ab      	cmp	r3, r5
 80019b0:	dc28      	bgt.n	8001a04 <_printf_common+0xa4>
 80019b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80019b6:	6822      	ldr	r2, [r4, #0]
 80019b8:	3300      	adds	r3, #0
 80019ba:	bf18      	it	ne
 80019bc:	2301      	movne	r3, #1
 80019be:	0692      	lsls	r2, r2, #26
 80019c0:	d42d      	bmi.n	8001a1e <_printf_common+0xbe>
 80019c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019c6:	4639      	mov	r1, r7
 80019c8:	4630      	mov	r0, r6
 80019ca:	47c0      	blx	r8
 80019cc:	3001      	adds	r0, #1
 80019ce:	d020      	beq.n	8001a12 <_printf_common+0xb2>
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	68e5      	ldr	r5, [r4, #12]
 80019d4:	f8d9 2000 	ldr.w	r2, [r9]
 80019d8:	f003 0306 	and.w	r3, r3, #6
 80019dc:	2b04      	cmp	r3, #4
 80019de:	bf08      	it	eq
 80019e0:	1aad      	subeq	r5, r5, r2
 80019e2:	68a3      	ldr	r3, [r4, #8]
 80019e4:	6922      	ldr	r2, [r4, #16]
 80019e6:	bf0c      	ite	eq
 80019e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019ec:	2500      	movne	r5, #0
 80019ee:	4293      	cmp	r3, r2
 80019f0:	bfc4      	itt	gt
 80019f2:	1a9b      	subgt	r3, r3, r2
 80019f4:	18ed      	addgt	r5, r5, r3
 80019f6:	f04f 0900 	mov.w	r9, #0
 80019fa:	341a      	adds	r4, #26
 80019fc:	454d      	cmp	r5, r9
 80019fe:	d11a      	bne.n	8001a36 <_printf_common+0xd6>
 8001a00:	2000      	movs	r0, #0
 8001a02:	e008      	b.n	8001a16 <_printf_common+0xb6>
 8001a04:	2301      	movs	r3, #1
 8001a06:	4652      	mov	r2, sl
 8001a08:	4639      	mov	r1, r7
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	47c0      	blx	r8
 8001a0e:	3001      	adds	r0, #1
 8001a10:	d103      	bne.n	8001a1a <_printf_common+0xba>
 8001a12:	f04f 30ff 	mov.w	r0, #4294967295
 8001a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a1a:	3501      	adds	r5, #1
 8001a1c:	e7c3      	b.n	80019a6 <_printf_common+0x46>
 8001a1e:	18e1      	adds	r1, r4, r3
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	2030      	movs	r0, #48	; 0x30
 8001a24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a28:	4422      	add	r2, r4
 8001a2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a32:	3302      	adds	r3, #2
 8001a34:	e7c5      	b.n	80019c2 <_printf_common+0x62>
 8001a36:	2301      	movs	r3, #1
 8001a38:	4622      	mov	r2, r4
 8001a3a:	4639      	mov	r1, r7
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	47c0      	blx	r8
 8001a40:	3001      	adds	r0, #1
 8001a42:	d0e6      	beq.n	8001a12 <_printf_common+0xb2>
 8001a44:	f109 0901 	add.w	r9, r9, #1
 8001a48:	e7d8      	b.n	80019fc <_printf_common+0x9c>
	...

08001a4c <_printf_i>:
 8001a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001a54:	460c      	mov	r4, r1
 8001a56:	7e09      	ldrb	r1, [r1, #24]
 8001a58:	b085      	sub	sp, #20
 8001a5a:	296e      	cmp	r1, #110	; 0x6e
 8001a5c:	4617      	mov	r7, r2
 8001a5e:	4606      	mov	r6, r0
 8001a60:	4698      	mov	r8, r3
 8001a62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a64:	f000 80b3 	beq.w	8001bce <_printf_i+0x182>
 8001a68:	d822      	bhi.n	8001ab0 <_printf_i+0x64>
 8001a6a:	2963      	cmp	r1, #99	; 0x63
 8001a6c:	d036      	beq.n	8001adc <_printf_i+0x90>
 8001a6e:	d80a      	bhi.n	8001a86 <_printf_i+0x3a>
 8001a70:	2900      	cmp	r1, #0
 8001a72:	f000 80b9 	beq.w	8001be8 <_printf_i+0x19c>
 8001a76:	2958      	cmp	r1, #88	; 0x58
 8001a78:	f000 8083 	beq.w	8001b82 <_printf_i+0x136>
 8001a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001a84:	e032      	b.n	8001aec <_printf_i+0xa0>
 8001a86:	2964      	cmp	r1, #100	; 0x64
 8001a88:	d001      	beq.n	8001a8e <_printf_i+0x42>
 8001a8a:	2969      	cmp	r1, #105	; 0x69
 8001a8c:	d1f6      	bne.n	8001a7c <_printf_i+0x30>
 8001a8e:	6820      	ldr	r0, [r4, #0]
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	0605      	lsls	r5, r0, #24
 8001a94:	f103 0104 	add.w	r1, r3, #4
 8001a98:	d52a      	bpl.n	8001af0 <_printf_i+0xa4>
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6011      	str	r1, [r2, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da03      	bge.n	8001aaa <_printf_i+0x5e>
 8001aa2:	222d      	movs	r2, #45	; 0x2d
 8001aa4:	425b      	negs	r3, r3
 8001aa6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001aaa:	486f      	ldr	r0, [pc, #444]	; (8001c68 <_printf_i+0x21c>)
 8001aac:	220a      	movs	r2, #10
 8001aae:	e039      	b.n	8001b24 <_printf_i+0xd8>
 8001ab0:	2973      	cmp	r1, #115	; 0x73
 8001ab2:	f000 809d 	beq.w	8001bf0 <_printf_i+0x1a4>
 8001ab6:	d808      	bhi.n	8001aca <_printf_i+0x7e>
 8001ab8:	296f      	cmp	r1, #111	; 0x6f
 8001aba:	d020      	beq.n	8001afe <_printf_i+0xb2>
 8001abc:	2970      	cmp	r1, #112	; 0x70
 8001abe:	d1dd      	bne.n	8001a7c <_printf_i+0x30>
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	f043 0320 	orr.w	r3, r3, #32
 8001ac6:	6023      	str	r3, [r4, #0]
 8001ac8:	e003      	b.n	8001ad2 <_printf_i+0x86>
 8001aca:	2975      	cmp	r1, #117	; 0x75
 8001acc:	d017      	beq.n	8001afe <_printf_i+0xb2>
 8001ace:	2978      	cmp	r1, #120	; 0x78
 8001ad0:	d1d4      	bne.n	8001a7c <_printf_i+0x30>
 8001ad2:	2378      	movs	r3, #120	; 0x78
 8001ad4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ad8:	4864      	ldr	r0, [pc, #400]	; (8001c6c <_printf_i+0x220>)
 8001ada:	e055      	b.n	8001b88 <_printf_i+0x13c>
 8001adc:	6813      	ldr	r3, [r2, #0]
 8001ade:	1d19      	adds	r1, r3, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6011      	str	r1, [r2, #0]
 8001ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001aec:	2301      	movs	r3, #1
 8001aee:	e08c      	b.n	8001c0a <_printf_i+0x1be>
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6011      	str	r1, [r2, #0]
 8001af4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001af8:	bf18      	it	ne
 8001afa:	b21b      	sxthne	r3, r3
 8001afc:	e7cf      	b.n	8001a9e <_printf_i+0x52>
 8001afe:	6813      	ldr	r3, [r2, #0]
 8001b00:	6825      	ldr	r5, [r4, #0]
 8001b02:	1d18      	adds	r0, r3, #4
 8001b04:	6010      	str	r0, [r2, #0]
 8001b06:	0628      	lsls	r0, r5, #24
 8001b08:	d501      	bpl.n	8001b0e <_printf_i+0xc2>
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	e002      	b.n	8001b14 <_printf_i+0xc8>
 8001b0e:	0668      	lsls	r0, r5, #25
 8001b10:	d5fb      	bpl.n	8001b0a <_printf_i+0xbe>
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	4854      	ldr	r0, [pc, #336]	; (8001c68 <_printf_i+0x21c>)
 8001b16:	296f      	cmp	r1, #111	; 0x6f
 8001b18:	bf14      	ite	ne
 8001b1a:	220a      	movne	r2, #10
 8001b1c:	2208      	moveq	r2, #8
 8001b1e:	2100      	movs	r1, #0
 8001b20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b24:	6865      	ldr	r5, [r4, #4]
 8001b26:	60a5      	str	r5, [r4, #8]
 8001b28:	2d00      	cmp	r5, #0
 8001b2a:	f2c0 8095 	blt.w	8001c58 <_printf_i+0x20c>
 8001b2e:	6821      	ldr	r1, [r4, #0]
 8001b30:	f021 0104 	bic.w	r1, r1, #4
 8001b34:	6021      	str	r1, [r4, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d13d      	bne.n	8001bb6 <_printf_i+0x16a>
 8001b3a:	2d00      	cmp	r5, #0
 8001b3c:	f040 808e 	bne.w	8001c5c <_printf_i+0x210>
 8001b40:	4665      	mov	r5, ip
 8001b42:	2a08      	cmp	r2, #8
 8001b44:	d10b      	bne.n	8001b5e <_printf_i+0x112>
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	07db      	lsls	r3, r3, #31
 8001b4a:	d508      	bpl.n	8001b5e <_printf_i+0x112>
 8001b4c:	6923      	ldr	r3, [r4, #16]
 8001b4e:	6862      	ldr	r2, [r4, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	bfde      	ittt	le
 8001b54:	2330      	movle	r3, #48	; 0x30
 8001b56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b5e:	ebac 0305 	sub.w	r3, ip, r5
 8001b62:	6123      	str	r3, [r4, #16]
 8001b64:	f8cd 8000 	str.w	r8, [sp]
 8001b68:	463b      	mov	r3, r7
 8001b6a:	aa03      	add	r2, sp, #12
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	4630      	mov	r0, r6
 8001b70:	f7ff fef6 	bl	8001960 <_printf_common>
 8001b74:	3001      	adds	r0, #1
 8001b76:	d14d      	bne.n	8001c14 <_printf_i+0x1c8>
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	b005      	add	sp, #20
 8001b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b82:	4839      	ldr	r0, [pc, #228]	; (8001c68 <_printf_i+0x21c>)
 8001b84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001b88:	6813      	ldr	r3, [r2, #0]
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	1d1d      	adds	r5, r3, #4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6015      	str	r5, [r2, #0]
 8001b92:	060a      	lsls	r2, r1, #24
 8001b94:	d50b      	bpl.n	8001bae <_printf_i+0x162>
 8001b96:	07ca      	lsls	r2, r1, #31
 8001b98:	bf44      	itt	mi
 8001b9a:	f041 0120 	orrmi.w	r1, r1, #32
 8001b9e:	6021      	strmi	r1, [r4, #0]
 8001ba0:	b91b      	cbnz	r3, 8001baa <_printf_i+0x15e>
 8001ba2:	6822      	ldr	r2, [r4, #0]
 8001ba4:	f022 0220 	bic.w	r2, r2, #32
 8001ba8:	6022      	str	r2, [r4, #0]
 8001baa:	2210      	movs	r2, #16
 8001bac:	e7b7      	b.n	8001b1e <_printf_i+0xd2>
 8001bae:	064d      	lsls	r5, r1, #25
 8001bb0:	bf48      	it	mi
 8001bb2:	b29b      	uxthmi	r3, r3
 8001bb4:	e7ef      	b.n	8001b96 <_printf_i+0x14a>
 8001bb6:	4665      	mov	r5, ip
 8001bb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bbc:	fb02 3311 	mls	r3, r2, r1, r3
 8001bc0:	5cc3      	ldrb	r3, [r0, r3]
 8001bc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	2900      	cmp	r1, #0
 8001bca:	d1f5      	bne.n	8001bb8 <_printf_i+0x16c>
 8001bcc:	e7b9      	b.n	8001b42 <_printf_i+0xf6>
 8001bce:	6813      	ldr	r3, [r2, #0]
 8001bd0:	6825      	ldr	r5, [r4, #0]
 8001bd2:	6961      	ldr	r1, [r4, #20]
 8001bd4:	1d18      	adds	r0, r3, #4
 8001bd6:	6010      	str	r0, [r2, #0]
 8001bd8:	0628      	lsls	r0, r5, #24
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	d501      	bpl.n	8001be2 <_printf_i+0x196>
 8001bde:	6019      	str	r1, [r3, #0]
 8001be0:	e002      	b.n	8001be8 <_printf_i+0x19c>
 8001be2:	066a      	lsls	r2, r5, #25
 8001be4:	d5fb      	bpl.n	8001bde <_printf_i+0x192>
 8001be6:	8019      	strh	r1, [r3, #0]
 8001be8:	2300      	movs	r3, #0
 8001bea:	6123      	str	r3, [r4, #16]
 8001bec:	4665      	mov	r5, ip
 8001bee:	e7b9      	b.n	8001b64 <_printf_i+0x118>
 8001bf0:	6813      	ldr	r3, [r2, #0]
 8001bf2:	1d19      	adds	r1, r3, #4
 8001bf4:	6011      	str	r1, [r2, #0]
 8001bf6:	681d      	ldr	r5, [r3, #0]
 8001bf8:	6862      	ldr	r2, [r4, #4]
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	f7fe fb07 	bl	8000210 <memchr>
 8001c02:	b108      	cbz	r0, 8001c08 <_printf_i+0x1bc>
 8001c04:	1b40      	subs	r0, r0, r5
 8001c06:	6060      	str	r0, [r4, #4]
 8001c08:	6863      	ldr	r3, [r4, #4]
 8001c0a:	6123      	str	r3, [r4, #16]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c12:	e7a7      	b.n	8001b64 <_printf_i+0x118>
 8001c14:	6923      	ldr	r3, [r4, #16]
 8001c16:	462a      	mov	r2, r5
 8001c18:	4639      	mov	r1, r7
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	47c0      	blx	r8
 8001c1e:	3001      	adds	r0, #1
 8001c20:	d0aa      	beq.n	8001b78 <_printf_i+0x12c>
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	079b      	lsls	r3, r3, #30
 8001c26:	d413      	bmi.n	8001c50 <_printf_i+0x204>
 8001c28:	68e0      	ldr	r0, [r4, #12]
 8001c2a:	9b03      	ldr	r3, [sp, #12]
 8001c2c:	4298      	cmp	r0, r3
 8001c2e:	bfb8      	it	lt
 8001c30:	4618      	movlt	r0, r3
 8001c32:	e7a3      	b.n	8001b7c <_printf_i+0x130>
 8001c34:	2301      	movs	r3, #1
 8001c36:	464a      	mov	r2, r9
 8001c38:	4639      	mov	r1, r7
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	47c0      	blx	r8
 8001c3e:	3001      	adds	r0, #1
 8001c40:	d09a      	beq.n	8001b78 <_printf_i+0x12c>
 8001c42:	3501      	adds	r5, #1
 8001c44:	68e3      	ldr	r3, [r4, #12]
 8001c46:	9a03      	ldr	r2, [sp, #12]
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	42ab      	cmp	r3, r5
 8001c4c:	dcf2      	bgt.n	8001c34 <_printf_i+0x1e8>
 8001c4e:	e7eb      	b.n	8001c28 <_printf_i+0x1dc>
 8001c50:	2500      	movs	r5, #0
 8001c52:	f104 0919 	add.w	r9, r4, #25
 8001c56:	e7f5      	b.n	8001c44 <_printf_i+0x1f8>
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ac      	bne.n	8001bb6 <_printf_i+0x16a>
 8001c5c:	7803      	ldrb	r3, [r0, #0]
 8001c5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c66:	e76c      	b.n	8001b42 <_printf_i+0xf6>
 8001c68:	08001f01 	.word	0x08001f01
 8001c6c:	08001f12 	.word	0x08001f12

08001c70 <_sbrk_r>:
 8001c70:	b538      	push	{r3, r4, r5, lr}
 8001c72:	4c06      	ldr	r4, [pc, #24]	; (8001c8c <_sbrk_r+0x1c>)
 8001c74:	2300      	movs	r3, #0
 8001c76:	4605      	mov	r5, r0
 8001c78:	4608      	mov	r0, r1
 8001c7a:	6023      	str	r3, [r4, #0]
 8001c7c:	f7fe fcea 	bl	8000654 <_sbrk>
 8001c80:	1c43      	adds	r3, r0, #1
 8001c82:	d102      	bne.n	8001c8a <_sbrk_r+0x1a>
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	b103      	cbz	r3, 8001c8a <_sbrk_r+0x1a>
 8001c88:	602b      	str	r3, [r5, #0]
 8001c8a:	bd38      	pop	{r3, r4, r5, pc}
 8001c8c:	2000008c 	.word	0x2000008c

08001c90 <__sread>:
 8001c90:	b510      	push	{r4, lr}
 8001c92:	460c      	mov	r4, r1
 8001c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c98:	f000 f896 	bl	8001dc8 <_read_r>
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	bfab      	itete	ge
 8001ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ca4:	181b      	addge	r3, r3, r0
 8001ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001caa:	bfac      	ite	ge
 8001cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cae:	81a3      	strhlt	r3, [r4, #12]
 8001cb0:	bd10      	pop	{r4, pc}

08001cb2 <__swrite>:
 8001cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb6:	461f      	mov	r7, r3
 8001cb8:	898b      	ldrh	r3, [r1, #12]
 8001cba:	05db      	lsls	r3, r3, #23
 8001cbc:	4605      	mov	r5, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4616      	mov	r6, r2
 8001cc2:	d505      	bpl.n	8001cd0 <__swrite+0x1e>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ccc:	f000 f868 	bl	8001da0 <_lseek_r>
 8001cd0:	89a3      	ldrh	r3, [r4, #12]
 8001cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cda:	81a3      	strh	r3, [r4, #12]
 8001cdc:	4632      	mov	r2, r6
 8001cde:	463b      	mov	r3, r7
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ce6:	f000 b817 	b.w	8001d18 <_write_r>

08001cea <__sseek>:
 8001cea:	b510      	push	{r4, lr}
 8001cec:	460c      	mov	r4, r1
 8001cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cf2:	f000 f855 	bl	8001da0 <_lseek_r>
 8001cf6:	1c43      	adds	r3, r0, #1
 8001cf8:	89a3      	ldrh	r3, [r4, #12]
 8001cfa:	bf15      	itete	ne
 8001cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d06:	81a3      	strheq	r3, [r4, #12]
 8001d08:	bf18      	it	ne
 8001d0a:	81a3      	strhne	r3, [r4, #12]
 8001d0c:	bd10      	pop	{r4, pc}

08001d0e <__sclose>:
 8001d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d12:	f000 b813 	b.w	8001d3c <_close_r>
	...

08001d18 <_write_r>:
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	4c07      	ldr	r4, [pc, #28]	; (8001d38 <_write_r+0x20>)
 8001d1c:	4605      	mov	r5, r0
 8001d1e:	4608      	mov	r0, r1
 8001d20:	4611      	mov	r1, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	6022      	str	r2, [r4, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f7fe fc47 	bl	80005ba <_write>
 8001d2c:	1c43      	adds	r3, r0, #1
 8001d2e:	d102      	bne.n	8001d36 <_write_r+0x1e>
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	b103      	cbz	r3, 8001d36 <_write_r+0x1e>
 8001d34:	602b      	str	r3, [r5, #0]
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	2000008c 	.word	0x2000008c

08001d3c <_close_r>:
 8001d3c:	b538      	push	{r3, r4, r5, lr}
 8001d3e:	4c06      	ldr	r4, [pc, #24]	; (8001d58 <_close_r+0x1c>)
 8001d40:	2300      	movs	r3, #0
 8001d42:	4605      	mov	r5, r0
 8001d44:	4608      	mov	r0, r1
 8001d46:	6023      	str	r3, [r4, #0]
 8001d48:	f7fe fc53 	bl	80005f2 <_close>
 8001d4c:	1c43      	adds	r3, r0, #1
 8001d4e:	d102      	bne.n	8001d56 <_close_r+0x1a>
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	b103      	cbz	r3, 8001d56 <_close_r+0x1a>
 8001d54:	602b      	str	r3, [r5, #0]
 8001d56:	bd38      	pop	{r3, r4, r5, pc}
 8001d58:	2000008c 	.word	0x2000008c

08001d5c <_fstat_r>:
 8001d5c:	b538      	push	{r3, r4, r5, lr}
 8001d5e:	4c07      	ldr	r4, [pc, #28]	; (8001d7c <_fstat_r+0x20>)
 8001d60:	2300      	movs	r3, #0
 8001d62:	4605      	mov	r5, r0
 8001d64:	4608      	mov	r0, r1
 8001d66:	4611      	mov	r1, r2
 8001d68:	6023      	str	r3, [r4, #0]
 8001d6a:	f7fe fc4d 	bl	8000608 <_fstat>
 8001d6e:	1c43      	adds	r3, r0, #1
 8001d70:	d102      	bne.n	8001d78 <_fstat_r+0x1c>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	b103      	cbz	r3, 8001d78 <_fstat_r+0x1c>
 8001d76:	602b      	str	r3, [r5, #0]
 8001d78:	bd38      	pop	{r3, r4, r5, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000008c 	.word	0x2000008c

08001d80 <_isatty_r>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	4c06      	ldr	r4, [pc, #24]	; (8001d9c <_isatty_r+0x1c>)
 8001d84:	2300      	movs	r3, #0
 8001d86:	4605      	mov	r5, r0
 8001d88:	4608      	mov	r0, r1
 8001d8a:	6023      	str	r3, [r4, #0]
 8001d8c:	f7fe fc4b 	bl	8000626 <_isatty>
 8001d90:	1c43      	adds	r3, r0, #1
 8001d92:	d102      	bne.n	8001d9a <_isatty_r+0x1a>
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	b103      	cbz	r3, 8001d9a <_isatty_r+0x1a>
 8001d98:	602b      	str	r3, [r5, #0]
 8001d9a:	bd38      	pop	{r3, r4, r5, pc}
 8001d9c:	2000008c 	.word	0x2000008c

08001da0 <_lseek_r>:
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	4c07      	ldr	r4, [pc, #28]	; (8001dc0 <_lseek_r+0x20>)
 8001da4:	4605      	mov	r5, r0
 8001da6:	4608      	mov	r0, r1
 8001da8:	4611      	mov	r1, r2
 8001daa:	2200      	movs	r2, #0
 8001dac:	6022      	str	r2, [r4, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f7fe fc43 	bl	800063a <_lseek>
 8001db4:	1c43      	adds	r3, r0, #1
 8001db6:	d102      	bne.n	8001dbe <_lseek_r+0x1e>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	b103      	cbz	r3, 8001dbe <_lseek_r+0x1e>
 8001dbc:	602b      	str	r3, [r5, #0]
 8001dbe:	bd38      	pop	{r3, r4, r5, pc}
 8001dc0:	2000008c 	.word	0x2000008c

08001dc4 <__malloc_lock>:
 8001dc4:	4770      	bx	lr

08001dc6 <__malloc_unlock>:
 8001dc6:	4770      	bx	lr

08001dc8 <_read_r>:
 8001dc8:	b538      	push	{r3, r4, r5, lr}
 8001dca:	4c07      	ldr	r4, [pc, #28]	; (8001de8 <_read_r+0x20>)
 8001dcc:	4605      	mov	r5, r0
 8001dce:	4608      	mov	r0, r1
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	6022      	str	r2, [r4, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f7fe fbd2 	bl	8000580 <_read>
 8001ddc:	1c43      	adds	r3, r0, #1
 8001dde:	d102      	bne.n	8001de6 <_read_r+0x1e>
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	b103      	cbz	r3, 8001de6 <_read_r+0x1e>
 8001de4:	602b      	str	r3, [r5, #0]
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
 8001de8:	2000008c 	.word	0x2000008c

08001dec <_init>:
 8001dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dee:	bf00      	nop
 8001df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001df2:	bc08      	pop	{r3}
 8001df4:	469e      	mov	lr, r3
 8001df6:	4770      	bx	lr

08001df8 <_fini>:
 8001df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfa:	bf00      	nop
 8001dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfe:	bc08      	pop	{r3}
 8001e00:	469e      	mov	lr, r3
 8001e02:	4770      	bx	lr
