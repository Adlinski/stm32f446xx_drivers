
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ebc  08000ebc  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ebc  08000ebc  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08000ebc  08000ebc  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ebc  08000ebc  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ebc  08000ebc  00010ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ec0  08000ec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08000ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000034  08000ef8  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000ef8  00020074  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ecb  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005fc  00000000  00000000  00021f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000190  00000000  00000000  00022528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000148  00000000  00000000  000226b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002fd7  00000000  00000000  00022800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000019a4  00000000  00000000  000257d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000be3a  00000000  00000000  0002717b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00032fb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000554  00000000  00000000  00033030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000034 	.word	0x20000034
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ea4 	.word	0x08000ea4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000038 	.word	0x20000038
 8000200:	08000ea4 	.word	0x08000ea4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIO_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d157      	bne.n	80002d6 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a59      	ldr	r2, [pc, #356]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a56      	ldr	r2, [pc, #344]	; (8000398 <GPIO_PeriClockControl+0x184>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a51      	ldr	r2, [pc, #324]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4d      	ldr	r2, [pc, #308]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a48      	ldr	r2, [pc, #288]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a44      	ldr	r2, [pc, #272]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <GPIO_PeriClockControl+0x198>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d15d      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <GPIO_PeriClockControl+0x17c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <GPIO_PeriClockControl+0x184>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x180>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a25      	ldr	r2, [pc, #148]	; (800039c <GPIO_PeriClockControl+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <GPIO_PeriClockControl+0x18c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <GPIO_PeriClockControl+0x190>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <GPIO_PeriClockControl+0x194>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <GPIO_PeriClockControl+0x198>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x180>)
 8000368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <GPIO_PeriClockControl+0x19c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x180>)
 800037e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00

080003b4 <GPIO_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]

	/* Enable peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff24 	bl	8000214 <GPIO_PeriClockControl>

	/* GPIO pin mode configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	795b      	ldrb	r3, [r3, #5]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d822      	bhi.n	800041a <GPIO_Init+0x66>
	{
		/* Non interrupt mode */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	461a      	mov	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing pin
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	2103      	movs	r1, #3
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	43db      	mvns	r3, r3
 80003fa:	4619      	mov	r1, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	400a      	ands	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;//Setting pin
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	6819      	ldr	r1, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	697a      	ldr	r2, [r7, #20]
 8000410:	430a      	orrs	r2, r1
 8000412:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
 8000418:	e0c1      	b.n	800059e <GPIO_Init+0x1ea>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	795b      	ldrb	r3, [r3, #5]
 800041e:	2b04      	cmp	r3, #4
 8000420:	d117      	bne.n	8000452 <GPIO_Init+0x9e>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000422:	4b47      	ldr	r3, [pc, #284]	; (8000540 <GPIO_Init+0x18c>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7912      	ldrb	r2, [r2, #4]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	4611      	mov	r1, r2
 8000432:	4a43      	ldr	r2, [pc, #268]	; (8000540 <GPIO_Init+0x18c>)
 8000434:	430b      	orrs	r3, r1
 8000436:	60d3      	str	r3, [r2, #12]
			/* Clear corresponding RTSR bit */
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000438:	4b41      	ldr	r3, [pc, #260]	; (8000540 <GPIO_Init+0x18c>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	43d2      	mvns	r2, r2
 8000448:	4611      	mov	r1, r2
 800044a:	4a3d      	ldr	r2, [pc, #244]	; (8000540 <GPIO_Init+0x18c>)
 800044c:	400b      	ands	r3, r1
 800044e:	6093      	str	r3, [r2, #8]
 8000450:	e035      	b.n	80004be <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	795b      	ldrb	r3, [r3, #5]
 8000456:	2b05      	cmp	r3, #5
 8000458:	d117      	bne.n	800048a <GPIO_Init+0xd6>
		{
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045a:	4b39      	ldr	r3, [pc, #228]	; (8000540 <GPIO_Init+0x18c>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	7912      	ldrb	r2, [r2, #4]
 8000462:	4611      	mov	r1, r2
 8000464:	2201      	movs	r2, #1
 8000466:	408a      	lsls	r2, r1
 8000468:	4611      	mov	r1, r2
 800046a:	4a35      	ldr	r2, [pc, #212]	; (8000540 <GPIO_Init+0x18c>)
 800046c:	430b      	orrs	r3, r1
 800046e:	6093      	str	r3, [r2, #8]
			/* Clear corresponding FTSR bit */
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000470:	4b33      	ldr	r3, [pc, #204]	; (8000540 <GPIO_Init+0x18c>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	7912      	ldrb	r2, [r2, #4]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	43d2      	mvns	r2, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a2f      	ldr	r2, [pc, #188]	; (8000540 <GPIO_Init+0x18c>)
 8000484:	400b      	ands	r3, r1
 8000486:	60d3      	str	r3, [r2, #12]
 8000488:	e019      	b.n	80004be <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	795b      	ldrb	r3, [r3, #5]
 800048e:	2b06      	cmp	r3, #6
 8000490:	d115      	bne.n	80004be <GPIO_Init+0x10a>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000492:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <GPIO_Init+0x18c>)
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7912      	ldrb	r2, [r2, #4]
 800049a:	4611      	mov	r1, r2
 800049c:	2201      	movs	r2, #1
 800049e:	408a      	lsls	r2, r1
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a27      	ldr	r2, [pc, #156]	; (8000540 <GPIO_Init+0x18c>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	60d3      	str	r3, [r2, #12]
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b25      	ldr	r3, [pc, #148]	; (8000540 <GPIO_Init+0x18c>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a21      	ldr	r2, [pc, #132]	; (8000540 <GPIO_Init+0x18c>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6093      	str	r3, [r2, #8]
		}

		/* Configure GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	089b      	lsrs	r3, r3, #2
 80004c4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	791b      	ldrb	r3, [r3, #4]
 80004ca:	f003 0303 	and.w	r3, r3, #3
 80004ce:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <GPIO_Init+0x190>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d044      	beq.n	8000564 <GPIO_Init+0x1b0>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <GPIO_Init+0x194>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d02b      	beq.n	800053c <GPIO_Init+0x188>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a18      	ldr	r2, [pc, #96]	; (800054c <GPIO_Init+0x198>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d024      	beq.n	8000538 <GPIO_Init+0x184>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <GPIO_Init+0x19c>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d01d      	beq.n	8000534 <GPIO_Init+0x180>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a15      	ldr	r2, [pc, #84]	; (8000554 <GPIO_Init+0x1a0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d016      	beq.n	8000530 <GPIO_Init+0x17c>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <GPIO_Init+0x1a4>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d00f      	beq.n	800052c <GPIO_Init+0x178>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a12      	ldr	r2, [pc, #72]	; (800055c <GPIO_Init+0x1a8>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d008      	beq.n	8000528 <GPIO_Init+0x174>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a11      	ldr	r2, [pc, #68]	; (8000560 <GPIO_Init+0x1ac>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d101      	bne.n	8000524 <GPIO_Init+0x170>
 8000520:	2307      	movs	r3, #7
 8000522:	e020      	b.n	8000566 <GPIO_Init+0x1b2>
 8000524:	2300      	movs	r3, #0
 8000526:	e01e      	b.n	8000566 <GPIO_Init+0x1b2>
 8000528:	2306      	movs	r3, #6
 800052a:	e01c      	b.n	8000566 <GPIO_Init+0x1b2>
 800052c:	2305      	movs	r3, #5
 800052e:	e01a      	b.n	8000566 <GPIO_Init+0x1b2>
 8000530:	2304      	movs	r3, #4
 8000532:	e018      	b.n	8000566 <GPIO_Init+0x1b2>
 8000534:	2303      	movs	r3, #3
 8000536:	e016      	b.n	8000566 <GPIO_Init+0x1b2>
 8000538:	2302      	movs	r3, #2
 800053a:	e014      	b.n	8000566 <GPIO_Init+0x1b2>
 800053c:	2301      	movs	r3, #1
 800053e:	e012      	b.n	8000566 <GPIO_Init+0x1b2>
 8000540:	40013c00 	.word	0x40013c00
 8000544:	40020000 	.word	0x40020000
 8000548:	40020400 	.word	0x40020400
 800054c:	40020800 	.word	0x40020800
 8000550:	40020c00 	.word	0x40020c00
 8000554:	40021000 	.word	0x40021000
 8000558:	40021400 	.word	0x40021400
 800055c:	40021800 	.word	0x40021800
 8000560:	40021c00 	.word	0x40021c00
 8000564:	2300      	movs	r3, #0
 8000566:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000568:	4b5c      	ldr	r3, [pc, #368]	; (80006dc <GPIO_Init+0x328>)
 800056a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800056c:	4a5b      	ldr	r2, [pc, #364]	; (80006dc <GPIO_Init+0x328>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000574:	7c7a      	ldrb	r2, [r7, #17]
 8000576:	7cbb      	ldrb	r3, [r7, #18]
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	fa02 f103 	lsl.w	r1, r2, r3
 800057e:	4a58      	ldr	r2, [pc, #352]	; (80006e0 <GPIO_Init+0x32c>)
 8000580:	7cfb      	ldrb	r3, [r7, #19]
 8000582:	3302      	adds	r3, #2
 8000584:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/* Enable EXTI interrupt delivery using IMR */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000588:	4b56      	ldr	r3, [pc, #344]	; (80006e4 <GPIO_Init+0x330>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	7912      	ldrb	r2, [r2, #4]
 8000590:	4611      	mov	r1, r2
 8000592:	2201      	movs	r2, #1
 8000594:	408a      	lsls	r2, r1
 8000596:	4611      	mov	r1, r2
 8000598:	4a52      	ldr	r2, [pc, #328]	; (80006e4 <GPIO_Init+0x330>)
 800059a:	430b      	orrs	r3, r1
 800059c:	6013      	str	r3, [r2, #0]
	}

	/* GPIO pin speed configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	799b      	ldrb	r3, [r3, #6]
 80005a2:	461a      	mov	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689a      	ldr	r2, [r3, #8]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	2103      	movs	r1, #3
 80005be:	fa01 f303 	lsl.w	r3, r1, r3
 80005c2:	43db      	mvns	r3, r3
 80005c4:	4619      	mov	r1, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	400a      	ands	r2, r1
 80005cc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6899      	ldr	r1, [r3, #8]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	430a      	orrs	r2, r1
 80005dc:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]

	/* GPIO pull up/down settings configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	79db      	ldrb	r3, [r3, #7]
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	68da      	ldr	r2, [r3, #12]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	2103      	movs	r1, #3
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	4619      	mov	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	400a      	ands	r2, r1
 8000610:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68d9      	ldr	r1, [r3, #12]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	430a      	orrs	r2, r1
 8000620:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]

	/* GPIO output type configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7a1b      	ldrb	r3, [r3, #8]
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	4619      	mov	r1, r3
 8000642:	2301      	movs	r3, #1
 8000644:	408b      	lsls	r3, r1
 8000646:	43db      	mvns	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	400a      	ands	r2, r1
 8000650:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	6859      	ldr	r1, [r3, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	430a      	orrs	r2, r1
 8000660:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]

	/* GPIO alt functionality configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	795b      	ldrb	r3, [r3, #5]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d131      	bne.n	80006d2 <GPIO_Init+0x31e>
	{
		/* Alt functionality registers configuration */
		uint8_t afrBitNum, afrLowHighReg;

		afrLowHighReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	08db      	lsrs	r3, r3, #3
 8000674:	743b      	strb	r3, [r7, #16]
		afrBitNum = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] &= ~(0xF << (4 * afrBitNum));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	7c3a      	ldrb	r2, [r7, #16]
 8000686:	3208      	adds	r2, #8
 8000688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	220f      	movs	r2, #15
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	7c3a      	ldrb	r2, [r7, #16]
 80006a0:	4001      	ands	r1, r0
 80006a2:	3208      	adds	r2, #8
 80006a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * afrBitNum);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	7c3a      	ldrb	r2, [r7, #16]
 80006ae:	3208      	adds	r2, #8
 80006b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7a5b      	ldrb	r3, [r3, #9]
 80006b8:	461a      	mov	r2, r3
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7c3a      	ldrb	r2, [r7, #16]
 80006ca:	4301      	orrs	r1, r0
 80006cc:	3208      	adds	r2, #8
 80006ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006d2:	bf00      	nop
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40013800 	.word	0x40013800
 80006e4:	40013c00 	.word	0x40013c00

080006e8 <GPIO_ReadFromInputPin>:
 *
 * @Note			- 0 or 1
 *
 *****************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t )((pGPIOx->IDR >> PinNumber) & 0x00000001 );
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	691a      	ldr	r2, [r3, #16]
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	fa22 f303 	lsr.w	r3, r2, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	73fb      	strb	r3, [r7, #15]

	return value;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3714      	adds	r7, #20
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
	...

08000714 <USART_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d141      	bne.n	80007aa <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a43      	ldr	r2, [pc, #268]	; (8000838 <USART_PeriClockControl+0x124>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 800072e:	4b43      	ldr	r3, [pc, #268]	; (800083c <USART_PeriClockControl+0x128>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	4a42      	ldr	r2, [pc, #264]	; (800083c <USART_PeriClockControl+0x128>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 800073a:	e077      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a40      	ldr	r2, [pc, #256]	; (8000840 <USART_PeriClockControl+0x12c>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000744:	4b3d      	ldr	r3, [pc, #244]	; (800083c <USART_PeriClockControl+0x128>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a3c      	ldr	r2, [pc, #240]	; (800083c <USART_PeriClockControl+0x128>)
 800074a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000750:	e06c      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a3b      	ldr	r2, [pc, #236]	; (8000844 <USART_PeriClockControl+0x130>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d106      	bne.n	8000768 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 800075a:	4b38      	ldr	r3, [pc, #224]	; (800083c <USART_PeriClockControl+0x128>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a37      	ldr	r2, [pc, #220]	; (800083c <USART_PeriClockControl+0x128>)
 8000760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000766:	e061      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a37      	ldr	r2, [pc, #220]	; (8000848 <USART_PeriClockControl+0x134>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d106      	bne.n	800077e <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <USART_PeriClockControl+0x128>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a31      	ldr	r2, [pc, #196]	; (800083c <USART_PeriClockControl+0x128>)
 8000776:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800077c:	e056      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a32      	ldr	r2, [pc, #200]	; (800084c <USART_PeriClockControl+0x138>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d106      	bne.n	8000794 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <USART_PeriClockControl+0x128>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a2c      	ldr	r2, [pc, #176]	; (800083c <USART_PeriClockControl+0x128>)
 800078c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000792:	e04b      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a2e      	ldr	r2, [pc, #184]	; (8000850 <USART_PeriClockControl+0x13c>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d147      	bne.n	800082c <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <USART_PeriClockControl+0x128>)
 800079e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a0:	4a26      	ldr	r2, [pc, #152]	; (800083c <USART_PeriClockControl+0x128>)
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007a8:	e040      	b.n	800082c <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a22      	ldr	r2, [pc, #136]	; (8000838 <USART_PeriClockControl+0x124>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d106      	bne.n	80007c0 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 80007b2:	4b22      	ldr	r3, [pc, #136]	; (800083c <USART_PeriClockControl+0x128>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	4a21      	ldr	r2, [pc, #132]	; (800083c <USART_PeriClockControl+0x128>)
 80007b8:	f023 0310 	bic.w	r3, r3, #16
 80007bc:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007be:	e035      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <USART_PeriClockControl+0x12c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d106      	bne.n	80007d6 <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <USART_PeriClockControl+0x128>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <USART_PeriClockControl+0x128>)
 80007ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007d4:	e02a      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <USART_PeriClockControl+0x130>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d106      	bne.n	80007ec <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <USART_PeriClockControl+0x128>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <USART_PeriClockControl+0x128>)
 80007e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007ea:	e01f      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <USART_PeriClockControl+0x134>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d106      	bne.n	8000802 <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <USART_PeriClockControl+0x128>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	4a10      	ldr	r2, [pc, #64]	; (800083c <USART_PeriClockControl+0x128>)
 80007fa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000800:	e014      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a11      	ldr	r2, [pc, #68]	; (800084c <USART_PeriClockControl+0x138>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d106      	bne.n	8000818 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <USART_PeriClockControl+0x128>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a0b      	ldr	r2, [pc, #44]	; (800083c <USART_PeriClockControl+0x128>)
 8000810:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000816:	e009      	b.n	800082c <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <USART_PeriClockControl+0x13c>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d105      	bne.n	800082c <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <USART_PeriClockControl+0x128>)
 8000822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000824:	4a05      	ldr	r2, [pc, #20]	; (800083c <USART_PeriClockControl+0x128>)
 8000826:	f023 0320 	bic.w	r3, r3, #32
 800082a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40011000 	.word	0x40011000
 800083c:	40023800 	.word	0x40023800
 8000840:	40004400 	.word	0x40004400
 8000844:	40004800 	.word	0x40004800
 8000848:	40004c00 	.word	0x40004c00
 800084c:	40005000 	.word	0x40005000
 8000850:	40011400 	.word	0x40011400

08000854 <USART_PeripheralControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d106      	bne.n	8000874 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000872:	e005      	b.n	8000880 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	60da      	str	r2, [r3, #12]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <USART_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b084      	sub	sp, #16
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]

	/* CR1 Configuration */
	/* Enabling clock for U(S)ART peripheral */
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2101      	movs	r1, #1
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff39 	bl	8000714 <USART_PeriClockControl>

	/* Enabling USART Tx and Rx engines according to the USART Mode Config. item */
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d104      	bne.n	80008b4 <USART_Init+0x2a>
	{
		/* Enabling Receiver bit field */
		tempreg |= (1 << USART_CR1_RE);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e014      	b.n	80008de <USART_Init+0x54>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <USART_Init+0x3c>
	{
		/* Enabling Transmitter bit field */
		tempreg |= (1 << USART_CR1_TE);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	e00b      	b.n	80008de <USART_Init+0x54>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d107      	bne.n	80008de <USART_Init+0x54>
	{
		/* Enabling both, Transmitter and Receiver bit fields */
		tempreg |= (1 << USART_CR1_TE);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR1_RE);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	60fb      	str	r3, [r7, #12]
	}

	/* Configuring Word Length configuration item */
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7b5b      	ldrb	r3, [r3, #13]
 80008e2:	031b      	lsls	r3, r3, #12
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]

	/* Parity control bit fields control */
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7b9b      	ldrb	r3, [r3, #14]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d104      	bne.n	80008fe <USART_Init+0x74>
	{
		/* Enabling parity control. EVEN parity select by default */
		tempreg |= (1 << USART_CR1_PCE);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	e00b      	b.n	8000916 <USART_Init+0x8c>

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7b9b      	ldrb	r3, [r3, #14]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d107      	bne.n	8000916 <USART_Init+0x8c>
	{
		/* Enabling parity control */
	    tempreg |= (1 << USART_CR1_PCE);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090c:	60fb      	str	r3, [r7, #12]

	    /* Enabling ODD parity */
	    tempreg |= (1 << USART_CR1_PS);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000914:	60fb      	str	r3, [r7, #12]
	}

	/* Programming CR1 register */
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	60da      	str	r2, [r3, #12]


	/* CR2 Configuration */
	tempreg=0;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]

	/* Configuring number of STOP bits inserted during USART frame transmission */
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	7b1b      	ldrb	r3, [r3, #12]
 8000926:	031b      	lsls	r3, r3, #12
 8000928:	461a      	mov	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

	/* Programming CR2 register */
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	611a      	str	r2, [r3, #16]


	/* CR3 Configuration */
	tempreg=0;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]

	/* USART Hardware Flow control Configuration */
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7bdb      	ldrb	r3, [r3, #15]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d104      	bne.n	800094e <USART_Init+0xc4>
	{
		/* Enabling CTS Flow control */
		tempreg |= (1 << USART_CR3_CTSE);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	e014      	b.n	8000978 <USART_Init+0xee>
	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7bdb      	ldrb	r3, [r3, #15]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d104      	bne.n	8000960 <USART_Init+0xd6>
	{
		/* Enabling RTS flow control */
		tempreg |= (1 << USART_CR3_RTSE);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e00b      	b.n	8000978 <USART_Init+0xee>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7bdb      	ldrb	r3, [r3, #15]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d107      	bne.n	8000978 <USART_Init+0xee>
	{
		/* Enabling both CTS and RTS Flow control */
		tempreg |= (1 << USART_CR3_CTSE);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096e:	60fb      	str	r3, [r7, #12]
	    tempreg |= (1 << USART_CR3_RTSE);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000976:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	615a      	str	r2, [r3, #20]

	/* Configuring Baudrate */
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4619      	mov	r1, r3
 800098a:	4610      	mov	r0, r2
 800098c:	f000 f864 	bl	8000a58 <USART_SetBaudRate>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <USART_GetFlagStatus>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <USART_SendData>:
 *
 * @Note 			  - None
 *
 *****************************************************************/
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Length)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

	/* Looping over until "Length" of bytes are transferred */
	for(uint32_t i = 0 ; i < Length; i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	e031      	b.n	8000a34 <USART_SendData+0x76>
	{
		/* Waiting till TXE flag is set in SR */
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 80009d0:	bf00      	nop
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffdd 	bl	8000998 <USART_GetFlagStatus>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0f6      	beq.n	80009d2 <USART_SendData+0x14>

		/* Checking USART_WordLength item for 9BIT or 8BIT in a frame */
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	7b5b      	ldrb	r3, [r3, #13]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d118      	bne.n	8000a1e <USART_SendData+0x60>
		{
			/* If 9BIT, load DR with 2 bytes masking the bits other than first 9 bits */
			pdata = (uint16_t*) pTxBuffer;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009fe:	605a      	str	r2, [r3, #4]

			/* Checking for USART ParityControl */
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	7b9b      	ldrb	r3, [r3, #14]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d106      	bne.n	8000a16 <USART_SendData+0x58>
			{
				/* No parity is used in this transfer. 9bits of user data will be sent */
				pTxBuffer++;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	e00b      	b.n	8000a2e <USART_SendData+0x70>
			}
			else
			{
				/* Parity bit is used in this transfer. 8bits of user data will be sent */
				pTxBuffer++;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	e007      	b.n	8000a2e <USART_SendData+0x70>
			}
		}
		else
		{
			/* 8bit data transfer */
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]

			/* Increment buffer address */
			pTxBuffer++;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Length; i++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d3c9      	bcc.n	80009d0 <USART_SendData+0x12>
		}
	}

	/* Waiting till TC flag is set in SR */
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000a3c:	bf00      	nop
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2140      	movs	r1, #64	; 0x40
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ffa7 	bl	8000998 <USART_GetFlagStatus>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f6      	beq.n	8000a3e <USART_SendData+0x80>
}
 8000a50:	bf00      	nop
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <USART_SetBaudRate>:
 *
 * @Note              - None
 *
 ********************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	/* Hold Mantissa and Fraction values */
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]

	/* Getting value of APB bus clock into the variable PCLKxn */
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <USART_SetBaudRate+0xd8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d003      	beq.n	8000a76 <USART_SetBaudRate+0x1e>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a30      	ldr	r2, [pc, #192]	; (8000b34 <USART_SetBaudRate+0xdc>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d103      	bne.n	8000a7e <USART_SetBaudRate+0x26>
	{
		/* USART1 and USART6 are hanging on APB2 bus */
		PCLKx = RCC_GetPCLK2Value();
 8000a76:	f000 f8b9 	bl	8000bec <RCC_GetPCLK2Value>
 8000a7a:	61f8      	str	r0, [r7, #28]
 8000a7c:	e002      	b.n	8000a84 <USART_SetBaudRate+0x2c>
	}
	else
	{
		PCLKx = RCC_GetPCLK1Value();
 8000a7e:	f000 f85d 	bl	8000b3c <RCC_GetPCLK1Value>
 8000a82:	61f8      	str	r0, [r7, #28]
	}

	/* Checking for OVER8 configuration bit */
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00b      	beq.n	8000aa8 <USART_SetBaudRate+0x50>
	{
		/* OVER8 = 1. Over sampling by 8 */
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000a90:	69fa      	ldr	r2, [r7, #28]
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	009a      	lsls	r2, r3, #2
 8000a9a:	441a      	add	r2, r3
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	e00a      	b.n	8000abe <USART_SetBaudRate+0x66>
	}
	else
	{
		/* OVER8 = 0. Over sampling by 16 */
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000aa8:	69fa      	ldr	r2, [r7, #28]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	009a      	lsls	r2, r3, #2
 8000ab2:	441a      	add	r2, r3
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abc:	61bb      	str	r3, [r7, #24]
	}

	/* Calculating Mantissa part */
	M_part = usartdiv/100;
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <USART_SetBaudRate+0xe0>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	60fb      	str	r3, [r7, #12]

	/* Placing Mantissa part in appropriate bit position. USART_BRR */
	tempreg |= M_part << 4;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	011b      	lsls	r3, r3, #4
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]

	/* Extracting fractional part */
	F_part = (usartdiv - (M_part * 100));
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2264      	movs	r2, #100	; 0x64
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]

	/* Calculating final fractional part */
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d00a      	beq.n	8000b04 <USART_SetBaudRate+0xac>
	{
		/* OVER8 = 1. Over sampling by 8 */
		F_part = (((F_part * 8) + 50) / 100) & ((uint8_t)0x07);
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	3332      	adds	r3, #50	; 0x32
 8000af4:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <USART_SetBaudRate+0xe0>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <USART_SetBaudRate+0xc0>
	}
	else
	{
		/* OVER8 = 0. Over sampling by 16 */
		F_part = ((( F_part * 16) + 50) / 100) & ((uint8_t)0x0F);
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	3332      	adds	r3, #50	; 0x32
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <USART_SetBaudRate+0xe0>)
 8000b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b10:	095b      	lsrs	r3, r3, #5
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	617b      	str	r3, [r7, #20]
	}

	/* Placing fractional part in appropriate bit position. USART_BRR */
	tempreg |= F_part;
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]

	/* Coping value of tempreg in to BRR register */
	pUSARTx->BRR = tempreg;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	609a      	str	r2, [r3, #8]
}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40011000 	.word	0x40011000
 8000b34:	40011400 	.word	0x40011400
 8000b38:	51eb851f 	.word	0x51eb851f

08000b3c <RCC_GetPCLK1Value>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <RCC_GetPCLK1Value+0x9c>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000b50:	7a7b      	ldrb	r3, [r7, #9]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d102      	bne.n	8000b5c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <RCC_GetPCLK1Value+0xa0>)
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e00b      	b.n	8000b74 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)
 8000b5c:	7a7b      	ldrb	r3, [r7, #9]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d102      	bne.n	8000b68 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <RCC_GetPCLK1Value+0xa4>)
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e005      	b.n	8000b74 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 8000b68:	7a7b      	ldrb	r3, [r7, #9]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d102      	bne.n	8000b74 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000b6e:	f000 f895 	bl	8000c9c <RCC_GetPLLOutputClock>
 8000b72:	60f8      	str	r0, [r7, #12]
	}

	/* AHBP */
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <RCC_GetPCLK1Value+0x9c>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	091b      	lsrs	r3, r3, #4
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 030f 	and.w	r3, r3, #15
 8000b80:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000b82:	7a3b      	ldrb	r3, [r7, #8]
 8000b84:	2b07      	cmp	r3, #7
 8000b86:	d802      	bhi.n	8000b8e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	72fb      	strb	r3, [r7, #11]
 8000b8c:	e005      	b.n	8000b9a <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_Prescaler[temp-8];
 8000b8e:	7a3b      	ldrb	r3, [r7, #8]
 8000b90:	3b08      	subs	r3, #8
 8000b92:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <RCC_GetPCLK1Value+0xa8>)
 8000b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b98:	72fb      	strb	r3, [r7, #11]
	}

	/* APB1 */
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <RCC_GetPCLK1Value+0x9c>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	0a9b      	lsrs	r3, r3, #10
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000ba8:	7a3b      	ldrb	r3, [r7, #8]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d802      	bhi.n	8000bb4 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	72bb      	strb	r3, [r7, #10]
 8000bb2:	e004      	b.n	8000bbe <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APBx_Prescaler[temp-4];
 8000bb4:	7a3b      	ldrb	r3, [r7, #8]
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <RCC_GetPCLK1Value+0xac>)
 8000bba:	5cd3      	ldrb	r3, [r2, r3]
 8000bbc:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000bbe:	7afb      	ldrb	r3, [r7, #11]
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bc6:	7abb      	ldrb	r3, [r7, #10]
 8000bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bcc:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000bce:	687b      	ldr	r3, [r7, #4]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	00f42400 	.word	0x00f42400
 8000be0:	007a1200 	.word	0x007a1200
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000010 	.word	0x20000010

08000bec <RCC_GetPCLK2Value>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint32_t RCC_GetPCLK2Value(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk = 0, temp, pclk2;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]

	uint8_t clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <RCC_GetPCLK2Value+0x9c>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	747b      	strb	r3, [r7, #17]

	uint8_t ahbp,apb2p;

	if(clksrc == 0)
 8000c04:	7c7b      	ldrb	r3, [r7, #17]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <RCC_GetPCLK2Value+0x24>
	{
		SystemClk = 16000000;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <RCC_GetPCLK2Value+0xa0>)
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	e00b      	b.n	8000c28 <RCC_GetPCLK2Value+0x3c>
	}
	else if(clksrc == 1)
 8000c10:	7c7b      	ldrb	r3, [r7, #17]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d102      	bne.n	8000c1c <RCC_GetPCLK2Value+0x30>
	{
		SystemClk = 8000000;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <RCC_GetPCLK2Value+0xa4>)
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e005      	b.n	8000c28 <RCC_GetPCLK2Value+0x3c>
	}
	else if(clksrc == 2)
 8000c1c:	7c7b      	ldrb	r3, [r7, #17]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d102      	bne.n	8000c28 <RCC_GetPCLK2Value+0x3c>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000c22:	f000 f83b 	bl	8000c9c <RCC_GetPLLOutputClock>
 8000c26:	6178      	str	r0, [r7, #20]
	}

	/* AHBP */
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <RCC_GetPCLK2Value+0x9c>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	091b      	lsrs	r3, r3, #4
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	60fb      	str	r3, [r7, #12]

	if(temp < 8)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b07      	cmp	r3, #7
 8000c38:	d802      	bhi.n	8000c40 <RCC_GetPCLK2Value+0x54>
	{
		ahbp = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	74fb      	strb	r3, [r7, #19]
 8000c3e:	e005      	b.n	8000c4c <RCC_GetPCLK2Value+0x60>
	}
	else
	{
		ahbp = AHB_Prescaler[temp-8];
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3b08      	subs	r3, #8
 8000c44:	4a13      	ldr	r2, [pc, #76]	; (8000c94 <RCC_GetPCLK2Value+0xa8>)
 8000c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c4a:	74fb      	strb	r3, [r7, #19]
	}

	/* APB2 */
	temp = ((RCC->CFGR >> 13) & 0x7);
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <RCC_GetPCLK2Value+0x9c>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	0b5b      	lsrs	r3, r3, #13
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

	if(temp < 4)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d802      	bhi.n	8000c64 <RCC_GetPCLK2Value+0x78>
	{
		apb2p = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	74bb      	strb	r3, [r7, #18]
 8000c62:	e004      	b.n	8000c6e <RCC_GetPCLK2Value+0x82>
	}
	else
	{
		apb2p = APBx_Prescaler[temp-4];
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3b04      	subs	r3, #4
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <RCC_GetPCLK2Value+0xac>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	74bb      	strb	r3, [r7, #18]
	}

	pclk1 = (SystemClk / ahbp) / apb2p;
 8000c6e:	7cfb      	ldrb	r3, [r7, #19]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c76:	7cbb      	ldrb	r3, [r7, #18]
 8000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7c:	60bb      	str	r3, [r7, #8]

	return pclk2;
 8000c7e:	687b      	ldr	r3, [r7, #4]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	00f42400 	.word	0x00f42400
 8000c90:	007a1200 	.word	0x007a1200
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000010 	.word	0x20000010

08000c9c <RCC_GetPLLOutputClock>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint32_t RCC_GetPLLOutputClock(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
	/* Not used for now */
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
	...

08000cac <USART3_Init>:
/* Transmitter buffer */
char msg[32] = "STM32 U(S)ART testing..\n";


void USART3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	USART3Handle.pUSARTx = USART3;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <USART3_Init+0x3c>)
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <USART3_Init+0x40>)
 8000cb4:	601a      	str	r2, [r3, #0]
	USART3Handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <USART3_Init+0x3c>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	609a      	str	r2, [r3, #8]
	USART3Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <USART3_Init+0x3c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	73da      	strb	r2, [r3, #15]
	USART3Handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <USART3_Init+0x3c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	711a      	strb	r2, [r3, #4]
	USART3Handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <USART3_Init+0x3c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	731a      	strb	r2, [r3, #12]
	USART3Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <USART3_Init+0x3c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	735a      	strb	r2, [r3, #13]
	USART3Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <USART3_Init+0x3c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	739a      	strb	r2, [r3, #14]

	USART_Init(&USART3Handle);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <USART3_Init+0x3c>)
 8000cde:	f7ff fdd4 	bl	800088a <USART_Init>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000050 	.word	0x20000050
 8000cec:	40004800 	.word	0x40004800

08000cf0 <USART3_GPIOInit>:
/*
 * PC10-> TX
 * PC11-> RX
 */
void USART3_GPIOInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
	GPIO_Handle_t USART2Pins;

	USART2Pins.pGPIOx = GPIOC;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <USART3_GPIOInit+0x40>)
 8000cf8:	607b      	str	r3, [r7, #4]
	USART2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	727b      	strb	r3, [r7, #9]
	USART2Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	733b      	strb	r3, [r7, #12]
	USART2Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000d02:	2301      	movs	r3, #1
 8000d04:	72fb      	strb	r3, [r7, #11]
	USART2Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000d06:	2307      	movs	r3, #7
 8000d08:	737b      	strb	r3, [r7, #13]
	USART2Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	72bb      	strb	r3, [r7, #10]

	/* TX */
	USART2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8000d0e:	230a      	movs	r3, #10
 8000d10:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2Pins);
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fb4d 	bl	80003b4 <GPIO_Init>


	/* RX */
	USART2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 8000d1a:	230b      	movs	r3, #11
 8000d1c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2Pins);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fb47 	bl	80003b4 <GPIO_Init>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40020800 	.word	0x40020800

08000d34 <GPIO_ButtonInit>:


void GPIO_ButtonInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn,GpioLed;

	/* BTN GPIO Config */
	GpioBtn.pGPIOx = GPIOC;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <GPIO_ButtonInit+0x54>)
 8000d3c:	60fb      	str	r3, [r7, #12]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000d3e:	230d      	movs	r3, #13
 8000d40:	743b      	strb	r3, [r7, #16]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000d42:	2300      	movs	r3, #0
 8000d44:	747b      	strb	r3, [r7, #17]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d46:	2302      	movs	r3, #2
 8000d48:	74bb      	strb	r3, [r7, #18]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GpioBtn);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fb2e 	bl	80003b4 <GPIO_Init>

	/* LED GPIO Config */
	GpioLed.pGPIOx = GPIOA;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <GPIO_ButtonInit+0x58>)
 8000d5a:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000d5c:	2305      	movs	r3, #5
 8000d5e:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000d60:	2301      	movs	r3, #1
 8000d62:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000d64:	2302      	movs	r3, #2
 8000d66:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000d70:	2101      	movs	r1, #1
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <GPIO_ButtonInit+0x58>)
 8000d74:	f7ff fa4e 	bl	8000214 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fb1a 	bl	80003b4 <GPIO_Init>
}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <delay>:


void delay(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	e002      	b.n	8000da2 <delay+0x12>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <delay+0x24>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d9f8      	bls.n	8000d9c <delay+0xc>
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	0003d08f 	.word	0x0003d08f

08000db8 <main>:


int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	GPIO_ButtonInit();
 8000dbc:	f7ff ffba 	bl	8000d34 <GPIO_ButtonInit>

	/* USART3 Pins Initialization */
	USART3_GPIOInit();
 8000dc0:	f7ff ff96 	bl	8000cf0 <USART3_GPIOInit>

	/* USART3 Peripherals Initialization */
	USART3_Init();
 8000dc4:	f7ff ff72 	bl	8000cac <USART3_Init>

	/* Enabling USART3 Peripherals */
	USART_PeripheralControl(USART3,ENABLE);
 8000dc8:	2101      	movs	r1, #1
 8000dca:	480b      	ldr	r0, [pc, #44]	; (8000df8 <main+0x40>)
 8000dcc:	f7ff fd42 	bl	8000854 <USART_PeripheralControl>

	while(1)
	{
		/* Wait till button is pressed */
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000dd0:	bf00      	nop
 8000dd2:	210d      	movs	r1, #13
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <main+0x44>)
 8000dd6:	f7ff fc87 	bl	80006e8 <GPIO_ReadFromInputPin>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f8      	bne.n	8000dd2 <main+0x1a>

		/* De-bouncing protection */
		delay();
 8000de0:	f7ff ffd6 	bl	8000d90 <delay>

		/* Sending data over USART */
		USART_SendData(&USART3Handle, (uint8_t*)msg, strlen(msg));
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <main+0x48>)
 8000de6:	f7ff fa0d 	bl	8000204 <strlen>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	4904      	ldr	r1, [pc, #16]	; (8000e00 <main+0x48>)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <main+0x4c>)
 8000df2:	f7ff fde4 	bl	80009be <USART_SendData>
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000df6:	e7eb      	b.n	8000dd0 <main+0x18>
 8000df8:	40004800 	.word	0x40004800
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	20000014 	.word	0x20000014
 8000e04:	20000050 	.word	0x20000050

08000e08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490e      	ldr	r1, [pc, #56]	; (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0b      	ldr	r4, [pc, #44]	; (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e32:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000e36:	f000 f811 	bl	8000e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e3a:	f7ff ffbd 	bl	8000db8 <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   r0, =_estack
 8000e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000e4c:	08000ec4 	.word	0x08000ec4
  ldr r2, =_sbss
 8000e50:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000e54:	20000074 	.word	0x20000074

08000e58 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>
	...

08000e5c <__libc_init_array>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	4e0d      	ldr	r6, [pc, #52]	; (8000e94 <__libc_init_array+0x38>)
 8000e60:	4c0d      	ldr	r4, [pc, #52]	; (8000e98 <__libc_init_array+0x3c>)
 8000e62:	1ba4      	subs	r4, r4, r6
 8000e64:	10a4      	asrs	r4, r4, #2
 8000e66:	2500      	movs	r5, #0
 8000e68:	42a5      	cmp	r5, r4
 8000e6a:	d109      	bne.n	8000e80 <__libc_init_array+0x24>
 8000e6c:	4e0b      	ldr	r6, [pc, #44]	; (8000e9c <__libc_init_array+0x40>)
 8000e6e:	4c0c      	ldr	r4, [pc, #48]	; (8000ea0 <__libc_init_array+0x44>)
 8000e70:	f000 f818 	bl	8000ea4 <_init>
 8000e74:	1ba4      	subs	r4, r4, r6
 8000e76:	10a4      	asrs	r4, r4, #2
 8000e78:	2500      	movs	r5, #0
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d105      	bne.n	8000e8a <__libc_init_array+0x2e>
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
 8000e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e84:	4798      	blx	r3
 8000e86:	3501      	adds	r5, #1
 8000e88:	e7ee      	b.n	8000e68 <__libc_init_array+0xc>
 8000e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e8e:	4798      	blx	r3
 8000e90:	3501      	adds	r5, #1
 8000e92:	e7f2      	b.n	8000e7a <__libc_init_array+0x1e>
 8000e94:	08000ebc 	.word	0x08000ebc
 8000e98:	08000ebc 	.word	0x08000ebc
 8000e9c:	08000ebc 	.word	0x08000ebc
 8000ea0:	08000ec0 	.word	0x08000ec0

08000ea4 <_init>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr

08000eb0 <_fini>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr
