
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fdc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002304  08002304  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002304  08002304  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002304  08002304  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002304  08002304  00012304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002308  08002308  00012308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800230c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000068  08002374  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002374  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034e3  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000967  00000000  00000000  00023575  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000280  00000000  00000000  00023ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000228  00000000  00000000  00024160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003970  00000000  00000000  00024388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002202  00000000  00000000  00027cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c7db  00000000  00000000  00029efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000366d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010a0  00000000  00000000  00036750  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002194 	.word	0x08002194

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08002194 	.word	0x08002194

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d157      	bne.n	8000372 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a59      	ldr	r2, [pc, #356]	; (800042c <GPIO_PeriClockControl+0x17c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002ca:	4b59      	ldr	r3, [pc, #356]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ce:	4a58      	ldr	r2, [pc, #352]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80002d6:	e0a3      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a56      	ldr	r2, [pc, #344]	; (8000434 <GPIO_PeriClockControl+0x184>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002e0:	4b53      	ldr	r3, [pc, #332]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4a52      	ldr	r2, [pc, #328]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ec:	e098      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a51      	ldr	r2, [pc, #324]	; (8000438 <GPIO_PeriClockControl+0x188>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002f6:	4b4e      	ldr	r3, [pc, #312]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fa:	4a4d      	ldr	r2, [pc, #308]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000302:	e08d      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a4d      	ldr	r2, [pc, #308]	; (800043c <GPIO_PeriClockControl+0x18c>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800030c:	4b48      	ldr	r3, [pc, #288]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000310:	4a47      	ldr	r2, [pc, #284]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000318:	e082      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a48      	ldr	r2, [pc, #288]	; (8000440 <GPIO_PeriClockControl+0x190>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000322:	4b43      	ldr	r3, [pc, #268]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	4a42      	ldr	r2, [pc, #264]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032e:	e077      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a44      	ldr	r2, [pc, #272]	; (8000444 <GPIO_PeriClockControl+0x194>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000338:	4b3d      	ldr	r3, [pc, #244]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a3c      	ldr	r2, [pc, #240]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000344:	e06c      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a3f      	ldr	r2, [pc, #252]	; (8000448 <GPIO_PeriClockControl+0x198>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800034e:	4b38      	ldr	r3, [pc, #224]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a37      	ldr	r2, [pc, #220]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035a:	e061      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a3b      	ldr	r2, [pc, #236]	; (800044c <GPIO_PeriClockControl+0x19c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d15d      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000364:	4b32      	ldr	r3, [pc, #200]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a31      	ldr	r2, [pc, #196]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000370:	e056      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a2d      	ldr	r2, [pc, #180]	; (800042c <GPIO_PeriClockControl+0x17c>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800037a:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a2c      	ldr	r2, [pc, #176]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000386:	e04b      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a2a      	ldr	r2, [pc, #168]	; (8000434 <GPIO_PeriClockControl+0x184>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000390:	4b27      	ldr	r3, [pc, #156]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a26      	ldr	r2, [pc, #152]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000396:	f023 0302 	bic.w	r3, r3, #2
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039c:	e040      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a25      	ldr	r2, [pc, #148]	; (8000438 <GPIO_PeriClockControl+0x188>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a21      	ldr	r2, [pc, #132]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ac:	f023 0304 	bic.w	r3, r3, #4
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b2:	e035      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a21      	ldr	r2, [pc, #132]	; (800043c <GPIO_PeriClockControl+0x18c>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003c2:	f023 0308 	bic.w	r3, r3, #8
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c8:	e02a      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <GPIO_PeriClockControl+0x190>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a16      	ldr	r2, [pc, #88]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003d8:	f023 0310 	bic.w	r3, r3, #16
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003de:	e01f      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <GPIO_PeriClockControl+0x194>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ee:	f023 0320 	bic.w	r3, r3, #32
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f4:	e014      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a13      	ldr	r2, [pc, #76]	; (8000448 <GPIO_PeriClockControl+0x198>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040a:	e009      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a0f      	ldr	r2, [pc, #60]	; (800044c <GPIO_PeriClockControl+0x19c>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d105      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a05      	ldr	r2, [pc, #20]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800041a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40020000 	.word	0x40020000
 8000430:	40023800 	.word	0x40023800
 8000434:	40020400 	.word	0x40020400
 8000438:	40020800 	.word	0x40020800
 800043c:	40020c00 	.word	0x40020c00
 8000440:	40021000 	.word	0x40021000
 8000444:	40021400 	.word	0x40021400
 8000448:	40021800 	.word	0x40021800
 800044c:	40021c00 	.word	0x40021c00

08000450 <GPIO_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]

	/* Enable peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff24 	bl	80002b0 <GPIO_PeriClockControl>

	/* GPIO pin mode configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d822      	bhi.n	80004b6 <GPIO_Init+0x66>
	{
		/* Non interrupt mode */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing pin
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	2103      	movs	r1, #3
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	43db      	mvns	r3, r3
 8000496:	4619      	mov	r1, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	400a      	ands	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;//Setting pin
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	6819      	ldr	r1, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	697a      	ldr	r2, [r7, #20]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
		temp = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e0c1      	b.n	800063a <GPIO_Init+0x1ea>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d117      	bne.n	80004ee <GPIO_Init+0x9e>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	4b47      	ldr	r3, [pc, #284]	; (80005dc <GPIO_Init+0x18c>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a43      	ldr	r2, [pc, #268]	; (80005dc <GPIO_Init+0x18c>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	60d3      	str	r3, [r2, #12]
			/* Clear corresponding RTSR bit */
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d4:	4b41      	ldr	r3, [pc, #260]	; (80005dc <GPIO_Init+0x18c>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7912      	ldrb	r2, [r2, #4]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	43d2      	mvns	r2, r2
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a3d      	ldr	r2, [pc, #244]	; (80005dc <GPIO_Init+0x18c>)
 80004e8:	400b      	ands	r3, r1
 80004ea:	6093      	str	r3, [r2, #8]
 80004ec:	e035      	b.n	800055a <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	795b      	ldrb	r3, [r3, #5]
 80004f2:	2b05      	cmp	r3, #5
 80004f4:	d117      	bne.n	8000526 <GPIO_Init+0xd6>
		{
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f6:	4b39      	ldr	r3, [pc, #228]	; (80005dc <GPIO_Init+0x18c>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	4611      	mov	r1, r2
 8000506:	4a35      	ldr	r2, [pc, #212]	; (80005dc <GPIO_Init+0x18c>)
 8000508:	430b      	orrs	r3, r1
 800050a:	6093      	str	r3, [r2, #8]
			/* Clear corresponding FTSR bit */
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050c:	4b33      	ldr	r3, [pc, #204]	; (80005dc <GPIO_Init+0x18c>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	7912      	ldrb	r2, [r2, #4]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	43d2      	mvns	r2, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a2f      	ldr	r2, [pc, #188]	; (80005dc <GPIO_Init+0x18c>)
 8000520:	400b      	ands	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]
 8000524:	e019      	b.n	800055a <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	2b06      	cmp	r3, #6
 800052c:	d115      	bne.n	800055a <GPIO_Init+0x10a>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <GPIO_Init+0x18c>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	4611      	mov	r1, r2
 800053e:	4a27      	ldr	r2, [pc, #156]	; (80005dc <GPIO_Init+0x18c>)
 8000540:	430b      	orrs	r3, r1
 8000542:	60d3      	str	r3, [r2, #12]
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <GPIO_Init+0x18c>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7912      	ldrb	r2, [r2, #4]
 800054c:	4611      	mov	r1, r2
 800054e:	2201      	movs	r2, #1
 8000550:	408a      	lsls	r2, r1
 8000552:	4611      	mov	r1, r2
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <GPIO_Init+0x18c>)
 8000556:	430b      	orrs	r3, r1
 8000558:	6093      	str	r3, [r2, #8]
		}

		/* Configure GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	089b      	lsrs	r3, r3, #2
 8000560:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	f003 0303 	and.w	r3, r3, #3
 800056a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <GPIO_Init+0x190>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d044      	beq.n	8000600 <GPIO_Init+0x1b0>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <GPIO_Init+0x194>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d02b      	beq.n	80005d8 <GPIO_Init+0x188>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <GPIO_Init+0x198>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d024      	beq.n	80005d4 <GPIO_Init+0x184>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a17      	ldr	r2, [pc, #92]	; (80005ec <GPIO_Init+0x19c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d01d      	beq.n	80005d0 <GPIO_Init+0x180>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <GPIO_Init+0x1a0>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d016      	beq.n	80005cc <GPIO_Init+0x17c>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <GPIO_Init+0x1a4>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d00f      	beq.n	80005c8 <GPIO_Init+0x178>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <GPIO_Init+0x1a8>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d008      	beq.n	80005c4 <GPIO_Init+0x174>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a11      	ldr	r2, [pc, #68]	; (80005fc <GPIO_Init+0x1ac>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d101      	bne.n	80005c0 <GPIO_Init+0x170>
 80005bc:	2307      	movs	r3, #7
 80005be:	e020      	b.n	8000602 <GPIO_Init+0x1b2>
 80005c0:	2300      	movs	r3, #0
 80005c2:	e01e      	b.n	8000602 <GPIO_Init+0x1b2>
 80005c4:	2306      	movs	r3, #6
 80005c6:	e01c      	b.n	8000602 <GPIO_Init+0x1b2>
 80005c8:	2305      	movs	r3, #5
 80005ca:	e01a      	b.n	8000602 <GPIO_Init+0x1b2>
 80005cc:	2304      	movs	r3, #4
 80005ce:	e018      	b.n	8000602 <GPIO_Init+0x1b2>
 80005d0:	2303      	movs	r3, #3
 80005d2:	e016      	b.n	8000602 <GPIO_Init+0x1b2>
 80005d4:	2302      	movs	r3, #2
 80005d6:	e014      	b.n	8000602 <GPIO_Init+0x1b2>
 80005d8:	2301      	movs	r3, #1
 80005da:	e012      	b.n	8000602 <GPIO_Init+0x1b2>
 80005dc:	40013c00 	.word	0x40013c00
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40020800 	.word	0x40020800
 80005ec:	40020c00 	.word	0x40020c00
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40021400 	.word	0x40021400
 80005f8:	40021800 	.word	0x40021800
 80005fc:	40021c00 	.word	0x40021c00
 8000600:	2300      	movs	r3, #0
 8000602:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000604:	4b5c      	ldr	r3, [pc, #368]	; (8000778 <GPIO_Init+0x328>)
 8000606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000608:	4a5b      	ldr	r2, [pc, #364]	; (8000778 <GPIO_Init+0x328>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000610:	7c7a      	ldrb	r2, [r7, #17]
 8000612:	7cbb      	ldrb	r3, [r7, #18]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	fa02 f103 	lsl.w	r1, r2, r3
 800061a:	4a58      	ldr	r2, [pc, #352]	; (800077c <GPIO_Init+0x32c>)
 800061c:	7cfb      	ldrb	r3, [r7, #19]
 800061e:	3302      	adds	r3, #2
 8000620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/* Enable EXTI interrupt delivery using IMR */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000624:	4b56      	ldr	r3, [pc, #344]	; (8000780 <GPIO_Init+0x330>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	4611      	mov	r1, r2
 8000634:	4a52      	ldr	r2, [pc, #328]	; (8000780 <GPIO_Init+0x330>)
 8000636:	430b      	orrs	r3, r1
 8000638:	6013      	str	r3, [r2, #0]
	}

	/* GPIO pin speed configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	799b      	ldrb	r3, [r3, #6]
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2103      	movs	r1, #3
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	400a      	ands	r2, r1
 8000668:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6899      	ldr	r1, [r3, #8]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	430a      	orrs	r2, r1
 8000678:	609a      	str	r2, [r3, #8]
	temp = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

	/* GPIO pull up/down settings configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	79db      	ldrb	r3, [r3, #7]
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	2103      	movs	r1, #3
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	4619      	mov	r1, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	400a      	ands	r2, r1
 80006ac:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	68d9      	ldr	r1, [r3, #12]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	430a      	orrs	r2, r1
 80006bc:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]

	/* GPIO output type configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7a1b      	ldrb	r3, [r3, #8]
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	4619      	mov	r1, r3
 80006de:	2301      	movs	r3, #1
 80006e0:	408b      	lsls	r3, r1
 80006e2:	43db      	mvns	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	400a      	ands	r2, r1
 80006ec:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6859      	ldr	r1, [r3, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	605a      	str	r2, [r3, #4]
	temp = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

	/* GPIO alt functionality configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	795b      	ldrb	r3, [r3, #5]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d131      	bne.n	800076e <GPIO_Init+0x31e>
	{
		/* Alt functionality registers configuration */
		uint8_t afrBitNum, afrLowHighReg;

		afrLowHighReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	743b      	strb	r3, [r7, #16]
		afrBitNum = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] &= ~(0xF << (4 * afrBitNum));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	7c3a      	ldrb	r2, [r7, #16]
 8000722:	3208      	adds	r2, #8
 8000724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	220f      	movs	r2, #15
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43db      	mvns	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	7c3a      	ldrb	r2, [r7, #16]
 800073c:	4001      	ands	r1, r0
 800073e:	3208      	adds	r2, #8
 8000740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * afrBitNum);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	7c3a      	ldrb	r2, [r7, #16]
 800074a:	3208      	adds	r2, #8
 800074c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7a5b      	ldrb	r3, [r3, #9]
 8000754:	461a      	mov	r2, r3
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	7c3a      	ldrb	r2, [r7, #16]
 8000766:	4301      	orrs	r1, r0
 8000768:	3208      	adds	r2, #8
 800076a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40013800 	.word	0x40013800
 8000780:	40013c00 	.word	0x40013c00

08000784 <GPIO_ReadFromInputPin>:
 *
 * @Note			- 0 or 1
 *
 *****************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t )((pGPIOx->IDR >> PinNumber) & 0x00000001 );
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691a      	ldr	r2, [r3, #16]
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	fa22 f303 	lsr.w	r3, r2, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	73fb      	strb	r3, [r7, #15]

	return value;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
	...

080007b0 <SPI_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d12b      	bne.n	800081a <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a2d      	ldr	r2, [pc, #180]	; (800087c <SPI_PeriClockControl+0xcc>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <SPI_PeriClockControl+0xd0>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <SPI_PeriClockControl+0xd0>)
 80007d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 80007d6:	e04b      	b.n	8000870 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <SPI_PeriClockControl+0xd4>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <SPI_PeriClockControl+0xd0>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <SPI_PeriClockControl+0xd0>)
 80007e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007ec:	e040      	b.n	8000870 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a25      	ldr	r2, [pc, #148]	; (8000888 <SPI_PeriClockControl+0xd8>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d106      	bne.n	8000804 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SPI_PeriClockControl+0xd0>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <SPI_PeriClockControl+0xd0>)
 80007fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000802:	e035      	b.n	8000870 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a21      	ldr	r2, [pc, #132]	; (800088c <SPI_PeriClockControl+0xdc>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d131      	bne.n	8000870 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <SPI_PeriClockControl+0xd0>)
 800080e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <SPI_PeriClockControl+0xd0>)
 8000812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000816:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000818:	e02a      	b.n	8000870 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a17      	ldr	r2, [pc, #92]	; (800087c <SPI_PeriClockControl+0xcc>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <SPI_PeriClockControl+0xd0>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <SPI_PeriClockControl+0xd0>)
 8000828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800082e:	e01f      	b.n	8000870 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <SPI_PeriClockControl+0xd4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d106      	bne.n	8000846 <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <SPI_PeriClockControl+0xd0>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a10      	ldr	r2, [pc, #64]	; (8000880 <SPI_PeriClockControl+0xd0>)
 800083e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000844:	e014      	b.n	8000870 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <SPI_PeriClockControl+0xd8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <SPI_PeriClockControl+0xd0>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <SPI_PeriClockControl+0xd0>)
 8000854:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
}
 800085a:	e009      	b.n	8000870 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a0b      	ldr	r2, [pc, #44]	; (800088c <SPI_PeriClockControl+0xdc>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d105      	bne.n	8000870 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SPI_PeriClockControl+0xd0>)
 8000866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <SPI_PeriClockControl+0xd0>)
 800086a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800086e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40013000 	.word	0x40013000
 8000880:	40023800 	.word	0x40023800
 8000884:	40003800 	.word	0x40003800
 8000888:	40003c00 	.word	0x40003c00
 800088c:	40013400 	.word	0x40013400

08000890 <SPI_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	/* SPI_CR1 register configuration */
	uint32_t tempreg = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]

	/* Enable peripheral clock */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff84 	bl	80007b0 <SPI_PeriClockControl>

	/* Device mode configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]

	/* Bus configuration */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d104      	bne.n	80008c8 <SPI_Init+0x38>
	{
		/* Bidirectional mode clear */
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	e014      	b.n	80008f2 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d104      	bne.n	80008da <SPI_Init+0x4a>
	{
		/* Bidirectional mode set */
		tempreg |= (1 << SPI_CR1_BIDI_MODE);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	e00b      	b.n	80008f2 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	795b      	ldrb	r3, [r3, #5]
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d107      	bne.n	80008f2 <SPI_Init+0x62>
	{
		/* Bidirectional mode clear */
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008e8:	60fb      	str	r3, [r7, #12]

		/* Rx only mode set */
		tempreg |= (1 << SPI_CR1_RX_ONLY);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f0:	60fb      	str	r3, [r7, #12]
	}

	/* SPI serial clock speed (baud rate) configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	799b      	ldrb	r3, [r3, #6]
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	461a      	mov	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]

	/* DFF configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	79db      	ldrb	r3, [r3, #7]
 8000904:	02db      	lsls	r3, r3, #11
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4313      	orrs	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]

	/* CPOL configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7a1b      	ldrb	r3, [r3, #8]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	461a      	mov	r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4313      	orrs	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	/* CPHA configuration */
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7a5b      	ldrb	r3, [r3, #9]
 8000920:	461a      	mov	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4313      	orrs	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]

	/* Save temperg in CR1 register */
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	601a      	str	r2, [r3, #0]

}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <SPI_GetFlagStatus>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	4013      	ands	r3, r2
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <SPI_SendDataInterruptMode>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint8_t SPI_SendDataInterruptMode(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Length)
{
 800095e:	b480      	push	{r7}
 8000960:	b087      	sub	sp, #28
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d010      	beq.n	8000998 <SPI_SendDataInterruptMode+0x3a>
	{
		/* Save Tx buffer address and length information in global variables */
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Length;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	615a      	str	r2, [r3, #20]

		/* Mark SPI state as busy so that no other code can take over SPI peripheral until transmission is over */
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2202      	movs	r2, #2
 8000986:	61da      	str	r2, [r3, #28]

		/* Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR */
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000996:	605a      	str	r2, [r3, #4]
	}
	/* DBG->Data transmission*/
	return state;
 8000998:	7dfb      	ldrb	r3, [r7, #23]
}
 800099a:	4618      	mov	r0, r3
 800099c:	371c      	adds	r7, #28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <SPI_ReceiveDataInterruptMode>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint8_t SPI_ReceiveDataInterruptMode(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Length)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	6a1b      	ldr	r3, [r3, #32]
 80009b4:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 80009b6:	7dfb      	ldrb	r3, [r7, #23]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d010      	beq.n	80009de <SPI_ReceiveDataInterruptMode+0x3a>
	{
		/* Save Rx buffer address and length information in global variables */
		pSPIHandle->pRxBuffer = pRxBuffer;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Length;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	619a      	str	r2, [r3, #24]

		/* Mark SPI state as busy so that no other code can take over SPI peripheral until transmission is over */
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2201      	movs	r2, #1
 80009cc:	621a      	str	r2, [r3, #32]

		/* Enable RXNEIE control bit to get interrupt whenever RXE flag is set in SR */
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009dc:	605a      	str	r2, [r3, #4]
	}

	return state;
 80009de:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <SPI_IRQInterruptConfig>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	4613      	mov	r3, r2
 80009fa:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d133      	bne.n	8000a6a <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b1f      	cmp	r3, #31
 8000a06:	d80a      	bhi.n	8000a1e <SPI_IRQInterruptConfig+0x32>
		{
			/* Program ISER0 register */
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <SPI_IRQInterruptConfig+0xf0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	2101      	movs	r1, #1
 8000a10:	fa01 f202 	lsl.w	r2, r1, r2
 8000a14:	4611      	mov	r1, r2
 8000a16:	4a31      	ldr	r2, [pc, #196]	; (8000adc <SPI_IRQInterruptConfig+0xf0>)
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	6013      	str	r3, [r2, #0]
		{
			/* Program ICER2 register (64 to 95) */
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000a1c:	e059      	b.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	d90f      	bls.n	8000a44 <SPI_IRQInterruptConfig+0x58>
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b3f      	cmp	r3, #63	; 0x3f
 8000a28:	d80c      	bhi.n	8000a44 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <SPI_IRQInterruptConfig+0xf4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	f002 021f 	and.w	r2, r2, #31
 8000a34:	2101      	movs	r1, #1
 8000a36:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4a28      	ldr	r2, [pc, #160]	; (8000ae0 <SPI_IRQInterruptConfig+0xf4>)
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	e046      	b.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b3f      	cmp	r3, #63	; 0x3f
 8000a48:	d943      	bls.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b5f      	cmp	r3, #95	; 0x5f
 8000a4e:	d840      	bhi.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <SPI_IRQInterruptConfig+0xf8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a60:	4611      	mov	r1, r2
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <SPI_IRQInterruptConfig+0xf8>)
 8000a64:	430b      	orrs	r3, r1
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	e033      	b.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b1f      	cmp	r3, #31
 8000a6e:	d80a      	bhi.n	8000a86 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <SPI_IRQInterruptConfig+0xfc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	2101      	movs	r1, #1
 8000a78:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <SPI_IRQInterruptConfig+0xfc>)
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	e025      	b.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b1f      	cmp	r3, #31
 8000a8a:	d90f      	bls.n	8000aac <SPI_IRQInterruptConfig+0xc0>
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a90:	d80c      	bhi.n	8000aac <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <SPI_IRQInterruptConfig+0x100>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	f002 021f 	and.w	r2, r2, #31
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <SPI_IRQInterruptConfig+0x100>)
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	e012      	b.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b3f      	cmp	r3, #63	; 0x3f
 8000ab0:	d90f      	bls.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b5f      	cmp	r3, #95	; 0x5f
 8000ab6:	d80c      	bhi.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <SPI_IRQInterruptConfig+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	79fa      	ldrb	r2, [r7, #7]
 8000abe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <SPI_IRQInterruptConfig+0x104>)
 8000acc:	430b      	orrs	r3, r1
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	e7ff      	b.n	8000ad2 <SPI_IRQInterruptConfig+0xe6>
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000e104 	.word	0xe000e104
 8000ae4:	e000e108 	.word	0xe000e108
 8000ae8:	e000e180 	.word	0xe000e180
 8000aec:	e000e184 	.word	0xe000e184
 8000af0:	e000e188 	.word	0xe000e188

08000af4 <SPI_IRQHandling>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	uint8_t temp1;
	uint8_t temp2;

	/* Check for TXE */
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_TXE);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b16:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2)
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d005      	beq.n	8000b2a <SPI_IRQHandling+0x36>
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <SPI_IRQHandling+0x36>
	{
		/* Handle TXE */
		spi_txe_interrupt_handle(pHandle);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 f89c 	bl	8000c62 <spi_txe_interrupt_handle>
	}

	/* Check for RXNE */
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b44:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2)
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d005      	beq.n	8000b58 <SPI_IRQHandling+0x64>
 8000b4c:	7bbb      	ldrb	r3, [r7, #14]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <SPI_IRQHandling+0x64>
	{
		/* Handle RXNE */
		spi_rxne_interrupt_handle(pHandle);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 f8c5 	bl	8000ce2 <spi_rxne_interrupt_handle>
	}

	/* Check for OVR flag */
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_OVR);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b64:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2)
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d005      	beq.n	8000b86 <SPI_IRQHandling+0x92>
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <SPI_IRQHandling+0x92>
	{
		/* Handle OVR Error */
		spi_ovr_err_interrupt_handle(pHandle);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f8f0 	bl	8000d66 <spi_ovr_err_interrupt_handle>
	}

}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <SPI_PeripheralControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d106      	bne.n	8000bae <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000bac:	e005      	b.n	8000bba <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <SPI_SSOEConfig>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d106      	bne.n	8000be4 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f043 0204 	orr.w	r2, r3, #4
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000be2:	e005      	b.n	8000bf0 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f023 0204 	bic.w	r2, r3, #4
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	605a      	str	r2, [r3, #4]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <SPI_CloseTransmission>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c10:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <SPI_CloseReception>:
 *
 * @Note			- None
 *
 *****************************************************************/
void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c44:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <spi_txe_interrupt_handle>:
 *
 * @Note			- None
 *
 *****************************************************************/
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	if( pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF) )
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d015      	beq.n	8000ca4 <spi_txe_interrupt_handle+0x42>
	{
		/* Load data into data register */
		/* 16 bit */
		pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	1e5a      	subs	r2, r3, #1
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	e00f      	b.n	8000cc4 <spi_txe_interrupt_handle+0x62>
	}
	else
	{
		/* 8 bit */
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	60da      	str	r2, [r3, #12]
	}

	if(!pSPIHandle->TxLen)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d106      	bne.n	8000cda <spi_txe_interrupt_handle+0x78>
	{
		/* Tx is zero. Close SPI communication and inform application about it.
		 * Prevents interrupts from setting up of TXE flag. */
		SPI_CloseTransmission(pSPIHandle);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff94 	bl	8000bfa <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f9db 	bl	8001090 <SPI_ApplicationEventCallback>
	}
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <spi_rxne_interrupt_handle>:
 *
 * @Note			- None
 *
 *****************************************************************/
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
	if( pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF) )
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d016      	beq.n	8000d26 <spi_rxne_interrupt_handle+0x44>
	{
		/* Load data from data register into buffer */
		/* 16 bit */
		*((uint16_t*)pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	b292      	uxth	r2, r2
 8000d04:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	619a      	str	r2, [r3, #24]
		pSPIHandle->RxLen--;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	1e5a      	subs	r2, r3, #1
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	619a      	str	r2, [r3, #24]
		(uint16_t*)pSPIHandle->pRxBuffer++;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	e010      	b.n	8000d48 <spi_rxne_interrupt_handle+0x66>
	}
	else
	{
		/* 8 bit */
		*pSPIHandle->pRxBuffer = pSPIHandle->pSPIx->DR;//DBG->Check brackets
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	611a      	str	r2, [r3, #16]
	}

	if(!pSPIHandle->RxLen)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d106      	bne.n	8000d5e <spi_rxne_interrupt_handle+0x7c>
	{
		/* Rx is zero. Close SPI communication and inform application about it.
		 * Prevents interrupts from setting up of RXNE flag. */
		SPI_CloseReception(pSPIHandle);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff6c 	bl	8000c2e <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8000d56:	2102      	movs	r1, #2
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f999 	bl	8001090 <SPI_ApplicationEventCallback>
	}
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <spi_ovr_err_interrupt_handle>:
 *
 * @Note			- None
 *
 *****************************************************************/
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	/* Clear OVR flag */
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d007      	beq.n	8000d86 <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;

	/* Inform application */
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8000d86:	2103      	movs	r1, #3
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 f981 	bl	8001090 <SPI_ApplicationEventCallback>
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <SPI2_GPIOInits>:
uint8_t dummyWrite = 0xFF;
uint8_t dummyRead;


void SPI2_GPIOInits(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <SPI2_GPIOInits+0x58>)
 8000da0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000da2:	2302      	movs	r3, #2
 8000da4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000da6:	2305      	movs	r3, #5
 8000da8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000daa:	2300      	movs	r3, #0
 8000dac:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000dae:	2301      	movs	r3, #1
 8000db0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000db2:	2302      	movs	r3, #2
 8000db4:	72bb      	strb	r3, [r7, #10]

	/* SCLK Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000db6:	230d      	movs	r3, #13
 8000db8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fb47 	bl	8000450 <GPIO_Init>

	/* MOSI Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fb41 	bl	8000450 <GPIO_Init>

	/* MISO Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000dce:	230e      	movs	r3, #14
 8000dd0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb3b 	bl	8000450 <GPIO_Init>

	/* NSS Init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000dda:	230c      	movs	r3, #12
 8000ddc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fb35 	bl	8000450 <GPIO_Init>

}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40020400 	.word	0x40020400

08000df4 <SPI2_Inits>:


void SPI2_Inits(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	//SPI_Handle_t SPIHandle;

	SPI2Handle.pSPIx = SPI2;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <SPI2_Inits+0x40>)
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <SPI2_Inits+0x44>)
 8000dfc:	601a      	str	r2, [r3, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <SPI2_Inits+0x40>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	715a      	strb	r2, [r3, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <SPI2_Inits+0x40>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	711a      	strb	r2, [r3, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; //2MHz
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <SPI2_Inits+0x40>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	719a      	strb	r2, [r3, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <SPI2_Inits+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	71da      	strb	r2, [r3, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <SPI2_Inits+0x40>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	721a      	strb	r2, [r3, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SPI2_Inits+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	725a      	strb	r2, [r3, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //HW Slave management enabled for NSS pin
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SPI2_Inits+0x40>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2Handle);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <SPI2_Inits+0x40>)
 8000e2a:	f7ff fd31 	bl	8000890 <SPI_Init>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000094 	.word	0x20000094
 8000e38:	40003800 	.word	0x40003800

08000e3c <GPIO_ButtonInit>:


void GPIO_ButtonInit(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOC;
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <GPIO_ButtonInit+0x2c>)
 8000e44:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000e46:	230d      	movs	r3, #13
 8000e48:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000e52:	2300      	movs	r3, #0
 8000e54:	72fb      	strb	r3, [r7, #11]

	//GPIO_PeriClockControl(GPIOC, ENABLE);

	GPIO_Init(&GpioBtn);
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff faf9 	bl	8000450 <GPIO_Init>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40020800 	.word	0x40020800

08000e6c <delay>:


void delay(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	e002      	b.n	8000e7e <delay+0x12>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <delay+0x24>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d9f8      	bls.n	8000e78 <delay+0xc>
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	0003d08f 	.word	0x0003d08f

08000e94 <SPI_VerifyResponse>:


uint8_t SPI_VerifyResponse(uint8_t ackByte)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	if(ackByte == 0xF5)
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2bf5      	cmp	r3, #245	; 0xf5
 8000ea2:	d101      	bne.n	8000ea8 <SPI_VerifyResponse+0x14>
	{
		return 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <SPI_VerifyResponse+0x16>
	}

	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <main>:


int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
	/* Initialize button */
	GPIO_ButtonInit();
 8000eba:	f7ff ffbf 	bl	8000e3c <GPIO_ButtonInit>

	/* Initialize GPIO pins to behave as SPI2 pins */
	SPI2_GPIOInits();
 8000ebe:	f7ff ff6b 	bl	8000d98 <SPI2_GPIOInits>

	/* Initialize SPI2 peripheral parameters */
	SPI2_Inits();
 8000ec2:	f7ff ff97 	bl	8000df4 <SPI2_Inits>

	/* SPI2 IRQ configurations */
	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	2024      	movs	r0, #36	; 0x24
 8000eca:	f7ff fd8f 	bl	80009ec <SPI_IRQInterruptConfig>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4860      	ldr	r0, [pc, #384]	; (8001054 <main+0x1a0>)
 8000ed2:	f7ff fe77 	bl	8000bc4 <SPI_SSOEConfig>

	while(1)
	{
		/* Wait till button is pressed */
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000ed6:	bf00      	nop
 8000ed8:	210d      	movs	r1, #13
 8000eda:	485f      	ldr	r0, [pc, #380]	; (8001058 <main+0x1a4>)
 8000edc:	f7ff fc52 	bl	8000784 <GPIO_ReadFromInputPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f8      	bne.n	8000ed8 <main+0x24>

		printf("SPI communication started!\n");
 8000ee6:	485d      	ldr	r0, [pc, #372]	; (800105c <main+0x1a8>)
 8000ee8:	f000 fa82 	bl	80013f0 <puts>

		/* 200ms delay */
		delay();
 8000eec:	f7ff ffbe 	bl	8000e6c <delay>

		/* Enable SPI2 peripheral */
		SPI_PeripheralControl(SPI2, ENABLE);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4858      	ldr	r0, [pc, #352]	; (8001054 <main+0x1a0>)
 8000ef4:	f7ff fe4b 	bl	8000b8e <SPI_PeripheralControl>

		/* Send SPI data: CMD LED Control */
		uint8_t commandCode = COMMAND_LED_CTRL;
 8000ef8:	2350      	movs	r3, #80	; 0x50
 8000efa:	71fb      	strb	r3, [r7, #7]

		/* Send command */
		while(SPI_SendDataInterruptMode(&SPI2Handle, &commandCode, 1) != SPI_READY);
 8000efc:	bf00      	nop
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	2201      	movs	r2, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	4856      	ldr	r0, [pc, #344]	; (8001060 <main+0x1ac>)
 8000f06:	f7ff fd2a 	bl	800095e <SPI_SendDataInterruptMode>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f6      	bne.n	8000efe <main+0x4a>

		/* Dummy read to clear off the RXNE */
		while(SPI_ReceiveDataInterruptMode(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 8000f10:	bf00      	nop
 8000f12:	2201      	movs	r2, #1
 8000f14:	4953      	ldr	r1, [pc, #332]	; (8001064 <main+0x1b0>)
 8000f16:	4852      	ldr	r0, [pc, #328]	; (8001060 <main+0x1ac>)
 8000f18:	f7ff fd44 	bl	80009a4 <SPI_ReceiveDataInterruptMode>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f7      	bne.n	8000f12 <main+0x5e>

		/* Send dummy bits (byte) to fetch the response from slave */
		while(SPI_SendDataInterruptMode(&SPI2Handle, &dummyWrite, 1) != SPI_READY);
 8000f22:	bf00      	nop
 8000f24:	2201      	movs	r2, #1
 8000f26:	4950      	ldr	r1, [pc, #320]	; (8001068 <main+0x1b4>)
 8000f28:	484d      	ldr	r0, [pc, #308]	; (8001060 <main+0x1ac>)
 8000f2a:	f7ff fd18 	bl	800095e <SPI_SendDataInterruptMode>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f7      	bne.n	8000f24 <main+0x70>

		/* Receive Acknowledgment byte */
		uint8_t ackByte;
		while(SPI_ReceiveDataInterruptMode(&SPI2Handle, &ackByte, 1) != SPI_READY);
 8000f34:	bf00      	nop
 8000f36:	1dbb      	adds	r3, r7, #6
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4848      	ldr	r0, [pc, #288]	; (8001060 <main+0x1ac>)
 8000f3e:	f7ff fd31 	bl	80009a4 <SPI_ReceiveDataInterruptMode>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f6      	bne.n	8000f36 <main+0x82>

		/* Verify response from SPI slave */
		uint8_t args[2];
		if( SPI_VerifyResponse(ackByte) )
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffa2 	bl	8000e94 <SPI_VerifyResponse>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d010      	beq.n	8000f78 <main+0xc4>
		{
			/* Send arguments */
			args[0] = LED_PIN;
 8000f56:	230d      	movs	r3, #13
 8000f58:	713b      	strb	r3, [r7, #4]
			args[1] = LED_ON;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	717b      	strb	r3, [r7, #5]
			while(SPI_SendDataInterruptMode(&SPI2Handle, args, 2) != SPI_READY);
 8000f5e:	bf00      	nop
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2202      	movs	r2, #2
 8000f64:	4619      	mov	r1, r3
 8000f66:	483e      	ldr	r0, [pc, #248]	; (8001060 <main+0x1ac>)
 8000f68:	f7ff fcf9 	bl	800095e <SPI_SendDataInterruptMode>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f6      	bne.n	8000f60 <main+0xac>
			printf("Command LED executed!\n");
 8000f72:	483e      	ldr	r0, [pc, #248]	; (800106c <main+0x1b8>)
 8000f74:	f000 fa3c 	bl	80013f0 <puts>
		}
		/* End of CMD LED Control */

		/* Send SPI data: CMD Sensor Read */
		commandCode = COMMAND_SENSOR_READ;
 8000f78:	2351      	movs	r3, #81	; 0x51
 8000f7a:	71fb      	strb	r3, [r7, #7]

		/* Send command */
		while(SPI_SendDataInterruptMode(&SPI2Handle, &commandCode, 1) != SPI_READY);
 8000f7c:	bf00      	nop
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	2201      	movs	r2, #1
 8000f82:	4619      	mov	r1, r3
 8000f84:	4836      	ldr	r0, [pc, #216]	; (8001060 <main+0x1ac>)
 8000f86:	f7ff fcea 	bl	800095e <SPI_SendDataInterruptMode>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f6      	bne.n	8000f7e <main+0xca>

		/* Dummy read to clear off the RXNE */
		while(SPI_ReceiveDataInterruptMode(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 8000f90:	bf00      	nop
 8000f92:	2201      	movs	r2, #1
 8000f94:	4933      	ldr	r1, [pc, #204]	; (8001064 <main+0x1b0>)
 8000f96:	4832      	ldr	r0, [pc, #200]	; (8001060 <main+0x1ac>)
 8000f98:	f7ff fd04 	bl	80009a4 <SPI_ReceiveDataInterruptMode>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f7      	bne.n	8000f92 <main+0xde>

		/* Send dummy bits (byte) to fetch the response from slave */
		while(SPI_SendDataInterruptMode(&SPI2Handle, &dummyWrite, 1) != SPI_READY);
 8000fa2:	bf00      	nop
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4930      	ldr	r1, [pc, #192]	; (8001068 <main+0x1b4>)
 8000fa8:	482d      	ldr	r0, [pc, #180]	; (8001060 <main+0x1ac>)
 8000faa:	f7ff fcd8 	bl	800095e <SPI_SendDataInterruptMode>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f7      	bne.n	8000fa4 <main+0xf0>

		/* Receive Acknowledgment byte */
		while(SPI_ReceiveDataInterruptMode(&SPI2Handle, &ackByte, 1) != SPI_READY);
 8000fb4:	bf00      	nop
 8000fb6:	1dbb      	adds	r3, r7, #6
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4828      	ldr	r0, [pc, #160]	; (8001060 <main+0x1ac>)
 8000fbe:	f7ff fcf1 	bl	80009a4 <SPI_ReceiveDataInterruptMode>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f6      	bne.n	8000fb6 <main+0x102>

		/* Verify response from SPI slave */
		if( SPI_VerifyResponse(ackByte) )
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff62 	bl	8000e94 <SPI_VerifyResponse>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d031      	beq.n	800103a <main+0x186>
		{
			/* Send arguments */
			args[0] = ANALOG_PIN0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	713b      	strb	r3, [r7, #4]
			while(SPI_SendDataInterruptMode(&SPI2Handle, &args, 1) != SPI_READY);
 8000fda:	bf00      	nop
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481f      	ldr	r0, [pc, #124]	; (8001060 <main+0x1ac>)
 8000fe4:	f7ff fcbb 	bl	800095e <SPI_SendDataInterruptMode>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f6      	bne.n	8000fdc <main+0x128>
			printf("Command Sensor Read executed!\n");
 8000fee:	4820      	ldr	r0, [pc, #128]	; (8001070 <main+0x1bc>)
 8000ff0:	f000 f9fe 	bl	80013f0 <puts>

			/* Dummy read to clear off the RXNE */
			while(SPI_ReceiveDataInterruptMode(&SPI2Handle, &dummyRead, 1) != SPI_READY);
 8000ff4:	bf00      	nop
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	491a      	ldr	r1, [pc, #104]	; (8001064 <main+0x1b0>)
 8000ffa:	4819      	ldr	r0, [pc, #100]	; (8001060 <main+0x1ac>)
 8000ffc:	f7ff fcd2 	bl	80009a4 <SPI_ReceiveDataInterruptMode>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f7      	bne.n	8000ff6 <main+0x142>

			/* Send dummy bits (byte) to fetch the response from slave */
			while(SPI_SendDataInterruptMode(&SPI2Handle, &dummyWrite, 1) != SPI_READY);
 8001006:	bf00      	nop
 8001008:	2201      	movs	r2, #1
 800100a:	4917      	ldr	r1, [pc, #92]	; (8001068 <main+0x1b4>)
 800100c:	4814      	ldr	r0, [pc, #80]	; (8001060 <main+0x1ac>)
 800100e:	f7ff fca6 	bl	800095e <SPI_SendDataInterruptMode>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f7      	bne.n	8001008 <main+0x154>

			/* Wait for Slave to be ready with data */
			delay();
 8001018:	f7ff ff28 	bl	8000e6c <delay>

			/* Receive Sensor Data from Slave */
			uint8_t analogRead;
			while(SPI_ReceiveDataInterruptMode(&SPI2Handle, &analogRead, 1) != SPI_READY);
 800101c:	bf00      	nop
 800101e:	1cfb      	adds	r3, r7, #3
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	480e      	ldr	r0, [pc, #56]	; (8001060 <main+0x1ac>)
 8001026:	f7ff fcbd 	bl	80009a4 <SPI_ReceiveDataInterruptMode>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f6      	bne.n	800101e <main+0x16a>
			printf("Analog read value: %d\n",analogRead);
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	4619      	mov	r1, r3
 8001034:	480f      	ldr	r0, [pc, #60]	; (8001074 <main+0x1c0>)
 8001036:	f000 f967 	bl	8001308 <iprintf>
		}
		/* End of CMD Sensor Read */

		/* Confirm SPI2 not busy */
		SPI_GetFlagStatus(SPI2, SPI_SR_BSY);
 800103a:	2107      	movs	r1, #7
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <main+0x1a0>)
 800103e:	f7ff fc7b 	bl	8000938 <SPI_GetFlagStatus>

		/* Disable SPI2 peripheral */
		SPI_PeripheralControl(SPI2, DISABLE);
 8001042:	2100      	movs	r1, #0
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <main+0x1a0>)
 8001046:	f7ff fda2 	bl	8000b8e <SPI_PeripheralControl>

		//TODO: Implement rest of commands to test if needed
		printf("SPI communication closed!\n");
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <main+0x1c4>)
 800104c:	f000 f9d0 	bl	80013f0 <puts>
	{
 8001050:	e741      	b.n	8000ed6 <main+0x22>
 8001052:	bf00      	nop
 8001054:	40003800 	.word	0x40003800
 8001058:	40020800 	.word	0x40020800
 800105c:	080021ac 	.word	0x080021ac
 8001060:	20000094 	.word	0x20000094
 8001064:	20000090 	.word	0x20000090
 8001068:	20000000 	.word	0x20000000
 800106c:	080021c8 	.word	0x080021c8
 8001070:	080021e0 	.word	0x080021e0
 8001074:	08002200 	.word	0x08002200
 8001078:	08002218 	.word	0x08002218

0800107c <SPI2_IRQHandler>:

	return 0;
}

void SPI2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI2Handle);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <SPI2_IRQHandler+0x10>)
 8001082:	f7ff fd37 	bl	8000af4 <SPI_IRQHandling>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000094 	.word	0x20000094

08001090 <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	if(AppEv == SPI_EVENT_TX_CMPLT)
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d103      	bne.n	80010aa <SPI_ApplicationEventCallback+0x1a>
	{
		printf("Tx is complete!\n");
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <SPI_ApplicationEventCallback+0x3c>)
 80010a4:	f000 f9a4 	bl	80013f0 <puts>
	}
	else if(AppEv == SPI_EVENT_OVR_ERR)
	{
		printf("OVR Error triggered!\n");
	}
}
 80010a8:	e00c      	b.n	80010c4 <SPI_ApplicationEventCallback+0x34>
	else if(AppEv == SPI_EVENT_RX_CMPLT)
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d103      	bne.n	80010b8 <SPI_ApplicationEventCallback+0x28>
		printf("Rx is complete!\n");
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <SPI_ApplicationEventCallback+0x40>)
 80010b2:	f000 f99d 	bl	80013f0 <puts>
}
 80010b6:	e005      	b.n	80010c4 <SPI_ApplicationEventCallback+0x34>
	else if(AppEv == SPI_EVENT_OVR_ERR)
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d102      	bne.n	80010c4 <SPI_ApplicationEventCallback+0x34>
		printf("OVR Error triggered!\n");
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <SPI_ApplicationEventCallback+0x44>)
 80010c0:	f000 f996 	bl	80013f0 <puts>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	08002234 	.word	0x08002234
 80010d0:	08002244 	.word	0x08002244
 80010d4:	08002254 	.word	0x08002254

080010d8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <ITM_SendChar+0x44>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a0d      	ldr	r2, [pc, #52]	; (800111c <ITM_SendChar+0x44>)
 80010e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <ITM_SendChar+0x48>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <ITM_SendChar+0x48>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80010fa:	bf00      	nop
 80010fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f8      	beq.n	80010fc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800110a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	e000edfc 	.word	0xe000edfc
 8001120:	e0000e00 	.word	0xe0000e00

08001124 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e00a      	b.n	800114c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001136:	f3af 8000 	nop.w
 800113a:	4601      	mov	r1, r0
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60ba      	str	r2, [r7, #8]
 8001142:	b2ca      	uxtb	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbf0      	blt.n	8001136 <_read+0x12>
	}

return len;
 8001154:	687b      	ldr	r3, [r7, #4]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	e009      	b.n	8001184 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);	//ITM Debuger enabled
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	60ba      	str	r2, [r7, #8]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffad 	bl	80010d8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbf1      	blt.n	8001170 <_write+0x12>
	}
	return len;
 800118c:	687b      	ldr	r3, [r7, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_close>:

int _close(int file)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	return -1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011bc:	605a      	str	r2, [r3, #4]
	return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <_isatty>:

int _isatty(int file)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
	return 1;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011de:	b480      	push	{r7}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
	return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
	...

080011f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <_sbrk+0x50>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <_sbrk+0x16>
		heap_end = &end;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <_sbrk+0x50>)
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <_sbrk+0x54>)
 800120c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <_sbrk+0x50>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <_sbrk+0x50>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	466a      	mov	r2, sp
 800121e:	4293      	cmp	r3, r2
 8001220:	d907      	bls.n	8001232 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001222:	f000 f83f 	bl	80012a4 <__errno>
 8001226:	4602      	mov	r2, r0
 8001228:	230c      	movs	r3, #12
 800122a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	e006      	b.n	8001240 <_sbrk+0x48>
	}

	heap_end += incr;
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <_sbrk+0x50>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	4a03      	ldr	r2, [pc, #12]	; (8001248 <_sbrk+0x50>)
 800123c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000084 	.word	0x20000084
 800124c:	200000c0 	.word	0x200000c0

08001250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001252:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 800126c:	4c0b      	ldr	r4, [pc, #44]	; (800129c <LoopForever+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800127a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800127e:	f000 f817 	bl	80012b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001282:	f7ff fe17 	bl	8000eb4 <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   r0, =_estack
 8001288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001294:	0800230c 	.word	0x0800230c
  ldr r2, =_sbss
 8001298:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800129c:	200000bc 	.word	0x200000bc

080012a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <__errno>:
 80012a4:	4b01      	ldr	r3, [pc, #4]	; (80012ac <__errno+0x8>)
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000004 	.word	0x20000004

080012b0 <__libc_init_array>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	4e0d      	ldr	r6, [pc, #52]	; (80012e8 <__libc_init_array+0x38>)
 80012b4:	4c0d      	ldr	r4, [pc, #52]	; (80012ec <__libc_init_array+0x3c>)
 80012b6:	1ba4      	subs	r4, r4, r6
 80012b8:	10a4      	asrs	r4, r4, #2
 80012ba:	2500      	movs	r5, #0
 80012bc:	42a5      	cmp	r5, r4
 80012be:	d109      	bne.n	80012d4 <__libc_init_array+0x24>
 80012c0:	4e0b      	ldr	r6, [pc, #44]	; (80012f0 <__libc_init_array+0x40>)
 80012c2:	4c0c      	ldr	r4, [pc, #48]	; (80012f4 <__libc_init_array+0x44>)
 80012c4:	f000 ff66 	bl	8002194 <_init>
 80012c8:	1ba4      	subs	r4, r4, r6
 80012ca:	10a4      	asrs	r4, r4, #2
 80012cc:	2500      	movs	r5, #0
 80012ce:	42a5      	cmp	r5, r4
 80012d0:	d105      	bne.n	80012de <__libc_init_array+0x2e>
 80012d2:	bd70      	pop	{r4, r5, r6, pc}
 80012d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012d8:	4798      	blx	r3
 80012da:	3501      	adds	r5, #1
 80012dc:	e7ee      	b.n	80012bc <__libc_init_array+0xc>
 80012de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012e2:	4798      	blx	r3
 80012e4:	3501      	adds	r5, #1
 80012e6:	e7f2      	b.n	80012ce <__libc_init_array+0x1e>
 80012e8:	08002304 	.word	0x08002304
 80012ec:	08002304 	.word	0x08002304
 80012f0:	08002304 	.word	0x08002304
 80012f4:	08002308 	.word	0x08002308

080012f8 <memset>:
 80012f8:	4402      	add	r2, r0
 80012fa:	4603      	mov	r3, r0
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d100      	bne.n	8001302 <memset+0xa>
 8001300:	4770      	bx	lr
 8001302:	f803 1b01 	strb.w	r1, [r3], #1
 8001306:	e7f9      	b.n	80012fc <memset+0x4>

08001308 <iprintf>:
 8001308:	b40f      	push	{r0, r1, r2, r3}
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <iprintf+0x2c>)
 800130c:	b513      	push	{r0, r1, r4, lr}
 800130e:	681c      	ldr	r4, [r3, #0]
 8001310:	b124      	cbz	r4, 800131c <iprintf+0x14>
 8001312:	69a3      	ldr	r3, [r4, #24]
 8001314:	b913      	cbnz	r3, 800131c <iprintf+0x14>
 8001316:	4620      	mov	r0, r4
 8001318:	f000 fa22 	bl	8001760 <__sinit>
 800131c:	ab05      	add	r3, sp, #20
 800131e:	9a04      	ldr	r2, [sp, #16]
 8001320:	68a1      	ldr	r1, [r4, #8]
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	4620      	mov	r0, r4
 8001326:	f000 fbd9 	bl	8001adc <_vfiprintf_r>
 800132a:	b002      	add	sp, #8
 800132c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001330:	b004      	add	sp, #16
 8001332:	4770      	bx	lr
 8001334:	20000004 	.word	0x20000004

08001338 <_puts_r>:
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	460e      	mov	r6, r1
 800133c:	4605      	mov	r5, r0
 800133e:	b118      	cbz	r0, 8001348 <_puts_r+0x10>
 8001340:	6983      	ldr	r3, [r0, #24]
 8001342:	b90b      	cbnz	r3, 8001348 <_puts_r+0x10>
 8001344:	f000 fa0c 	bl	8001760 <__sinit>
 8001348:	69ab      	ldr	r3, [r5, #24]
 800134a:	68ac      	ldr	r4, [r5, #8]
 800134c:	b913      	cbnz	r3, 8001354 <_puts_r+0x1c>
 800134e:	4628      	mov	r0, r5
 8001350:	f000 fa06 	bl	8001760 <__sinit>
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <_puts_r+0xac>)
 8001356:	429c      	cmp	r4, r3
 8001358:	d117      	bne.n	800138a <_puts_r+0x52>
 800135a:	686c      	ldr	r4, [r5, #4]
 800135c:	89a3      	ldrh	r3, [r4, #12]
 800135e:	071b      	lsls	r3, r3, #28
 8001360:	d51d      	bpl.n	800139e <_puts_r+0x66>
 8001362:	6923      	ldr	r3, [r4, #16]
 8001364:	b1db      	cbz	r3, 800139e <_puts_r+0x66>
 8001366:	3e01      	subs	r6, #1
 8001368:	68a3      	ldr	r3, [r4, #8]
 800136a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800136e:	3b01      	subs	r3, #1
 8001370:	60a3      	str	r3, [r4, #8]
 8001372:	b9e9      	cbnz	r1, 80013b0 <_puts_r+0x78>
 8001374:	2b00      	cmp	r3, #0
 8001376:	da2e      	bge.n	80013d6 <_puts_r+0x9e>
 8001378:	4622      	mov	r2, r4
 800137a:	210a      	movs	r1, #10
 800137c:	4628      	mov	r0, r5
 800137e:	f000 f83f 	bl	8001400 <__swbuf_r>
 8001382:	3001      	adds	r0, #1
 8001384:	d011      	beq.n	80013aa <_puts_r+0x72>
 8001386:	200a      	movs	r0, #10
 8001388:	e011      	b.n	80013ae <_puts_r+0x76>
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <_puts_r+0xb0>)
 800138c:	429c      	cmp	r4, r3
 800138e:	d101      	bne.n	8001394 <_puts_r+0x5c>
 8001390:	68ac      	ldr	r4, [r5, #8]
 8001392:	e7e3      	b.n	800135c <_puts_r+0x24>
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <_puts_r+0xb4>)
 8001396:	429c      	cmp	r4, r3
 8001398:	bf08      	it	eq
 800139a:	68ec      	ldreq	r4, [r5, #12]
 800139c:	e7de      	b.n	800135c <_puts_r+0x24>
 800139e:	4621      	mov	r1, r4
 80013a0:	4628      	mov	r0, r5
 80013a2:	f000 f87f 	bl	80014a4 <__swsetup_r>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d0dd      	beq.n	8001366 <_puts_r+0x2e>
 80013aa:	f04f 30ff 	mov.w	r0, #4294967295
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da04      	bge.n	80013be <_puts_r+0x86>
 80013b4:	69a2      	ldr	r2, [r4, #24]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dc06      	bgt.n	80013c8 <_puts_r+0x90>
 80013ba:	290a      	cmp	r1, #10
 80013bc:	d004      	beq.n	80013c8 <_puts_r+0x90>
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	6022      	str	r2, [r4, #0]
 80013c4:	7019      	strb	r1, [r3, #0]
 80013c6:	e7cf      	b.n	8001368 <_puts_r+0x30>
 80013c8:	4622      	mov	r2, r4
 80013ca:	4628      	mov	r0, r5
 80013cc:	f000 f818 	bl	8001400 <__swbuf_r>
 80013d0:	3001      	adds	r0, #1
 80013d2:	d1c9      	bne.n	8001368 <_puts_r+0x30>
 80013d4:	e7e9      	b.n	80013aa <_puts_r+0x72>
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	200a      	movs	r0, #10
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	6022      	str	r2, [r4, #0]
 80013de:	7018      	strb	r0, [r3, #0]
 80013e0:	e7e5      	b.n	80013ae <_puts_r+0x76>
 80013e2:	bf00      	nop
 80013e4:	08002290 	.word	0x08002290
 80013e8:	080022b0 	.word	0x080022b0
 80013ec:	08002270 	.word	0x08002270

080013f0 <puts>:
 80013f0:	4b02      	ldr	r3, [pc, #8]	; (80013fc <puts+0xc>)
 80013f2:	4601      	mov	r1, r0
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	f7ff bf9f 	b.w	8001338 <_puts_r>
 80013fa:	bf00      	nop
 80013fc:	20000004 	.word	0x20000004

08001400 <__swbuf_r>:
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	460e      	mov	r6, r1
 8001404:	4614      	mov	r4, r2
 8001406:	4605      	mov	r5, r0
 8001408:	b118      	cbz	r0, 8001412 <__swbuf_r+0x12>
 800140a:	6983      	ldr	r3, [r0, #24]
 800140c:	b90b      	cbnz	r3, 8001412 <__swbuf_r+0x12>
 800140e:	f000 f9a7 	bl	8001760 <__sinit>
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <__swbuf_r+0x98>)
 8001414:	429c      	cmp	r4, r3
 8001416:	d12a      	bne.n	800146e <__swbuf_r+0x6e>
 8001418:	686c      	ldr	r4, [r5, #4]
 800141a:	69a3      	ldr	r3, [r4, #24]
 800141c:	60a3      	str	r3, [r4, #8]
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	071a      	lsls	r2, r3, #28
 8001422:	d52e      	bpl.n	8001482 <__swbuf_r+0x82>
 8001424:	6923      	ldr	r3, [r4, #16]
 8001426:	b363      	cbz	r3, 8001482 <__swbuf_r+0x82>
 8001428:	6923      	ldr	r3, [r4, #16]
 800142a:	6820      	ldr	r0, [r4, #0]
 800142c:	1ac0      	subs	r0, r0, r3
 800142e:	6963      	ldr	r3, [r4, #20]
 8001430:	b2f6      	uxtb	r6, r6
 8001432:	4283      	cmp	r3, r0
 8001434:	4637      	mov	r7, r6
 8001436:	dc04      	bgt.n	8001442 <__swbuf_r+0x42>
 8001438:	4621      	mov	r1, r4
 800143a:	4628      	mov	r0, r5
 800143c:	f000 f926 	bl	800168c <_fflush_r>
 8001440:	bb28      	cbnz	r0, 800148e <__swbuf_r+0x8e>
 8001442:	68a3      	ldr	r3, [r4, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60a3      	str	r3, [r4, #8]
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	6022      	str	r2, [r4, #0]
 800144e:	701e      	strb	r6, [r3, #0]
 8001450:	6963      	ldr	r3, [r4, #20]
 8001452:	3001      	adds	r0, #1
 8001454:	4283      	cmp	r3, r0
 8001456:	d004      	beq.n	8001462 <__swbuf_r+0x62>
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	07db      	lsls	r3, r3, #31
 800145c:	d519      	bpl.n	8001492 <__swbuf_r+0x92>
 800145e:	2e0a      	cmp	r6, #10
 8001460:	d117      	bne.n	8001492 <__swbuf_r+0x92>
 8001462:	4621      	mov	r1, r4
 8001464:	4628      	mov	r0, r5
 8001466:	f000 f911 	bl	800168c <_fflush_r>
 800146a:	b190      	cbz	r0, 8001492 <__swbuf_r+0x92>
 800146c:	e00f      	b.n	800148e <__swbuf_r+0x8e>
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <__swbuf_r+0x9c>)
 8001470:	429c      	cmp	r4, r3
 8001472:	d101      	bne.n	8001478 <__swbuf_r+0x78>
 8001474:	68ac      	ldr	r4, [r5, #8]
 8001476:	e7d0      	b.n	800141a <__swbuf_r+0x1a>
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <__swbuf_r+0xa0>)
 800147a:	429c      	cmp	r4, r3
 800147c:	bf08      	it	eq
 800147e:	68ec      	ldreq	r4, [r5, #12]
 8001480:	e7cb      	b.n	800141a <__swbuf_r+0x1a>
 8001482:	4621      	mov	r1, r4
 8001484:	4628      	mov	r0, r5
 8001486:	f000 f80d 	bl	80014a4 <__swsetup_r>
 800148a:	2800      	cmp	r0, #0
 800148c:	d0cc      	beq.n	8001428 <__swbuf_r+0x28>
 800148e:	f04f 37ff 	mov.w	r7, #4294967295
 8001492:	4638      	mov	r0, r7
 8001494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001496:	bf00      	nop
 8001498:	08002290 	.word	0x08002290
 800149c:	080022b0 	.word	0x080022b0
 80014a0:	08002270 	.word	0x08002270

080014a4 <__swsetup_r>:
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <__swsetup_r+0xcc>)
 80014a6:	b570      	push	{r4, r5, r6, lr}
 80014a8:	681d      	ldr	r5, [r3, #0]
 80014aa:	4606      	mov	r6, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	b125      	cbz	r5, 80014ba <__swsetup_r+0x16>
 80014b0:	69ab      	ldr	r3, [r5, #24]
 80014b2:	b913      	cbnz	r3, 80014ba <__swsetup_r+0x16>
 80014b4:	4628      	mov	r0, r5
 80014b6:	f000 f953 	bl	8001760 <__sinit>
 80014ba:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <__swsetup_r+0xd0>)
 80014bc:	429c      	cmp	r4, r3
 80014be:	d10f      	bne.n	80014e0 <__swsetup_r+0x3c>
 80014c0:	686c      	ldr	r4, [r5, #4]
 80014c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	0715      	lsls	r5, r2, #28
 80014ca:	d42c      	bmi.n	8001526 <__swsetup_r+0x82>
 80014cc:	06d0      	lsls	r0, r2, #27
 80014ce:	d411      	bmi.n	80014f4 <__swsetup_r+0x50>
 80014d0:	2209      	movs	r2, #9
 80014d2:	6032      	str	r2, [r6, #0]
 80014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d8:	81a3      	strh	r3, [r4, #12]
 80014da:	f04f 30ff 	mov.w	r0, #4294967295
 80014de:	e03e      	b.n	800155e <__swsetup_r+0xba>
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <__swsetup_r+0xd4>)
 80014e2:	429c      	cmp	r4, r3
 80014e4:	d101      	bne.n	80014ea <__swsetup_r+0x46>
 80014e6:	68ac      	ldr	r4, [r5, #8]
 80014e8:	e7eb      	b.n	80014c2 <__swsetup_r+0x1e>
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <__swsetup_r+0xd8>)
 80014ec:	429c      	cmp	r4, r3
 80014ee:	bf08      	it	eq
 80014f0:	68ec      	ldreq	r4, [r5, #12]
 80014f2:	e7e6      	b.n	80014c2 <__swsetup_r+0x1e>
 80014f4:	0751      	lsls	r1, r2, #29
 80014f6:	d512      	bpl.n	800151e <__swsetup_r+0x7a>
 80014f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014fa:	b141      	cbz	r1, 800150e <__swsetup_r+0x6a>
 80014fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001500:	4299      	cmp	r1, r3
 8001502:	d002      	beq.n	800150a <__swsetup_r+0x66>
 8001504:	4630      	mov	r0, r6
 8001506:	f000 fa19 	bl	800193c <_free_r>
 800150a:	2300      	movs	r3, #0
 800150c:	6363      	str	r3, [r4, #52]	; 0x34
 800150e:	89a3      	ldrh	r3, [r4, #12]
 8001510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001514:	81a3      	strh	r3, [r4, #12]
 8001516:	2300      	movs	r3, #0
 8001518:	6063      	str	r3, [r4, #4]
 800151a:	6923      	ldr	r3, [r4, #16]
 800151c:	6023      	str	r3, [r4, #0]
 800151e:	89a3      	ldrh	r3, [r4, #12]
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	81a3      	strh	r3, [r4, #12]
 8001526:	6923      	ldr	r3, [r4, #16]
 8001528:	b94b      	cbnz	r3, 800153e <__swsetup_r+0x9a>
 800152a:	89a3      	ldrh	r3, [r4, #12]
 800152c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001534:	d003      	beq.n	800153e <__swsetup_r+0x9a>
 8001536:	4621      	mov	r1, r4
 8001538:	4630      	mov	r0, r6
 800153a:	f000 f9bf 	bl	80018bc <__smakebuf_r>
 800153e:	89a2      	ldrh	r2, [r4, #12]
 8001540:	f012 0301 	ands.w	r3, r2, #1
 8001544:	d00c      	beq.n	8001560 <__swsetup_r+0xbc>
 8001546:	2300      	movs	r3, #0
 8001548:	60a3      	str	r3, [r4, #8]
 800154a:	6963      	ldr	r3, [r4, #20]
 800154c:	425b      	negs	r3, r3
 800154e:	61a3      	str	r3, [r4, #24]
 8001550:	6923      	ldr	r3, [r4, #16]
 8001552:	b953      	cbnz	r3, 800156a <__swsetup_r+0xc6>
 8001554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001558:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800155c:	d1ba      	bne.n	80014d4 <__swsetup_r+0x30>
 800155e:	bd70      	pop	{r4, r5, r6, pc}
 8001560:	0792      	lsls	r2, r2, #30
 8001562:	bf58      	it	pl
 8001564:	6963      	ldrpl	r3, [r4, #20]
 8001566:	60a3      	str	r3, [r4, #8]
 8001568:	e7f2      	b.n	8001550 <__swsetup_r+0xac>
 800156a:	2000      	movs	r0, #0
 800156c:	e7f7      	b.n	800155e <__swsetup_r+0xba>
 800156e:	bf00      	nop
 8001570:	20000004 	.word	0x20000004
 8001574:	08002290 	.word	0x08002290
 8001578:	080022b0 	.word	0x080022b0
 800157c:	08002270 	.word	0x08002270

08001580 <__sflush_r>:
 8001580:	898a      	ldrh	r2, [r1, #12]
 8001582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001586:	4605      	mov	r5, r0
 8001588:	0710      	lsls	r0, r2, #28
 800158a:	460c      	mov	r4, r1
 800158c:	d458      	bmi.n	8001640 <__sflush_r+0xc0>
 800158e:	684b      	ldr	r3, [r1, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	dc05      	bgt.n	80015a0 <__sflush_r+0x20>
 8001594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	dc02      	bgt.n	80015a0 <__sflush_r+0x20>
 800159a:	2000      	movs	r0, #0
 800159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015a2:	2e00      	cmp	r6, #0
 80015a4:	d0f9      	beq.n	800159a <__sflush_r+0x1a>
 80015a6:	2300      	movs	r3, #0
 80015a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015ac:	682f      	ldr	r7, [r5, #0]
 80015ae:	6a21      	ldr	r1, [r4, #32]
 80015b0:	602b      	str	r3, [r5, #0]
 80015b2:	d032      	beq.n	800161a <__sflush_r+0x9a>
 80015b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015b6:	89a3      	ldrh	r3, [r4, #12]
 80015b8:	075a      	lsls	r2, r3, #29
 80015ba:	d505      	bpl.n	80015c8 <__sflush_r+0x48>
 80015bc:	6863      	ldr	r3, [r4, #4]
 80015be:	1ac0      	subs	r0, r0, r3
 80015c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015c2:	b10b      	cbz	r3, 80015c8 <__sflush_r+0x48>
 80015c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015c6:	1ac0      	subs	r0, r0, r3
 80015c8:	2300      	movs	r3, #0
 80015ca:	4602      	mov	r2, r0
 80015cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ce:	6a21      	ldr	r1, [r4, #32]
 80015d0:	4628      	mov	r0, r5
 80015d2:	47b0      	blx	r6
 80015d4:	1c43      	adds	r3, r0, #1
 80015d6:	89a3      	ldrh	r3, [r4, #12]
 80015d8:	d106      	bne.n	80015e8 <__sflush_r+0x68>
 80015da:	6829      	ldr	r1, [r5, #0]
 80015dc:	291d      	cmp	r1, #29
 80015de:	d848      	bhi.n	8001672 <__sflush_r+0xf2>
 80015e0:	4a29      	ldr	r2, [pc, #164]	; (8001688 <__sflush_r+0x108>)
 80015e2:	40ca      	lsrs	r2, r1
 80015e4:	07d6      	lsls	r6, r2, #31
 80015e6:	d544      	bpl.n	8001672 <__sflush_r+0xf2>
 80015e8:	2200      	movs	r2, #0
 80015ea:	6062      	str	r2, [r4, #4]
 80015ec:	04d9      	lsls	r1, r3, #19
 80015ee:	6922      	ldr	r2, [r4, #16]
 80015f0:	6022      	str	r2, [r4, #0]
 80015f2:	d504      	bpl.n	80015fe <__sflush_r+0x7e>
 80015f4:	1c42      	adds	r2, r0, #1
 80015f6:	d101      	bne.n	80015fc <__sflush_r+0x7c>
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	b903      	cbnz	r3, 80015fe <__sflush_r+0x7e>
 80015fc:	6560      	str	r0, [r4, #84]	; 0x54
 80015fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001600:	602f      	str	r7, [r5, #0]
 8001602:	2900      	cmp	r1, #0
 8001604:	d0c9      	beq.n	800159a <__sflush_r+0x1a>
 8001606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800160a:	4299      	cmp	r1, r3
 800160c:	d002      	beq.n	8001614 <__sflush_r+0x94>
 800160e:	4628      	mov	r0, r5
 8001610:	f000 f994 	bl	800193c <_free_r>
 8001614:	2000      	movs	r0, #0
 8001616:	6360      	str	r0, [r4, #52]	; 0x34
 8001618:	e7c0      	b.n	800159c <__sflush_r+0x1c>
 800161a:	2301      	movs	r3, #1
 800161c:	4628      	mov	r0, r5
 800161e:	47b0      	blx	r6
 8001620:	1c41      	adds	r1, r0, #1
 8001622:	d1c8      	bne.n	80015b6 <__sflush_r+0x36>
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0c5      	beq.n	80015b6 <__sflush_r+0x36>
 800162a:	2b1d      	cmp	r3, #29
 800162c:	d001      	beq.n	8001632 <__sflush_r+0xb2>
 800162e:	2b16      	cmp	r3, #22
 8001630:	d101      	bne.n	8001636 <__sflush_r+0xb6>
 8001632:	602f      	str	r7, [r5, #0]
 8001634:	e7b1      	b.n	800159a <__sflush_r+0x1a>
 8001636:	89a3      	ldrh	r3, [r4, #12]
 8001638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163c:	81a3      	strh	r3, [r4, #12]
 800163e:	e7ad      	b.n	800159c <__sflush_r+0x1c>
 8001640:	690f      	ldr	r7, [r1, #16]
 8001642:	2f00      	cmp	r7, #0
 8001644:	d0a9      	beq.n	800159a <__sflush_r+0x1a>
 8001646:	0793      	lsls	r3, r2, #30
 8001648:	680e      	ldr	r6, [r1, #0]
 800164a:	bf08      	it	eq
 800164c:	694b      	ldreq	r3, [r1, #20]
 800164e:	600f      	str	r7, [r1, #0]
 8001650:	bf18      	it	ne
 8001652:	2300      	movne	r3, #0
 8001654:	eba6 0807 	sub.w	r8, r6, r7
 8001658:	608b      	str	r3, [r1, #8]
 800165a:	f1b8 0f00 	cmp.w	r8, #0
 800165e:	dd9c      	ble.n	800159a <__sflush_r+0x1a>
 8001660:	4643      	mov	r3, r8
 8001662:	463a      	mov	r2, r7
 8001664:	6a21      	ldr	r1, [r4, #32]
 8001666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001668:	4628      	mov	r0, r5
 800166a:	47b0      	blx	r6
 800166c:	2800      	cmp	r0, #0
 800166e:	dc06      	bgt.n	800167e <__sflush_r+0xfe>
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001676:	81a3      	strh	r3, [r4, #12]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	e78e      	b.n	800159c <__sflush_r+0x1c>
 800167e:	4407      	add	r7, r0
 8001680:	eba8 0800 	sub.w	r8, r8, r0
 8001684:	e7e9      	b.n	800165a <__sflush_r+0xda>
 8001686:	bf00      	nop
 8001688:	20400001 	.word	0x20400001

0800168c <_fflush_r>:
 800168c:	b538      	push	{r3, r4, r5, lr}
 800168e:	690b      	ldr	r3, [r1, #16]
 8001690:	4605      	mov	r5, r0
 8001692:	460c      	mov	r4, r1
 8001694:	b1db      	cbz	r3, 80016ce <_fflush_r+0x42>
 8001696:	b118      	cbz	r0, 80016a0 <_fflush_r+0x14>
 8001698:	6983      	ldr	r3, [r0, #24]
 800169a:	b90b      	cbnz	r3, 80016a0 <_fflush_r+0x14>
 800169c:	f000 f860 	bl	8001760 <__sinit>
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <_fflush_r+0x48>)
 80016a2:	429c      	cmp	r4, r3
 80016a4:	d109      	bne.n	80016ba <_fflush_r+0x2e>
 80016a6:	686c      	ldr	r4, [r5, #4]
 80016a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ac:	b17b      	cbz	r3, 80016ce <_fflush_r+0x42>
 80016ae:	4621      	mov	r1, r4
 80016b0:	4628      	mov	r0, r5
 80016b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016b6:	f7ff bf63 	b.w	8001580 <__sflush_r>
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <_fflush_r+0x4c>)
 80016bc:	429c      	cmp	r4, r3
 80016be:	d101      	bne.n	80016c4 <_fflush_r+0x38>
 80016c0:	68ac      	ldr	r4, [r5, #8]
 80016c2:	e7f1      	b.n	80016a8 <_fflush_r+0x1c>
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <_fflush_r+0x50>)
 80016c6:	429c      	cmp	r4, r3
 80016c8:	bf08      	it	eq
 80016ca:	68ec      	ldreq	r4, [r5, #12]
 80016cc:	e7ec      	b.n	80016a8 <_fflush_r+0x1c>
 80016ce:	2000      	movs	r0, #0
 80016d0:	bd38      	pop	{r3, r4, r5, pc}
 80016d2:	bf00      	nop
 80016d4:	08002290 	.word	0x08002290
 80016d8:	080022b0 	.word	0x080022b0
 80016dc:	08002270 	.word	0x08002270

080016e0 <std>:
 80016e0:	2300      	movs	r3, #0
 80016e2:	b510      	push	{r4, lr}
 80016e4:	4604      	mov	r4, r0
 80016e6:	e9c0 3300 	strd	r3, r3, [r0]
 80016ea:	6083      	str	r3, [r0, #8]
 80016ec:	8181      	strh	r1, [r0, #12]
 80016ee:	6643      	str	r3, [r0, #100]	; 0x64
 80016f0:	81c2      	strh	r2, [r0, #14]
 80016f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016f6:	6183      	str	r3, [r0, #24]
 80016f8:	4619      	mov	r1, r3
 80016fa:	2208      	movs	r2, #8
 80016fc:	305c      	adds	r0, #92	; 0x5c
 80016fe:	f7ff fdfb 	bl	80012f8 <memset>
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <std+0x38>)
 8001704:	6263      	str	r3, [r4, #36]	; 0x24
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <std+0x3c>)
 8001708:	62a3      	str	r3, [r4, #40]	; 0x28
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <std+0x40>)
 800170c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <std+0x44>)
 8001710:	6224      	str	r4, [r4, #32]
 8001712:	6323      	str	r3, [r4, #48]	; 0x30
 8001714:	bd10      	pop	{r4, pc}
 8001716:	bf00      	nop
 8001718:	08002039 	.word	0x08002039
 800171c:	0800205b 	.word	0x0800205b
 8001720:	08002093 	.word	0x08002093
 8001724:	080020b7 	.word	0x080020b7

08001728 <_cleanup_r>:
 8001728:	4901      	ldr	r1, [pc, #4]	; (8001730 <_cleanup_r+0x8>)
 800172a:	f000 b885 	b.w	8001838 <_fwalk_reent>
 800172e:	bf00      	nop
 8001730:	0800168d 	.word	0x0800168d

08001734 <__sfmoreglue>:
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	1e4a      	subs	r2, r1, #1
 8001738:	2568      	movs	r5, #104	; 0x68
 800173a:	4355      	muls	r5, r2
 800173c:	460e      	mov	r6, r1
 800173e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001742:	f000 f949 	bl	80019d8 <_malloc_r>
 8001746:	4604      	mov	r4, r0
 8001748:	b140      	cbz	r0, 800175c <__sfmoreglue+0x28>
 800174a:	2100      	movs	r1, #0
 800174c:	e9c0 1600 	strd	r1, r6, [r0]
 8001750:	300c      	adds	r0, #12
 8001752:	60a0      	str	r0, [r4, #8]
 8001754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001758:	f7ff fdce 	bl	80012f8 <memset>
 800175c:	4620      	mov	r0, r4
 800175e:	bd70      	pop	{r4, r5, r6, pc}

08001760 <__sinit>:
 8001760:	6983      	ldr	r3, [r0, #24]
 8001762:	b510      	push	{r4, lr}
 8001764:	4604      	mov	r4, r0
 8001766:	bb33      	cbnz	r3, 80017b6 <__sinit+0x56>
 8001768:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800176c:	6503      	str	r3, [r0, #80]	; 0x50
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <__sinit+0x58>)
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <__sinit+0x5c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6282      	str	r2, [r0, #40]	; 0x28
 8001776:	4298      	cmp	r0, r3
 8001778:	bf04      	itt	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	6183      	streq	r3, [r0, #24]
 800177e:	f000 f81f 	bl	80017c0 <__sfp>
 8001782:	6060      	str	r0, [r4, #4]
 8001784:	4620      	mov	r0, r4
 8001786:	f000 f81b 	bl	80017c0 <__sfp>
 800178a:	60a0      	str	r0, [r4, #8]
 800178c:	4620      	mov	r0, r4
 800178e:	f000 f817 	bl	80017c0 <__sfp>
 8001792:	2200      	movs	r2, #0
 8001794:	60e0      	str	r0, [r4, #12]
 8001796:	2104      	movs	r1, #4
 8001798:	6860      	ldr	r0, [r4, #4]
 800179a:	f7ff ffa1 	bl	80016e0 <std>
 800179e:	2201      	movs	r2, #1
 80017a0:	2109      	movs	r1, #9
 80017a2:	68a0      	ldr	r0, [r4, #8]
 80017a4:	f7ff ff9c 	bl	80016e0 <std>
 80017a8:	2202      	movs	r2, #2
 80017aa:	2112      	movs	r1, #18
 80017ac:	68e0      	ldr	r0, [r4, #12]
 80017ae:	f7ff ff97 	bl	80016e0 <std>
 80017b2:	2301      	movs	r3, #1
 80017b4:	61a3      	str	r3, [r4, #24]
 80017b6:	bd10      	pop	{r4, pc}
 80017b8:	0800226c 	.word	0x0800226c
 80017bc:	08001729 	.word	0x08001729

080017c0 <__sfp>:
 80017c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <__sfp+0x70>)
 80017c4:	681e      	ldr	r6, [r3, #0]
 80017c6:	69b3      	ldr	r3, [r6, #24]
 80017c8:	4607      	mov	r7, r0
 80017ca:	b913      	cbnz	r3, 80017d2 <__sfp+0x12>
 80017cc:	4630      	mov	r0, r6
 80017ce:	f7ff ffc7 	bl	8001760 <__sinit>
 80017d2:	3648      	adds	r6, #72	; 0x48
 80017d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80017d8:	3b01      	subs	r3, #1
 80017da:	d503      	bpl.n	80017e4 <__sfp+0x24>
 80017dc:	6833      	ldr	r3, [r6, #0]
 80017de:	b133      	cbz	r3, 80017ee <__sfp+0x2e>
 80017e0:	6836      	ldr	r6, [r6, #0]
 80017e2:	e7f7      	b.n	80017d4 <__sfp+0x14>
 80017e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017e8:	b16d      	cbz	r5, 8001806 <__sfp+0x46>
 80017ea:	3468      	adds	r4, #104	; 0x68
 80017ec:	e7f4      	b.n	80017d8 <__sfp+0x18>
 80017ee:	2104      	movs	r1, #4
 80017f0:	4638      	mov	r0, r7
 80017f2:	f7ff ff9f 	bl	8001734 <__sfmoreglue>
 80017f6:	6030      	str	r0, [r6, #0]
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d1f1      	bne.n	80017e0 <__sfp+0x20>
 80017fc:	230c      	movs	r3, #12
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	4604      	mov	r4, r0
 8001802:	4620      	mov	r0, r4
 8001804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <__sfp+0x74>)
 8001808:	6665      	str	r5, [r4, #100]	; 0x64
 800180a:	e9c4 5500 	strd	r5, r5, [r4]
 800180e:	60a5      	str	r5, [r4, #8]
 8001810:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001814:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001818:	2208      	movs	r2, #8
 800181a:	4629      	mov	r1, r5
 800181c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001820:	f7ff fd6a 	bl	80012f8 <memset>
 8001824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800182c:	e7e9      	b.n	8001802 <__sfp+0x42>
 800182e:	bf00      	nop
 8001830:	0800226c 	.word	0x0800226c
 8001834:	ffff0001 	.word	0xffff0001

08001838 <_fwalk_reent>:
 8001838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800183c:	4680      	mov	r8, r0
 800183e:	4689      	mov	r9, r1
 8001840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001844:	2600      	movs	r6, #0
 8001846:	b914      	cbnz	r4, 800184e <_fwalk_reent+0x16>
 8001848:	4630      	mov	r0, r6
 800184a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800184e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001852:	3f01      	subs	r7, #1
 8001854:	d501      	bpl.n	800185a <_fwalk_reent+0x22>
 8001856:	6824      	ldr	r4, [r4, #0]
 8001858:	e7f5      	b.n	8001846 <_fwalk_reent+0xe>
 800185a:	89ab      	ldrh	r3, [r5, #12]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d907      	bls.n	8001870 <_fwalk_reent+0x38>
 8001860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001864:	3301      	adds	r3, #1
 8001866:	d003      	beq.n	8001870 <_fwalk_reent+0x38>
 8001868:	4629      	mov	r1, r5
 800186a:	4640      	mov	r0, r8
 800186c:	47c8      	blx	r9
 800186e:	4306      	orrs	r6, r0
 8001870:	3568      	adds	r5, #104	; 0x68
 8001872:	e7ee      	b.n	8001852 <_fwalk_reent+0x1a>

08001874 <__swhatbuf_r>:
 8001874:	b570      	push	{r4, r5, r6, lr}
 8001876:	460e      	mov	r6, r1
 8001878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800187c:	2900      	cmp	r1, #0
 800187e:	b096      	sub	sp, #88	; 0x58
 8001880:	4614      	mov	r4, r2
 8001882:	461d      	mov	r5, r3
 8001884:	da07      	bge.n	8001896 <__swhatbuf_r+0x22>
 8001886:	2300      	movs	r3, #0
 8001888:	602b      	str	r3, [r5, #0]
 800188a:	89b3      	ldrh	r3, [r6, #12]
 800188c:	061a      	lsls	r2, r3, #24
 800188e:	d410      	bmi.n	80018b2 <__swhatbuf_r+0x3e>
 8001890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001894:	e00e      	b.n	80018b4 <__swhatbuf_r+0x40>
 8001896:	466a      	mov	r2, sp
 8001898:	f000 fc34 	bl	8002104 <_fstat_r>
 800189c:	2800      	cmp	r0, #0
 800189e:	dbf2      	blt.n	8001886 <__swhatbuf_r+0x12>
 80018a0:	9a01      	ldr	r2, [sp, #4]
 80018a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80018a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80018aa:	425a      	negs	r2, r3
 80018ac:	415a      	adcs	r2, r3
 80018ae:	602a      	str	r2, [r5, #0]
 80018b0:	e7ee      	b.n	8001890 <__swhatbuf_r+0x1c>
 80018b2:	2340      	movs	r3, #64	; 0x40
 80018b4:	2000      	movs	r0, #0
 80018b6:	6023      	str	r3, [r4, #0]
 80018b8:	b016      	add	sp, #88	; 0x58
 80018ba:	bd70      	pop	{r4, r5, r6, pc}

080018bc <__smakebuf_r>:
 80018bc:	898b      	ldrh	r3, [r1, #12]
 80018be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018c0:	079d      	lsls	r5, r3, #30
 80018c2:	4606      	mov	r6, r0
 80018c4:	460c      	mov	r4, r1
 80018c6:	d507      	bpl.n	80018d8 <__smakebuf_r+0x1c>
 80018c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80018cc:	6023      	str	r3, [r4, #0]
 80018ce:	6123      	str	r3, [r4, #16]
 80018d0:	2301      	movs	r3, #1
 80018d2:	6163      	str	r3, [r4, #20]
 80018d4:	b002      	add	sp, #8
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
 80018d8:	ab01      	add	r3, sp, #4
 80018da:	466a      	mov	r2, sp
 80018dc:	f7ff ffca 	bl	8001874 <__swhatbuf_r>
 80018e0:	9900      	ldr	r1, [sp, #0]
 80018e2:	4605      	mov	r5, r0
 80018e4:	4630      	mov	r0, r6
 80018e6:	f000 f877 	bl	80019d8 <_malloc_r>
 80018ea:	b948      	cbnz	r0, 8001900 <__smakebuf_r+0x44>
 80018ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018f0:	059a      	lsls	r2, r3, #22
 80018f2:	d4ef      	bmi.n	80018d4 <__smakebuf_r+0x18>
 80018f4:	f023 0303 	bic.w	r3, r3, #3
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	81a3      	strh	r3, [r4, #12]
 80018fe:	e7e3      	b.n	80018c8 <__smakebuf_r+0xc>
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <__smakebuf_r+0x7c>)
 8001902:	62b3      	str	r3, [r6, #40]	; 0x28
 8001904:	89a3      	ldrh	r3, [r4, #12]
 8001906:	6020      	str	r0, [r4, #0]
 8001908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190c:	81a3      	strh	r3, [r4, #12]
 800190e:	9b00      	ldr	r3, [sp, #0]
 8001910:	6163      	str	r3, [r4, #20]
 8001912:	9b01      	ldr	r3, [sp, #4]
 8001914:	6120      	str	r0, [r4, #16]
 8001916:	b15b      	cbz	r3, 8001930 <__smakebuf_r+0x74>
 8001918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800191c:	4630      	mov	r0, r6
 800191e:	f000 fc03 	bl	8002128 <_isatty_r>
 8001922:	b128      	cbz	r0, 8001930 <__smakebuf_r+0x74>
 8001924:	89a3      	ldrh	r3, [r4, #12]
 8001926:	f023 0303 	bic.w	r3, r3, #3
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	81a3      	strh	r3, [r4, #12]
 8001930:	89a3      	ldrh	r3, [r4, #12]
 8001932:	431d      	orrs	r5, r3
 8001934:	81a5      	strh	r5, [r4, #12]
 8001936:	e7cd      	b.n	80018d4 <__smakebuf_r+0x18>
 8001938:	08001729 	.word	0x08001729

0800193c <_free_r>:
 800193c:	b538      	push	{r3, r4, r5, lr}
 800193e:	4605      	mov	r5, r0
 8001940:	2900      	cmp	r1, #0
 8001942:	d045      	beq.n	80019d0 <_free_r+0x94>
 8001944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001948:	1f0c      	subs	r4, r1, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	bfb8      	it	lt
 800194e:	18e4      	addlt	r4, r4, r3
 8001950:	f000 fc0c 	bl	800216c <__malloc_lock>
 8001954:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <_free_r+0x98>)
 8001956:	6813      	ldr	r3, [r2, #0]
 8001958:	4610      	mov	r0, r2
 800195a:	b933      	cbnz	r3, 800196a <_free_r+0x2e>
 800195c:	6063      	str	r3, [r4, #4]
 800195e:	6014      	str	r4, [r2, #0]
 8001960:	4628      	mov	r0, r5
 8001962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001966:	f000 bc02 	b.w	800216e <__malloc_unlock>
 800196a:	42a3      	cmp	r3, r4
 800196c:	d90c      	bls.n	8001988 <_free_r+0x4c>
 800196e:	6821      	ldr	r1, [r4, #0]
 8001970:	1862      	adds	r2, r4, r1
 8001972:	4293      	cmp	r3, r2
 8001974:	bf04      	itt	eq
 8001976:	681a      	ldreq	r2, [r3, #0]
 8001978:	685b      	ldreq	r3, [r3, #4]
 800197a:	6063      	str	r3, [r4, #4]
 800197c:	bf04      	itt	eq
 800197e:	1852      	addeq	r2, r2, r1
 8001980:	6022      	streq	r2, [r4, #0]
 8001982:	6004      	str	r4, [r0, #0]
 8001984:	e7ec      	b.n	8001960 <_free_r+0x24>
 8001986:	4613      	mov	r3, r2
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	b10a      	cbz	r2, 8001990 <_free_r+0x54>
 800198c:	42a2      	cmp	r2, r4
 800198e:	d9fa      	bls.n	8001986 <_free_r+0x4a>
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	1858      	adds	r0, r3, r1
 8001994:	42a0      	cmp	r0, r4
 8001996:	d10b      	bne.n	80019b0 <_free_r+0x74>
 8001998:	6820      	ldr	r0, [r4, #0]
 800199a:	4401      	add	r1, r0
 800199c:	1858      	adds	r0, r3, r1
 800199e:	4282      	cmp	r2, r0
 80019a0:	6019      	str	r1, [r3, #0]
 80019a2:	d1dd      	bne.n	8001960 <_free_r+0x24>
 80019a4:	6810      	ldr	r0, [r2, #0]
 80019a6:	6852      	ldr	r2, [r2, #4]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	4401      	add	r1, r0
 80019ac:	6019      	str	r1, [r3, #0]
 80019ae:	e7d7      	b.n	8001960 <_free_r+0x24>
 80019b0:	d902      	bls.n	80019b8 <_free_r+0x7c>
 80019b2:	230c      	movs	r3, #12
 80019b4:	602b      	str	r3, [r5, #0]
 80019b6:	e7d3      	b.n	8001960 <_free_r+0x24>
 80019b8:	6820      	ldr	r0, [r4, #0]
 80019ba:	1821      	adds	r1, r4, r0
 80019bc:	428a      	cmp	r2, r1
 80019be:	bf04      	itt	eq
 80019c0:	6811      	ldreq	r1, [r2, #0]
 80019c2:	6852      	ldreq	r2, [r2, #4]
 80019c4:	6062      	str	r2, [r4, #4]
 80019c6:	bf04      	itt	eq
 80019c8:	1809      	addeq	r1, r1, r0
 80019ca:	6021      	streq	r1, [r4, #0]
 80019cc:	605c      	str	r4, [r3, #4]
 80019ce:	e7c7      	b.n	8001960 <_free_r+0x24>
 80019d0:	bd38      	pop	{r3, r4, r5, pc}
 80019d2:	bf00      	nop
 80019d4:	20000088 	.word	0x20000088

080019d8 <_malloc_r>:
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	1ccd      	adds	r5, r1, #3
 80019dc:	f025 0503 	bic.w	r5, r5, #3
 80019e0:	3508      	adds	r5, #8
 80019e2:	2d0c      	cmp	r5, #12
 80019e4:	bf38      	it	cc
 80019e6:	250c      	movcc	r5, #12
 80019e8:	2d00      	cmp	r5, #0
 80019ea:	4606      	mov	r6, r0
 80019ec:	db01      	blt.n	80019f2 <_malloc_r+0x1a>
 80019ee:	42a9      	cmp	r1, r5
 80019f0:	d903      	bls.n	80019fa <_malloc_r+0x22>
 80019f2:	230c      	movs	r3, #12
 80019f4:	6033      	str	r3, [r6, #0]
 80019f6:	2000      	movs	r0, #0
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
 80019fa:	f000 fbb7 	bl	800216c <__malloc_lock>
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <_malloc_r+0xac>)
 8001a00:	6814      	ldr	r4, [r2, #0]
 8001a02:	4621      	mov	r1, r4
 8001a04:	b991      	cbnz	r1, 8001a2c <_malloc_r+0x54>
 8001a06:	4c20      	ldr	r4, [pc, #128]	; (8001a88 <_malloc_r+0xb0>)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	b91b      	cbnz	r3, 8001a14 <_malloc_r+0x3c>
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	f000 fb03 	bl	8002018 <_sbrk_r>
 8001a12:	6020      	str	r0, [r4, #0]
 8001a14:	4629      	mov	r1, r5
 8001a16:	4630      	mov	r0, r6
 8001a18:	f000 fafe 	bl	8002018 <_sbrk_r>
 8001a1c:	1c43      	adds	r3, r0, #1
 8001a1e:	d124      	bne.n	8001a6a <_malloc_r+0x92>
 8001a20:	230c      	movs	r3, #12
 8001a22:	6033      	str	r3, [r6, #0]
 8001a24:	4630      	mov	r0, r6
 8001a26:	f000 fba2 	bl	800216e <__malloc_unlock>
 8001a2a:	e7e4      	b.n	80019f6 <_malloc_r+0x1e>
 8001a2c:	680b      	ldr	r3, [r1, #0]
 8001a2e:	1b5b      	subs	r3, r3, r5
 8001a30:	d418      	bmi.n	8001a64 <_malloc_r+0x8c>
 8001a32:	2b0b      	cmp	r3, #11
 8001a34:	d90f      	bls.n	8001a56 <_malloc_r+0x7e>
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	50cd      	str	r5, [r1, r3]
 8001a3a:	18cc      	adds	r4, r1, r3
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f000 fb96 	bl	800216e <__malloc_unlock>
 8001a42:	f104 000b 	add.w	r0, r4, #11
 8001a46:	1d23      	adds	r3, r4, #4
 8001a48:	f020 0007 	bic.w	r0, r0, #7
 8001a4c:	1ac3      	subs	r3, r0, r3
 8001a4e:	d0d3      	beq.n	80019f8 <_malloc_r+0x20>
 8001a50:	425a      	negs	r2, r3
 8001a52:	50e2      	str	r2, [r4, r3]
 8001a54:	e7d0      	b.n	80019f8 <_malloc_r+0x20>
 8001a56:	428c      	cmp	r4, r1
 8001a58:	684b      	ldr	r3, [r1, #4]
 8001a5a:	bf16      	itet	ne
 8001a5c:	6063      	strne	r3, [r4, #4]
 8001a5e:	6013      	streq	r3, [r2, #0]
 8001a60:	460c      	movne	r4, r1
 8001a62:	e7eb      	b.n	8001a3c <_malloc_r+0x64>
 8001a64:	460c      	mov	r4, r1
 8001a66:	6849      	ldr	r1, [r1, #4]
 8001a68:	e7cc      	b.n	8001a04 <_malloc_r+0x2c>
 8001a6a:	1cc4      	adds	r4, r0, #3
 8001a6c:	f024 0403 	bic.w	r4, r4, #3
 8001a70:	42a0      	cmp	r0, r4
 8001a72:	d005      	beq.n	8001a80 <_malloc_r+0xa8>
 8001a74:	1a21      	subs	r1, r4, r0
 8001a76:	4630      	mov	r0, r6
 8001a78:	f000 face 	bl	8002018 <_sbrk_r>
 8001a7c:	3001      	adds	r0, #1
 8001a7e:	d0cf      	beq.n	8001a20 <_malloc_r+0x48>
 8001a80:	6025      	str	r5, [r4, #0]
 8001a82:	e7db      	b.n	8001a3c <_malloc_r+0x64>
 8001a84:	20000088 	.word	0x20000088
 8001a88:	2000008c 	.word	0x2000008c

08001a8c <__sfputc_r>:
 8001a8c:	6893      	ldr	r3, [r2, #8]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	b410      	push	{r4}
 8001a94:	6093      	str	r3, [r2, #8]
 8001a96:	da07      	bge.n	8001aa8 <__sfputc_r+0x1c>
 8001a98:	6994      	ldr	r4, [r2, #24]
 8001a9a:	42a3      	cmp	r3, r4
 8001a9c:	db01      	blt.n	8001aa2 <__sfputc_r+0x16>
 8001a9e:	290a      	cmp	r1, #10
 8001aa0:	d102      	bne.n	8001aa8 <__sfputc_r+0x1c>
 8001aa2:	bc10      	pop	{r4}
 8001aa4:	f7ff bcac 	b.w	8001400 <__swbuf_r>
 8001aa8:	6813      	ldr	r3, [r2, #0]
 8001aaa:	1c58      	adds	r0, r3, #1
 8001aac:	6010      	str	r0, [r2, #0]
 8001aae:	7019      	strb	r1, [r3, #0]
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	bc10      	pop	{r4}
 8001ab4:	4770      	bx	lr

08001ab6 <__sfputs_r>:
 8001ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab8:	4606      	mov	r6, r0
 8001aba:	460f      	mov	r7, r1
 8001abc:	4614      	mov	r4, r2
 8001abe:	18d5      	adds	r5, r2, r3
 8001ac0:	42ac      	cmp	r4, r5
 8001ac2:	d101      	bne.n	8001ac8 <__sfputs_r+0x12>
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	e007      	b.n	8001ad8 <__sfputs_r+0x22>
 8001ac8:	463a      	mov	r2, r7
 8001aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ace:	4630      	mov	r0, r6
 8001ad0:	f7ff ffdc 	bl	8001a8c <__sfputc_r>
 8001ad4:	1c43      	adds	r3, r0, #1
 8001ad6:	d1f3      	bne.n	8001ac0 <__sfputs_r+0xa>
 8001ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001adc <_vfiprintf_r>:
 8001adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	b09d      	sub	sp, #116	; 0x74
 8001ae4:	4617      	mov	r7, r2
 8001ae6:	461d      	mov	r5, r3
 8001ae8:	4606      	mov	r6, r0
 8001aea:	b118      	cbz	r0, 8001af4 <_vfiprintf_r+0x18>
 8001aec:	6983      	ldr	r3, [r0, #24]
 8001aee:	b90b      	cbnz	r3, 8001af4 <_vfiprintf_r+0x18>
 8001af0:	f7ff fe36 	bl	8001760 <__sinit>
 8001af4:	4b7c      	ldr	r3, [pc, #496]	; (8001ce8 <_vfiprintf_r+0x20c>)
 8001af6:	429c      	cmp	r4, r3
 8001af8:	d158      	bne.n	8001bac <_vfiprintf_r+0xd0>
 8001afa:	6874      	ldr	r4, [r6, #4]
 8001afc:	89a3      	ldrh	r3, [r4, #12]
 8001afe:	0718      	lsls	r0, r3, #28
 8001b00:	d55e      	bpl.n	8001bc0 <_vfiprintf_r+0xe4>
 8001b02:	6923      	ldr	r3, [r4, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d05b      	beq.n	8001bc0 <_vfiprintf_r+0xe4>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b12:	2330      	movs	r3, #48	; 0x30
 8001b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b18:	9503      	str	r5, [sp, #12]
 8001b1a:	f04f 0b01 	mov.w	fp, #1
 8001b1e:	46b8      	mov	r8, r7
 8001b20:	4645      	mov	r5, r8
 8001b22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001b26:	b10b      	cbz	r3, 8001b2c <_vfiprintf_r+0x50>
 8001b28:	2b25      	cmp	r3, #37	; 0x25
 8001b2a:	d154      	bne.n	8001bd6 <_vfiprintf_r+0xfa>
 8001b2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8001b30:	d00b      	beq.n	8001b4a <_vfiprintf_r+0x6e>
 8001b32:	4653      	mov	r3, sl
 8001b34:	463a      	mov	r2, r7
 8001b36:	4621      	mov	r1, r4
 8001b38:	4630      	mov	r0, r6
 8001b3a:	f7ff ffbc 	bl	8001ab6 <__sfputs_r>
 8001b3e:	3001      	adds	r0, #1
 8001b40:	f000 80c2 	beq.w	8001cc8 <_vfiprintf_r+0x1ec>
 8001b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b46:	4453      	add	r3, sl
 8001b48:	9309      	str	r3, [sp, #36]	; 0x24
 8001b4a:	f898 3000 	ldrb.w	r3, [r8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80ba 	beq.w	8001cc8 <_vfiprintf_r+0x1ec>
 8001b54:	2300      	movs	r3, #0
 8001b56:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b5e:	9304      	str	r3, [sp, #16]
 8001b60:	9307      	str	r3, [sp, #28]
 8001b62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b66:	931a      	str	r3, [sp, #104]	; 0x68
 8001b68:	46a8      	mov	r8, r5
 8001b6a:	2205      	movs	r2, #5
 8001b6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001b70:	485e      	ldr	r0, [pc, #376]	; (8001cec <_vfiprintf_r+0x210>)
 8001b72:	f7fe fb4d 	bl	8000210 <memchr>
 8001b76:	9b04      	ldr	r3, [sp, #16]
 8001b78:	bb78      	cbnz	r0, 8001bda <_vfiprintf_r+0xfe>
 8001b7a:	06d9      	lsls	r1, r3, #27
 8001b7c:	bf44      	itt	mi
 8001b7e:	2220      	movmi	r2, #32
 8001b80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b84:	071a      	lsls	r2, r3, #28
 8001b86:	bf44      	itt	mi
 8001b88:	222b      	movmi	r2, #43	; 0x2b
 8001b8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b8e:	782a      	ldrb	r2, [r5, #0]
 8001b90:	2a2a      	cmp	r2, #42	; 0x2a
 8001b92:	d02a      	beq.n	8001bea <_vfiprintf_r+0x10e>
 8001b94:	9a07      	ldr	r2, [sp, #28]
 8001b96:	46a8      	mov	r8, r5
 8001b98:	2000      	movs	r0, #0
 8001b9a:	250a      	movs	r5, #10
 8001b9c:	4641      	mov	r1, r8
 8001b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ba2:	3b30      	subs	r3, #48	; 0x30
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d969      	bls.n	8001c7c <_vfiprintf_r+0x1a0>
 8001ba8:	b360      	cbz	r0, 8001c04 <_vfiprintf_r+0x128>
 8001baa:	e024      	b.n	8001bf6 <_vfiprintf_r+0x11a>
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <_vfiprintf_r+0x214>)
 8001bae:	429c      	cmp	r4, r3
 8001bb0:	d101      	bne.n	8001bb6 <_vfiprintf_r+0xda>
 8001bb2:	68b4      	ldr	r4, [r6, #8]
 8001bb4:	e7a2      	b.n	8001afc <_vfiprintf_r+0x20>
 8001bb6:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <_vfiprintf_r+0x218>)
 8001bb8:	429c      	cmp	r4, r3
 8001bba:	bf08      	it	eq
 8001bbc:	68f4      	ldreq	r4, [r6, #12]
 8001bbe:	e79d      	b.n	8001afc <_vfiprintf_r+0x20>
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	f7ff fc6e 	bl	80014a4 <__swsetup_r>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d09d      	beq.n	8001b08 <_vfiprintf_r+0x2c>
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	b01d      	add	sp, #116	; 0x74
 8001bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bd6:	46a8      	mov	r8, r5
 8001bd8:	e7a2      	b.n	8001b20 <_vfiprintf_r+0x44>
 8001bda:	4a44      	ldr	r2, [pc, #272]	; (8001cec <_vfiprintf_r+0x210>)
 8001bdc:	1a80      	subs	r0, r0, r2
 8001bde:	fa0b f000 	lsl.w	r0, fp, r0
 8001be2:	4318      	orrs	r0, r3
 8001be4:	9004      	str	r0, [sp, #16]
 8001be6:	4645      	mov	r5, r8
 8001be8:	e7be      	b.n	8001b68 <_vfiprintf_r+0x8c>
 8001bea:	9a03      	ldr	r2, [sp, #12]
 8001bec:	1d11      	adds	r1, r2, #4
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	9103      	str	r1, [sp, #12]
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	db01      	blt.n	8001bfa <_vfiprintf_r+0x11e>
 8001bf6:	9207      	str	r2, [sp, #28]
 8001bf8:	e004      	b.n	8001c04 <_vfiprintf_r+0x128>
 8001bfa:	4252      	negs	r2, r2
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	9207      	str	r2, [sp, #28]
 8001c02:	9304      	str	r3, [sp, #16]
 8001c04:	f898 3000 	ldrb.w	r3, [r8]
 8001c08:	2b2e      	cmp	r3, #46	; 0x2e
 8001c0a:	d10e      	bne.n	8001c2a <_vfiprintf_r+0x14e>
 8001c0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001c10:	2b2a      	cmp	r3, #42	; 0x2a
 8001c12:	d138      	bne.n	8001c86 <_vfiprintf_r+0x1aa>
 8001c14:	9b03      	ldr	r3, [sp, #12]
 8001c16:	1d1a      	adds	r2, r3, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	9203      	str	r2, [sp, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfb8      	it	lt
 8001c20:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c24:	f108 0802 	add.w	r8, r8, #2
 8001c28:	9305      	str	r3, [sp, #20]
 8001c2a:	4d33      	ldr	r5, [pc, #204]	; (8001cf8 <_vfiprintf_r+0x21c>)
 8001c2c:	f898 1000 	ldrb.w	r1, [r8]
 8001c30:	2203      	movs	r2, #3
 8001c32:	4628      	mov	r0, r5
 8001c34:	f7fe faec 	bl	8000210 <memchr>
 8001c38:	b140      	cbz	r0, 8001c4c <_vfiprintf_r+0x170>
 8001c3a:	2340      	movs	r3, #64	; 0x40
 8001c3c:	1b40      	subs	r0, r0, r5
 8001c3e:	fa03 f000 	lsl.w	r0, r3, r0
 8001c42:	9b04      	ldr	r3, [sp, #16]
 8001c44:	4303      	orrs	r3, r0
 8001c46:	f108 0801 	add.w	r8, r8, #1
 8001c4a:	9304      	str	r3, [sp, #16]
 8001c4c:	f898 1000 	ldrb.w	r1, [r8]
 8001c50:	482a      	ldr	r0, [pc, #168]	; (8001cfc <_vfiprintf_r+0x220>)
 8001c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c56:	2206      	movs	r2, #6
 8001c58:	f108 0701 	add.w	r7, r8, #1
 8001c5c:	f7fe fad8 	bl	8000210 <memchr>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d037      	beq.n	8001cd4 <_vfiprintf_r+0x1f8>
 8001c64:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <_vfiprintf_r+0x224>)
 8001c66:	bb1b      	cbnz	r3, 8001cb0 <_vfiprintf_r+0x1d4>
 8001c68:	9b03      	ldr	r3, [sp, #12]
 8001c6a:	3307      	adds	r3, #7
 8001c6c:	f023 0307 	bic.w	r3, r3, #7
 8001c70:	3308      	adds	r3, #8
 8001c72:	9303      	str	r3, [sp, #12]
 8001c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c76:	444b      	add	r3, r9
 8001c78:	9309      	str	r3, [sp, #36]	; 0x24
 8001c7a:	e750      	b.n	8001b1e <_vfiprintf_r+0x42>
 8001c7c:	fb05 3202 	mla	r2, r5, r2, r3
 8001c80:	2001      	movs	r0, #1
 8001c82:	4688      	mov	r8, r1
 8001c84:	e78a      	b.n	8001b9c <_vfiprintf_r+0xc0>
 8001c86:	2300      	movs	r3, #0
 8001c88:	f108 0801 	add.w	r8, r8, #1
 8001c8c:	9305      	str	r3, [sp, #20]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	250a      	movs	r5, #10
 8001c92:	4640      	mov	r0, r8
 8001c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c98:	3a30      	subs	r2, #48	; 0x30
 8001c9a:	2a09      	cmp	r2, #9
 8001c9c:	d903      	bls.n	8001ca6 <_vfiprintf_r+0x1ca>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0c3      	beq.n	8001c2a <_vfiprintf_r+0x14e>
 8001ca2:	9105      	str	r1, [sp, #20]
 8001ca4:	e7c1      	b.n	8001c2a <_vfiprintf_r+0x14e>
 8001ca6:	fb05 2101 	mla	r1, r5, r1, r2
 8001caa:	2301      	movs	r3, #1
 8001cac:	4680      	mov	r8, r0
 8001cae:	e7f0      	b.n	8001c92 <_vfiprintf_r+0x1b6>
 8001cb0:	ab03      	add	r3, sp, #12
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	4622      	mov	r2, r4
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <_vfiprintf_r+0x228>)
 8001cb8:	a904      	add	r1, sp, #16
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001cc4:	4681      	mov	r9, r0
 8001cc6:	d1d5      	bne.n	8001c74 <_vfiprintf_r+0x198>
 8001cc8:	89a3      	ldrh	r3, [r4, #12]
 8001cca:	065b      	lsls	r3, r3, #25
 8001ccc:	f53f af7e 	bmi.w	8001bcc <_vfiprintf_r+0xf0>
 8001cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001cd2:	e77d      	b.n	8001bd0 <_vfiprintf_r+0xf4>
 8001cd4:	ab03      	add	r3, sp, #12
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	4622      	mov	r2, r4
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <_vfiprintf_r+0x228>)
 8001cdc:	a904      	add	r1, sp, #16
 8001cde:	4630      	mov	r0, r6
 8001ce0:	f000 f888 	bl	8001df4 <_printf_i>
 8001ce4:	e7ec      	b.n	8001cc0 <_vfiprintf_r+0x1e4>
 8001ce6:	bf00      	nop
 8001ce8:	08002290 	.word	0x08002290
 8001cec:	080022d0 	.word	0x080022d0
 8001cf0:	080022b0 	.word	0x080022b0
 8001cf4:	08002270 	.word	0x08002270
 8001cf8:	080022d6 	.word	0x080022d6
 8001cfc:	080022da 	.word	0x080022da
 8001d00:	00000000 	.word	0x00000000
 8001d04:	08001ab7 	.word	0x08001ab7

08001d08 <_printf_common>:
 8001d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d0c:	4691      	mov	r9, r2
 8001d0e:	461f      	mov	r7, r3
 8001d10:	688a      	ldr	r2, [r1, #8]
 8001d12:	690b      	ldr	r3, [r1, #16]
 8001d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	bfb8      	it	lt
 8001d1c:	4613      	movlt	r3, r2
 8001d1e:	f8c9 3000 	str.w	r3, [r9]
 8001d22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d26:	4606      	mov	r6, r0
 8001d28:	460c      	mov	r4, r1
 8001d2a:	b112      	cbz	r2, 8001d32 <_printf_common+0x2a>
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f8c9 3000 	str.w	r3, [r9]
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	0699      	lsls	r1, r3, #26
 8001d36:	bf42      	ittt	mi
 8001d38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d3c:	3302      	addmi	r3, #2
 8001d3e:	f8c9 3000 	strmi.w	r3, [r9]
 8001d42:	6825      	ldr	r5, [r4, #0]
 8001d44:	f015 0506 	ands.w	r5, r5, #6
 8001d48:	d107      	bne.n	8001d5a <_printf_common+0x52>
 8001d4a:	f104 0a19 	add.w	sl, r4, #25
 8001d4e:	68e3      	ldr	r3, [r4, #12]
 8001d50:	f8d9 2000 	ldr.w	r2, [r9]
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	42ab      	cmp	r3, r5
 8001d58:	dc28      	bgt.n	8001dac <_printf_common+0xa4>
 8001d5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	3300      	adds	r3, #0
 8001d62:	bf18      	it	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	0692      	lsls	r2, r2, #26
 8001d68:	d42d      	bmi.n	8001dc6 <_printf_common+0xbe>
 8001d6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d6e:	4639      	mov	r1, r7
 8001d70:	4630      	mov	r0, r6
 8001d72:	47c0      	blx	r8
 8001d74:	3001      	adds	r0, #1
 8001d76:	d020      	beq.n	8001dba <_printf_common+0xb2>
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	68e5      	ldr	r5, [r4, #12]
 8001d7c:	f8d9 2000 	ldr.w	r2, [r9]
 8001d80:	f003 0306 	and.w	r3, r3, #6
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	bf08      	it	eq
 8001d88:	1aad      	subeq	r5, r5, r2
 8001d8a:	68a3      	ldr	r3, [r4, #8]
 8001d8c:	6922      	ldr	r2, [r4, #16]
 8001d8e:	bf0c      	ite	eq
 8001d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d94:	2500      	movne	r5, #0
 8001d96:	4293      	cmp	r3, r2
 8001d98:	bfc4      	itt	gt
 8001d9a:	1a9b      	subgt	r3, r3, r2
 8001d9c:	18ed      	addgt	r5, r5, r3
 8001d9e:	f04f 0900 	mov.w	r9, #0
 8001da2:	341a      	adds	r4, #26
 8001da4:	454d      	cmp	r5, r9
 8001da6:	d11a      	bne.n	8001dde <_printf_common+0xd6>
 8001da8:	2000      	movs	r0, #0
 8001daa:	e008      	b.n	8001dbe <_printf_common+0xb6>
 8001dac:	2301      	movs	r3, #1
 8001dae:	4652      	mov	r2, sl
 8001db0:	4639      	mov	r1, r7
 8001db2:	4630      	mov	r0, r6
 8001db4:	47c0      	blx	r8
 8001db6:	3001      	adds	r0, #1
 8001db8:	d103      	bne.n	8001dc2 <_printf_common+0xba>
 8001dba:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dc2:	3501      	adds	r5, #1
 8001dc4:	e7c3      	b.n	8001d4e <_printf_common+0x46>
 8001dc6:	18e1      	adds	r1, r4, r3
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	2030      	movs	r0, #48	; 0x30
 8001dcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001dd0:	4422      	add	r2, r4
 8001dd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001dd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001dda:	3302      	adds	r3, #2
 8001ddc:	e7c5      	b.n	8001d6a <_printf_common+0x62>
 8001dde:	2301      	movs	r3, #1
 8001de0:	4622      	mov	r2, r4
 8001de2:	4639      	mov	r1, r7
 8001de4:	4630      	mov	r0, r6
 8001de6:	47c0      	blx	r8
 8001de8:	3001      	adds	r0, #1
 8001dea:	d0e6      	beq.n	8001dba <_printf_common+0xb2>
 8001dec:	f109 0901 	add.w	r9, r9, #1
 8001df0:	e7d8      	b.n	8001da4 <_printf_common+0x9c>
	...

08001df4 <_printf_i>:
 8001df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001df8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	7e09      	ldrb	r1, [r1, #24]
 8001e00:	b085      	sub	sp, #20
 8001e02:	296e      	cmp	r1, #110	; 0x6e
 8001e04:	4617      	mov	r7, r2
 8001e06:	4606      	mov	r6, r0
 8001e08:	4698      	mov	r8, r3
 8001e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e0c:	f000 80b3 	beq.w	8001f76 <_printf_i+0x182>
 8001e10:	d822      	bhi.n	8001e58 <_printf_i+0x64>
 8001e12:	2963      	cmp	r1, #99	; 0x63
 8001e14:	d036      	beq.n	8001e84 <_printf_i+0x90>
 8001e16:	d80a      	bhi.n	8001e2e <_printf_i+0x3a>
 8001e18:	2900      	cmp	r1, #0
 8001e1a:	f000 80b9 	beq.w	8001f90 <_printf_i+0x19c>
 8001e1e:	2958      	cmp	r1, #88	; 0x58
 8001e20:	f000 8083 	beq.w	8001f2a <_printf_i+0x136>
 8001e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001e2c:	e032      	b.n	8001e94 <_printf_i+0xa0>
 8001e2e:	2964      	cmp	r1, #100	; 0x64
 8001e30:	d001      	beq.n	8001e36 <_printf_i+0x42>
 8001e32:	2969      	cmp	r1, #105	; 0x69
 8001e34:	d1f6      	bne.n	8001e24 <_printf_i+0x30>
 8001e36:	6820      	ldr	r0, [r4, #0]
 8001e38:	6813      	ldr	r3, [r2, #0]
 8001e3a:	0605      	lsls	r5, r0, #24
 8001e3c:	f103 0104 	add.w	r1, r3, #4
 8001e40:	d52a      	bpl.n	8001e98 <_printf_i+0xa4>
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6011      	str	r1, [r2, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da03      	bge.n	8001e52 <_printf_i+0x5e>
 8001e4a:	222d      	movs	r2, #45	; 0x2d
 8001e4c:	425b      	negs	r3, r3
 8001e4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001e52:	486f      	ldr	r0, [pc, #444]	; (8002010 <_printf_i+0x21c>)
 8001e54:	220a      	movs	r2, #10
 8001e56:	e039      	b.n	8001ecc <_printf_i+0xd8>
 8001e58:	2973      	cmp	r1, #115	; 0x73
 8001e5a:	f000 809d 	beq.w	8001f98 <_printf_i+0x1a4>
 8001e5e:	d808      	bhi.n	8001e72 <_printf_i+0x7e>
 8001e60:	296f      	cmp	r1, #111	; 0x6f
 8001e62:	d020      	beq.n	8001ea6 <_printf_i+0xb2>
 8001e64:	2970      	cmp	r1, #112	; 0x70
 8001e66:	d1dd      	bne.n	8001e24 <_printf_i+0x30>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
 8001e6e:	6023      	str	r3, [r4, #0]
 8001e70:	e003      	b.n	8001e7a <_printf_i+0x86>
 8001e72:	2975      	cmp	r1, #117	; 0x75
 8001e74:	d017      	beq.n	8001ea6 <_printf_i+0xb2>
 8001e76:	2978      	cmp	r1, #120	; 0x78
 8001e78:	d1d4      	bne.n	8001e24 <_printf_i+0x30>
 8001e7a:	2378      	movs	r3, #120	; 0x78
 8001e7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e80:	4864      	ldr	r0, [pc, #400]	; (8002014 <_printf_i+0x220>)
 8001e82:	e055      	b.n	8001f30 <_printf_i+0x13c>
 8001e84:	6813      	ldr	r3, [r2, #0]
 8001e86:	1d19      	adds	r1, r3, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e94:	2301      	movs	r3, #1
 8001e96:	e08c      	b.n	8001fb2 <_printf_i+0x1be>
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6011      	str	r1, [r2, #0]
 8001e9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ea0:	bf18      	it	ne
 8001ea2:	b21b      	sxthne	r3, r3
 8001ea4:	e7cf      	b.n	8001e46 <_printf_i+0x52>
 8001ea6:	6813      	ldr	r3, [r2, #0]
 8001ea8:	6825      	ldr	r5, [r4, #0]
 8001eaa:	1d18      	adds	r0, r3, #4
 8001eac:	6010      	str	r0, [r2, #0]
 8001eae:	0628      	lsls	r0, r5, #24
 8001eb0:	d501      	bpl.n	8001eb6 <_printf_i+0xc2>
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	e002      	b.n	8001ebc <_printf_i+0xc8>
 8001eb6:	0668      	lsls	r0, r5, #25
 8001eb8:	d5fb      	bpl.n	8001eb2 <_printf_i+0xbe>
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	4854      	ldr	r0, [pc, #336]	; (8002010 <_printf_i+0x21c>)
 8001ebe:	296f      	cmp	r1, #111	; 0x6f
 8001ec0:	bf14      	ite	ne
 8001ec2:	220a      	movne	r2, #10
 8001ec4:	2208      	moveq	r2, #8
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ecc:	6865      	ldr	r5, [r4, #4]
 8001ece:	60a5      	str	r5, [r4, #8]
 8001ed0:	2d00      	cmp	r5, #0
 8001ed2:	f2c0 8095 	blt.w	8002000 <_printf_i+0x20c>
 8001ed6:	6821      	ldr	r1, [r4, #0]
 8001ed8:	f021 0104 	bic.w	r1, r1, #4
 8001edc:	6021      	str	r1, [r4, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d13d      	bne.n	8001f5e <_printf_i+0x16a>
 8001ee2:	2d00      	cmp	r5, #0
 8001ee4:	f040 808e 	bne.w	8002004 <_printf_i+0x210>
 8001ee8:	4665      	mov	r5, ip
 8001eea:	2a08      	cmp	r2, #8
 8001eec:	d10b      	bne.n	8001f06 <_printf_i+0x112>
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	07db      	lsls	r3, r3, #31
 8001ef2:	d508      	bpl.n	8001f06 <_printf_i+0x112>
 8001ef4:	6923      	ldr	r3, [r4, #16]
 8001ef6:	6862      	ldr	r2, [r4, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	bfde      	ittt	le
 8001efc:	2330      	movle	r3, #48	; 0x30
 8001efe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f06:	ebac 0305 	sub.w	r3, ip, r5
 8001f0a:	6123      	str	r3, [r4, #16]
 8001f0c:	f8cd 8000 	str.w	r8, [sp]
 8001f10:	463b      	mov	r3, r7
 8001f12:	aa03      	add	r2, sp, #12
 8001f14:	4621      	mov	r1, r4
 8001f16:	4630      	mov	r0, r6
 8001f18:	f7ff fef6 	bl	8001d08 <_printf_common>
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	d14d      	bne.n	8001fbc <_printf_i+0x1c8>
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	b005      	add	sp, #20
 8001f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f2a:	4839      	ldr	r0, [pc, #228]	; (8002010 <_printf_i+0x21c>)
 8001f2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001f30:	6813      	ldr	r3, [r2, #0]
 8001f32:	6821      	ldr	r1, [r4, #0]
 8001f34:	1d1d      	adds	r5, r3, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6015      	str	r5, [r2, #0]
 8001f3a:	060a      	lsls	r2, r1, #24
 8001f3c:	d50b      	bpl.n	8001f56 <_printf_i+0x162>
 8001f3e:	07ca      	lsls	r2, r1, #31
 8001f40:	bf44      	itt	mi
 8001f42:	f041 0120 	orrmi.w	r1, r1, #32
 8001f46:	6021      	strmi	r1, [r4, #0]
 8001f48:	b91b      	cbnz	r3, 8001f52 <_printf_i+0x15e>
 8001f4a:	6822      	ldr	r2, [r4, #0]
 8001f4c:	f022 0220 	bic.w	r2, r2, #32
 8001f50:	6022      	str	r2, [r4, #0]
 8001f52:	2210      	movs	r2, #16
 8001f54:	e7b7      	b.n	8001ec6 <_printf_i+0xd2>
 8001f56:	064d      	lsls	r5, r1, #25
 8001f58:	bf48      	it	mi
 8001f5a:	b29b      	uxthmi	r3, r3
 8001f5c:	e7ef      	b.n	8001f3e <_printf_i+0x14a>
 8001f5e:	4665      	mov	r5, ip
 8001f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f64:	fb02 3311 	mls	r3, r2, r1, r3
 8001f68:	5cc3      	ldrb	r3, [r0, r3]
 8001f6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001f6e:	460b      	mov	r3, r1
 8001f70:	2900      	cmp	r1, #0
 8001f72:	d1f5      	bne.n	8001f60 <_printf_i+0x16c>
 8001f74:	e7b9      	b.n	8001eea <_printf_i+0xf6>
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	6825      	ldr	r5, [r4, #0]
 8001f7a:	6961      	ldr	r1, [r4, #20]
 8001f7c:	1d18      	adds	r0, r3, #4
 8001f7e:	6010      	str	r0, [r2, #0]
 8001f80:	0628      	lsls	r0, r5, #24
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	d501      	bpl.n	8001f8a <_printf_i+0x196>
 8001f86:	6019      	str	r1, [r3, #0]
 8001f88:	e002      	b.n	8001f90 <_printf_i+0x19c>
 8001f8a:	066a      	lsls	r2, r5, #25
 8001f8c:	d5fb      	bpl.n	8001f86 <_printf_i+0x192>
 8001f8e:	8019      	strh	r1, [r3, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	6123      	str	r3, [r4, #16]
 8001f94:	4665      	mov	r5, ip
 8001f96:	e7b9      	b.n	8001f0c <_printf_i+0x118>
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	1d19      	adds	r1, r3, #4
 8001f9c:	6011      	str	r1, [r2, #0]
 8001f9e:	681d      	ldr	r5, [r3, #0]
 8001fa0:	6862      	ldr	r2, [r4, #4]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f7fe f933 	bl	8000210 <memchr>
 8001faa:	b108      	cbz	r0, 8001fb0 <_printf_i+0x1bc>
 8001fac:	1b40      	subs	r0, r0, r5
 8001fae:	6060      	str	r0, [r4, #4]
 8001fb0:	6863      	ldr	r3, [r4, #4]
 8001fb2:	6123      	str	r3, [r4, #16]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fba:	e7a7      	b.n	8001f0c <_printf_i+0x118>
 8001fbc:	6923      	ldr	r3, [r4, #16]
 8001fbe:	462a      	mov	r2, r5
 8001fc0:	4639      	mov	r1, r7
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	47c0      	blx	r8
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	d0aa      	beq.n	8001f20 <_printf_i+0x12c>
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	079b      	lsls	r3, r3, #30
 8001fce:	d413      	bmi.n	8001ff8 <_printf_i+0x204>
 8001fd0:	68e0      	ldr	r0, [r4, #12]
 8001fd2:	9b03      	ldr	r3, [sp, #12]
 8001fd4:	4298      	cmp	r0, r3
 8001fd6:	bfb8      	it	lt
 8001fd8:	4618      	movlt	r0, r3
 8001fda:	e7a3      	b.n	8001f24 <_printf_i+0x130>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	464a      	mov	r2, r9
 8001fe0:	4639      	mov	r1, r7
 8001fe2:	4630      	mov	r0, r6
 8001fe4:	47c0      	blx	r8
 8001fe6:	3001      	adds	r0, #1
 8001fe8:	d09a      	beq.n	8001f20 <_printf_i+0x12c>
 8001fea:	3501      	adds	r5, #1
 8001fec:	68e3      	ldr	r3, [r4, #12]
 8001fee:	9a03      	ldr	r2, [sp, #12]
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	42ab      	cmp	r3, r5
 8001ff4:	dcf2      	bgt.n	8001fdc <_printf_i+0x1e8>
 8001ff6:	e7eb      	b.n	8001fd0 <_printf_i+0x1dc>
 8001ff8:	2500      	movs	r5, #0
 8001ffa:	f104 0919 	add.w	r9, r4, #25
 8001ffe:	e7f5      	b.n	8001fec <_printf_i+0x1f8>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ac      	bne.n	8001f5e <_printf_i+0x16a>
 8002004:	7803      	ldrb	r3, [r0, #0]
 8002006:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800200a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800200e:	e76c      	b.n	8001eea <_printf_i+0xf6>
 8002010:	080022e1 	.word	0x080022e1
 8002014:	080022f2 	.word	0x080022f2

08002018 <_sbrk_r>:
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4c06      	ldr	r4, [pc, #24]	; (8002034 <_sbrk_r+0x1c>)
 800201c:	2300      	movs	r3, #0
 800201e:	4605      	mov	r5, r0
 8002020:	4608      	mov	r0, r1
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	f7ff f8e8 	bl	80011f8 <_sbrk>
 8002028:	1c43      	adds	r3, r0, #1
 800202a:	d102      	bne.n	8002032 <_sbrk_r+0x1a>
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	b103      	cbz	r3, 8002032 <_sbrk_r+0x1a>
 8002030:	602b      	str	r3, [r5, #0]
 8002032:	bd38      	pop	{r3, r4, r5, pc}
 8002034:	200000b8 	.word	0x200000b8

08002038 <__sread>:
 8002038:	b510      	push	{r4, lr}
 800203a:	460c      	mov	r4, r1
 800203c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002040:	f000 f896 	bl	8002170 <_read_r>
 8002044:	2800      	cmp	r0, #0
 8002046:	bfab      	itete	ge
 8002048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800204a:	89a3      	ldrhlt	r3, [r4, #12]
 800204c:	181b      	addge	r3, r3, r0
 800204e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002052:	bfac      	ite	ge
 8002054:	6563      	strge	r3, [r4, #84]	; 0x54
 8002056:	81a3      	strhlt	r3, [r4, #12]
 8002058:	bd10      	pop	{r4, pc}

0800205a <__swrite>:
 800205a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800205e:	461f      	mov	r7, r3
 8002060:	898b      	ldrh	r3, [r1, #12]
 8002062:	05db      	lsls	r3, r3, #23
 8002064:	4605      	mov	r5, r0
 8002066:	460c      	mov	r4, r1
 8002068:	4616      	mov	r6, r2
 800206a:	d505      	bpl.n	8002078 <__swrite+0x1e>
 800206c:	2302      	movs	r3, #2
 800206e:	2200      	movs	r2, #0
 8002070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002074:	f000 f868 	bl	8002148 <_lseek_r>
 8002078:	89a3      	ldrh	r3, [r4, #12]
 800207a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800207e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002082:	81a3      	strh	r3, [r4, #12]
 8002084:	4632      	mov	r2, r6
 8002086:	463b      	mov	r3, r7
 8002088:	4628      	mov	r0, r5
 800208a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800208e:	f000 b817 	b.w	80020c0 <_write_r>

08002092 <__sseek>:
 8002092:	b510      	push	{r4, lr}
 8002094:	460c      	mov	r4, r1
 8002096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800209a:	f000 f855 	bl	8002148 <_lseek_r>
 800209e:	1c43      	adds	r3, r0, #1
 80020a0:	89a3      	ldrh	r3, [r4, #12]
 80020a2:	bf15      	itete	ne
 80020a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80020a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80020aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80020ae:	81a3      	strheq	r3, [r4, #12]
 80020b0:	bf18      	it	ne
 80020b2:	81a3      	strhne	r3, [r4, #12]
 80020b4:	bd10      	pop	{r4, pc}

080020b6 <__sclose>:
 80020b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ba:	f000 b813 	b.w	80020e4 <_close_r>
	...

080020c0 <_write_r>:
 80020c0:	b538      	push	{r3, r4, r5, lr}
 80020c2:	4c07      	ldr	r4, [pc, #28]	; (80020e0 <_write_r+0x20>)
 80020c4:	4605      	mov	r5, r0
 80020c6:	4608      	mov	r0, r1
 80020c8:	4611      	mov	r1, r2
 80020ca:	2200      	movs	r2, #0
 80020cc:	6022      	str	r2, [r4, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	f7ff f845 	bl	800115e <_write>
 80020d4:	1c43      	adds	r3, r0, #1
 80020d6:	d102      	bne.n	80020de <_write_r+0x1e>
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	b103      	cbz	r3, 80020de <_write_r+0x1e>
 80020dc:	602b      	str	r3, [r5, #0]
 80020de:	bd38      	pop	{r3, r4, r5, pc}
 80020e0:	200000b8 	.word	0x200000b8

080020e4 <_close_r>:
 80020e4:	b538      	push	{r3, r4, r5, lr}
 80020e6:	4c06      	ldr	r4, [pc, #24]	; (8002100 <_close_r+0x1c>)
 80020e8:	2300      	movs	r3, #0
 80020ea:	4605      	mov	r5, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	6023      	str	r3, [r4, #0]
 80020f0:	f7ff f851 	bl	8001196 <_close>
 80020f4:	1c43      	adds	r3, r0, #1
 80020f6:	d102      	bne.n	80020fe <_close_r+0x1a>
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	b103      	cbz	r3, 80020fe <_close_r+0x1a>
 80020fc:	602b      	str	r3, [r5, #0]
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
 8002100:	200000b8 	.word	0x200000b8

08002104 <_fstat_r>:
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4c07      	ldr	r4, [pc, #28]	; (8002124 <_fstat_r+0x20>)
 8002108:	2300      	movs	r3, #0
 800210a:	4605      	mov	r5, r0
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	6023      	str	r3, [r4, #0]
 8002112:	f7ff f84b 	bl	80011ac <_fstat>
 8002116:	1c43      	adds	r3, r0, #1
 8002118:	d102      	bne.n	8002120 <_fstat_r+0x1c>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	b103      	cbz	r3, 8002120 <_fstat_r+0x1c>
 800211e:	602b      	str	r3, [r5, #0]
 8002120:	bd38      	pop	{r3, r4, r5, pc}
 8002122:	bf00      	nop
 8002124:	200000b8 	.word	0x200000b8

08002128 <_isatty_r>:
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4c06      	ldr	r4, [pc, #24]	; (8002144 <_isatty_r+0x1c>)
 800212c:	2300      	movs	r3, #0
 800212e:	4605      	mov	r5, r0
 8002130:	4608      	mov	r0, r1
 8002132:	6023      	str	r3, [r4, #0]
 8002134:	f7ff f849 	bl	80011ca <_isatty>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	d102      	bne.n	8002142 <_isatty_r+0x1a>
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	b103      	cbz	r3, 8002142 <_isatty_r+0x1a>
 8002140:	602b      	str	r3, [r5, #0]
 8002142:	bd38      	pop	{r3, r4, r5, pc}
 8002144:	200000b8 	.word	0x200000b8

08002148 <_lseek_r>:
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	4c07      	ldr	r4, [pc, #28]	; (8002168 <_lseek_r+0x20>)
 800214c:	4605      	mov	r5, r0
 800214e:	4608      	mov	r0, r1
 8002150:	4611      	mov	r1, r2
 8002152:	2200      	movs	r2, #0
 8002154:	6022      	str	r2, [r4, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	f7ff f841 	bl	80011de <_lseek>
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	d102      	bne.n	8002166 <_lseek_r+0x1e>
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	b103      	cbz	r3, 8002166 <_lseek_r+0x1e>
 8002164:	602b      	str	r3, [r5, #0]
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	200000b8 	.word	0x200000b8

0800216c <__malloc_lock>:
 800216c:	4770      	bx	lr

0800216e <__malloc_unlock>:
 800216e:	4770      	bx	lr

08002170 <_read_r>:
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	4c07      	ldr	r4, [pc, #28]	; (8002190 <_read_r+0x20>)
 8002174:	4605      	mov	r5, r0
 8002176:	4608      	mov	r0, r1
 8002178:	4611      	mov	r1, r2
 800217a:	2200      	movs	r2, #0
 800217c:	6022      	str	r2, [r4, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f7fe ffd0 	bl	8001124 <_read>
 8002184:	1c43      	adds	r3, r0, #1
 8002186:	d102      	bne.n	800218e <_read_r+0x1e>
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	b103      	cbz	r3, 800218e <_read_r+0x1e>
 800218c:	602b      	str	r3, [r5, #0]
 800218e:	bd38      	pop	{r3, r4, r5, pc}
 8002190:	200000b8 	.word	0x200000b8

08002194 <_init>:
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	bf00      	nop
 8002198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800219a:	bc08      	pop	{r3}
 800219c:	469e      	mov	lr, r3
 800219e:	4770      	bx	lr

080021a0 <_fini>:
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a2:	bf00      	nop
 80021a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a6:	bc08      	pop	{r3}
 80021a8:	469e      	mov	lr, r3
 80021aa:	4770      	bx	lr
