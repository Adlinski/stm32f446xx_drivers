
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080025a0  080025a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002690  08002690  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002690  08002690  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002690  08002690  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000078  08002710  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002710  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036c4  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009b7  00000000  00000000  00023766  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002a8  00000000  00000000  00024120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000250  00000000  00000000  000243c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000392e  00000000  00000000  00024618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002302  00000000  00000000  00027f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c809  00000000  00000000  0002a248  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00036a51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001144  00000000  00000000  00036acc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002588 	.word	0x08002588

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08002588 	.word	0x08002588

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d157      	bne.n	8000372 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a59      	ldr	r2, [pc, #356]	; (800042c <GPIO_PeriClockControl+0x17c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002ca:	4b59      	ldr	r3, [pc, #356]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ce:	4a58      	ldr	r2, [pc, #352]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80002d6:	e0a3      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a56      	ldr	r2, [pc, #344]	; (8000434 <GPIO_PeriClockControl+0x184>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002e0:	4b53      	ldr	r3, [pc, #332]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4a52      	ldr	r2, [pc, #328]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ec:	e098      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a51      	ldr	r2, [pc, #324]	; (8000438 <GPIO_PeriClockControl+0x188>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002f6:	4b4e      	ldr	r3, [pc, #312]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fa:	4a4d      	ldr	r2, [pc, #308]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000302:	e08d      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a4d      	ldr	r2, [pc, #308]	; (800043c <GPIO_PeriClockControl+0x18c>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800030c:	4b48      	ldr	r3, [pc, #288]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000310:	4a47      	ldr	r2, [pc, #284]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000318:	e082      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a48      	ldr	r2, [pc, #288]	; (8000440 <GPIO_PeriClockControl+0x190>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000322:	4b43      	ldr	r3, [pc, #268]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	4a42      	ldr	r2, [pc, #264]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032e:	e077      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a44      	ldr	r2, [pc, #272]	; (8000444 <GPIO_PeriClockControl+0x194>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000338:	4b3d      	ldr	r3, [pc, #244]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a3c      	ldr	r2, [pc, #240]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000344:	e06c      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a3f      	ldr	r2, [pc, #252]	; (8000448 <GPIO_PeriClockControl+0x198>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800034e:	4b38      	ldr	r3, [pc, #224]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a37      	ldr	r2, [pc, #220]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035a:	e061      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a3b      	ldr	r2, [pc, #236]	; (800044c <GPIO_PeriClockControl+0x19c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d15d      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000364:	4b32      	ldr	r3, [pc, #200]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a31      	ldr	r2, [pc, #196]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000370:	e056      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a2d      	ldr	r2, [pc, #180]	; (800042c <GPIO_PeriClockControl+0x17c>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800037a:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a2c      	ldr	r2, [pc, #176]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000386:	e04b      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a2a      	ldr	r2, [pc, #168]	; (8000434 <GPIO_PeriClockControl+0x184>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000390:	4b27      	ldr	r3, [pc, #156]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a26      	ldr	r2, [pc, #152]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000396:	f023 0302 	bic.w	r3, r3, #2
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039c:	e040      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a25      	ldr	r2, [pc, #148]	; (8000438 <GPIO_PeriClockControl+0x188>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a21      	ldr	r2, [pc, #132]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ac:	f023 0304 	bic.w	r3, r3, #4
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b2:	e035      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a21      	ldr	r2, [pc, #132]	; (800043c <GPIO_PeriClockControl+0x18c>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003c2:	f023 0308 	bic.w	r3, r3, #8
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c8:	e02a      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <GPIO_PeriClockControl+0x190>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003d2:	4b17      	ldr	r3, [pc, #92]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a16      	ldr	r2, [pc, #88]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003d8:	f023 0310 	bic.w	r3, r3, #16
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003de:	e01f      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <GPIO_PeriClockControl+0x194>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <GPIO_PeriClockControl+0x180>)
 80003ee:	f023 0320 	bic.w	r3, r3, #32
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f4:	e014      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a13      	ldr	r2, [pc, #76]	; (8000448 <GPIO_PeriClockControl+0x198>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040a:	e009      	b.n	8000420 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a0f      	ldr	r2, [pc, #60]	; (800044c <GPIO_PeriClockControl+0x19c>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d105      	bne.n	8000420 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <GPIO_PeriClockControl+0x180>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a05      	ldr	r2, [pc, #20]	; (8000430 <GPIO_PeriClockControl+0x180>)
 800041a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40020000 	.word	0x40020000
 8000430:	40023800 	.word	0x40023800
 8000434:	40020400 	.word	0x40020400
 8000438:	40020800 	.word	0x40020800
 800043c:	40020c00 	.word	0x40020c00
 8000440:	40021000 	.word	0x40021000
 8000444:	40021400 	.word	0x40021400
 8000448:	40021800 	.word	0x40021800
 800044c:	40021c00 	.word	0x40021c00

08000450 <GPIO_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]

	/* Enable peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff24 	bl	80002b0 <GPIO_PeriClockControl>

	/* GPIO pin mode configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b03      	cmp	r3, #3
 800046e:	d822      	bhi.n	80004b6 <GPIO_Init+0x66>
	{
		/* Non interrupt mode */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	461a      	mov	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	791b      	ldrb	r3, [r3, #4]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing pin
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	791b      	ldrb	r3, [r3, #4]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	2103      	movs	r1, #3
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	43db      	mvns	r3, r3
 8000496:	4619      	mov	r1, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	400a      	ands	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;//Setting pin
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	6819      	ldr	r1, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	697a      	ldr	r2, [r7, #20]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
		temp = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e0c1      	b.n	800063a <GPIO_Init+0x1ea>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d117      	bne.n	80004ee <GPIO_Init+0x9e>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	4b47      	ldr	r3, [pc, #284]	; (80005dc <GPIO_Init+0x18c>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a43      	ldr	r2, [pc, #268]	; (80005dc <GPIO_Init+0x18c>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	60d3      	str	r3, [r2, #12]
			/* Clear corresponding RTSR bit */
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d4:	4b41      	ldr	r3, [pc, #260]	; (80005dc <GPIO_Init+0x18c>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7912      	ldrb	r2, [r2, #4]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	43d2      	mvns	r2, r2
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a3d      	ldr	r2, [pc, #244]	; (80005dc <GPIO_Init+0x18c>)
 80004e8:	400b      	ands	r3, r1
 80004ea:	6093      	str	r3, [r2, #8]
 80004ec:	e035      	b.n	800055a <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	795b      	ldrb	r3, [r3, #5]
 80004f2:	2b05      	cmp	r3, #5
 80004f4:	d117      	bne.n	8000526 <GPIO_Init+0xd6>
		{
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f6:	4b39      	ldr	r3, [pc, #228]	; (80005dc <GPIO_Init+0x18c>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	4611      	mov	r1, r2
 8000506:	4a35      	ldr	r2, [pc, #212]	; (80005dc <GPIO_Init+0x18c>)
 8000508:	430b      	orrs	r3, r1
 800050a:	6093      	str	r3, [r2, #8]
			/* Clear corresponding FTSR bit */
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050c:	4b33      	ldr	r3, [pc, #204]	; (80005dc <GPIO_Init+0x18c>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	7912      	ldrb	r2, [r2, #4]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	43d2      	mvns	r2, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a2f      	ldr	r2, [pc, #188]	; (80005dc <GPIO_Init+0x18c>)
 8000520:	400b      	ands	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]
 8000524:	e019      	b.n	800055a <GPIO_Init+0x10a>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	2b06      	cmp	r3, #6
 800052c:	d115      	bne.n	800055a <GPIO_Init+0x10a>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <GPIO_Init+0x18c>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	4611      	mov	r1, r2
 800053e:	4a27      	ldr	r2, [pc, #156]	; (80005dc <GPIO_Init+0x18c>)
 8000540:	430b      	orrs	r3, r1
 8000542:	60d3      	str	r3, [r2, #12]
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <GPIO_Init+0x18c>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7912      	ldrb	r2, [r2, #4]
 800054c:	4611      	mov	r1, r2
 800054e:	2201      	movs	r2, #1
 8000550:	408a      	lsls	r2, r1
 8000552:	4611      	mov	r1, r2
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <GPIO_Init+0x18c>)
 8000556:	430b      	orrs	r3, r1
 8000558:	6093      	str	r3, [r2, #8]
		}

		/* Configure GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	089b      	lsrs	r3, r3, #2
 8000560:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	f003 0303 	and.w	r3, r3, #3
 800056a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <GPIO_Init+0x190>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d044      	beq.n	8000600 <GPIO_Init+0x1b0>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <GPIO_Init+0x194>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d02b      	beq.n	80005d8 <GPIO_Init+0x188>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <GPIO_Init+0x198>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d024      	beq.n	80005d4 <GPIO_Init+0x184>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a17      	ldr	r2, [pc, #92]	; (80005ec <GPIO_Init+0x19c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d01d      	beq.n	80005d0 <GPIO_Init+0x180>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <GPIO_Init+0x1a0>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d016      	beq.n	80005cc <GPIO_Init+0x17c>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <GPIO_Init+0x1a4>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d00f      	beq.n	80005c8 <GPIO_Init+0x178>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <GPIO_Init+0x1a8>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d008      	beq.n	80005c4 <GPIO_Init+0x174>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a11      	ldr	r2, [pc, #68]	; (80005fc <GPIO_Init+0x1ac>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d101      	bne.n	80005c0 <GPIO_Init+0x170>
 80005bc:	2307      	movs	r3, #7
 80005be:	e020      	b.n	8000602 <GPIO_Init+0x1b2>
 80005c0:	2300      	movs	r3, #0
 80005c2:	e01e      	b.n	8000602 <GPIO_Init+0x1b2>
 80005c4:	2306      	movs	r3, #6
 80005c6:	e01c      	b.n	8000602 <GPIO_Init+0x1b2>
 80005c8:	2305      	movs	r3, #5
 80005ca:	e01a      	b.n	8000602 <GPIO_Init+0x1b2>
 80005cc:	2304      	movs	r3, #4
 80005ce:	e018      	b.n	8000602 <GPIO_Init+0x1b2>
 80005d0:	2303      	movs	r3, #3
 80005d2:	e016      	b.n	8000602 <GPIO_Init+0x1b2>
 80005d4:	2302      	movs	r3, #2
 80005d6:	e014      	b.n	8000602 <GPIO_Init+0x1b2>
 80005d8:	2301      	movs	r3, #1
 80005da:	e012      	b.n	8000602 <GPIO_Init+0x1b2>
 80005dc:	40013c00 	.word	0x40013c00
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40020800 	.word	0x40020800
 80005ec:	40020c00 	.word	0x40020c00
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40021400 	.word	0x40021400
 80005f8:	40021800 	.word	0x40021800
 80005fc:	40021c00 	.word	0x40021c00
 8000600:	2300      	movs	r3, #0
 8000602:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000604:	4b5c      	ldr	r3, [pc, #368]	; (8000778 <GPIO_Init+0x328>)
 8000606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000608:	4a5b      	ldr	r2, [pc, #364]	; (8000778 <GPIO_Init+0x328>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000610:	7c7a      	ldrb	r2, [r7, #17]
 8000612:	7cbb      	ldrb	r3, [r7, #18]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	fa02 f103 	lsl.w	r1, r2, r3
 800061a:	4a58      	ldr	r2, [pc, #352]	; (800077c <GPIO_Init+0x32c>)
 800061c:	7cfb      	ldrb	r3, [r7, #19]
 800061e:	3302      	adds	r3, #2
 8000620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/* Enable EXTI interrupt delivery using IMR */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000624:	4b56      	ldr	r3, [pc, #344]	; (8000780 <GPIO_Init+0x330>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	4611      	mov	r1, r2
 8000634:	4a52      	ldr	r2, [pc, #328]	; (8000780 <GPIO_Init+0x330>)
 8000636:	430b      	orrs	r3, r1
 8000638:	6013      	str	r3, [r2, #0]
	}

	/* GPIO pin speed configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	799b      	ldrb	r3, [r3, #6]
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	2103      	movs	r1, #3
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	400a      	ands	r2, r1
 8000668:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6899      	ldr	r1, [r3, #8]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	697a      	ldr	r2, [r7, #20]
 8000676:	430a      	orrs	r2, r1
 8000678:	609a      	str	r2, [r3, #8]
	temp = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

	/* GPIO pull up/down settings configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	79db      	ldrb	r3, [r3, #7]
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	2103      	movs	r1, #3
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	4619      	mov	r1, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	400a      	ands	r2, r1
 80006ac:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	68d9      	ldr	r1, [r3, #12]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	430a      	orrs	r2, r1
 80006bc:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]

	/* GPIO output type configuration */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7a1b      	ldrb	r3, [r3, #8]
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	4619      	mov	r1, r3
 80006de:	2301      	movs	r3, #1
 80006e0:	408b      	lsls	r3, r1
 80006e2:	43db      	mvns	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	400a      	ands	r2, r1
 80006ec:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6859      	ldr	r1, [r3, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	605a      	str	r2, [r3, #4]
	temp = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

	/* GPIO alt functionality configuration */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	795b      	ldrb	r3, [r3, #5]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d131      	bne.n	800076e <GPIO_Init+0x31e>
	{
		/* Alt functionality registers configuration */
		uint8_t afrBitNum, afrLowHighReg;

		afrLowHighReg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	743b      	strb	r3, [r7, #16]
		afrBitNum = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] &= ~(0xF << (4 * afrBitNum));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	7c3a      	ldrb	r2, [r7, #16]
 8000722:	3208      	adds	r2, #8
 8000724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	220f      	movs	r2, #15
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43db      	mvns	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	7c3a      	ldrb	r2, [r7, #16]
 800073c:	4001      	ands	r1, r0
 800073e:	3208      	adds	r2, #8
 8000740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[afrLowHighReg] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * afrBitNum);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	7c3a      	ldrb	r2, [r7, #16]
 800074a:	3208      	adds	r2, #8
 800074c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7a5b      	ldrb	r3, [r3, #9]
 8000754:	461a      	mov	r2, r3
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	7c3a      	ldrb	r2, [r7, #16]
 8000766:	4301      	orrs	r1, r0
 8000768:	3208      	adds	r2, #8
 800076a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40013800 	.word	0x40013800
 8000780:	40013c00 	.word	0x40013c00

08000784 <GPIO_ReadFromInputPin>:
 *
 * @Note			- 0 or 1
 *
 *****************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t )((pGPIOx->IDR >> PinNumber) & 0x00000001 );
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691a      	ldr	r2, [r3, #16]
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	fa22 f303 	lsr.w	r3, r2, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	73fb      	strb	r3, [r7, #15]

	return value;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
	...

080007b0 <I2C_PeriClockControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d120      	bne.n	8000804 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a22      	ldr	r2, [pc, #136]	; (8000850 <I2C_PeriClockControl+0xa0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a21      	ldr	r2, [pc, #132]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 80007d6:	e035      	b.n	8000844 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <I2C_PeriClockControl+0xa8>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007ec:	e02a      	b.n	8000844 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a1a      	ldr	r2, [pc, #104]	; (800085c <I2C_PeriClockControl+0xac>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d126      	bne.n	8000844 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <I2C_PeriClockControl+0xa4>)
 80007fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000802:	e01f      	b.n	8000844 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <I2C_PeriClockControl+0xa0>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d106      	bne.n	800081a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <I2C_PeriClockControl+0xa4>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <I2C_PeriClockControl+0xa4>)
 8000812:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000818:	e014      	b.n	8000844 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <I2C_PeriClockControl+0xa8>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <I2C_PeriClockControl+0xa4>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <I2C_PeriClockControl+0xa4>)
 8000828:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800082e:	e009      	b.n	8000844 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <I2C_PeriClockControl+0xac>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d105      	bne.n	8000844 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <I2C_PeriClockControl+0xa4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <I2C_PeriClockControl+0xa4>)
 800083e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40005400 	.word	0x40005400
 8000854:	40023800 	.word	0x40023800
 8000858:	40005800 	.word	0x40005800
 800085c:	40005c00 	.word	0x40005c00

08000860 <RCC_GetPLLOutputClock>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint32_t RCC_GetPLLOutputClock(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	/* Not used for now */
	return 0;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
	...

08000870 <RCC_GetPCLK1Value>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <RCC_GetPCLK1Value+0x9c>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0303 	and.w	r3, r3, #3
 8000882:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000884:	7a7b      	ldrb	r3, [r7, #9]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <RCC_GetPCLK1Value+0xa0>)
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e00b      	b.n	80008a8 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)
 8000890:	7a7b      	ldrb	r3, [r7, #9]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d102      	bne.n	800089c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <RCC_GetPCLK1Value+0xa4>)
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e005      	b.n	80008a8 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 800089c:	7a7b      	ldrb	r3, [r7, #9]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d102      	bne.n	80008a8 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80008a2:	f7ff ffdd 	bl	8000860 <RCC_GetPLLOutputClock>
 80008a6:	60f8      	str	r0, [r7, #12]
	}

	/* AHBP */
	temp = ((RCC->CFGR >> 4) & 0xF);
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <RCC_GetPCLK1Value+0x9c>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	091b      	lsrs	r3, r3, #4
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80008b6:	7a3b      	ldrb	r3, [r7, #8]
 80008b8:	2b07      	cmp	r3, #7
 80008ba:	d802      	bhi.n	80008c2 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	72fb      	strb	r3, [r7, #11]
 80008c0:	e005      	b.n	80008ce <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_Prescaler[temp-8];
 80008c2:	7a3b      	ldrb	r3, [r7, #8]
 80008c4:	3b08      	subs	r3, #8
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <RCC_GetPCLK1Value+0xa8>)
 80008c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008cc:	72fb      	strb	r3, [r7, #11]
	}

	/* APB1 */
	temp = ((RCC->CFGR >> 10) & 0x7);
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <RCC_GetPCLK1Value+0x9c>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	0a9b      	lsrs	r3, r3, #10
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80008dc:	7a3b      	ldrb	r3, [r7, #8]
 80008de:	2b07      	cmp	r3, #7
 80008e0:	d802      	bhi.n	80008e8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	72bb      	strb	r3, [r7, #10]
 80008e6:	e004      	b.n	80008f2 <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APB1_Prescaler[temp-4];
 80008e8:	7a3b      	ldrb	r3, [r7, #8]
 80008ea:	3b04      	subs	r3, #4
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <RCC_GetPCLK1Value+0xac>)
 80008ee:	5cd3      	ldrb	r3, [r2, r3]
 80008f0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80008f2:	7afb      	ldrb	r3, [r7, #11]
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80008fa:	7abb      	ldrb	r3, [r7, #10]
 80008fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000900:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000902:	687b      	ldr	r3, [r7, #4]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	00f42400 	.word	0x00f42400
 8000914:	007a1200 	.word	0x007a1200
 8000918:	20000000 	.word	0x20000000
 800091c:	20000010 	.word	0x20000010

08000920 <I2C_Init>:
 *
 * @Note			- None
 *
 *****************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]

	/* Enabling clock for I2C peripheral */
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2101      	movs	r1, #1
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ff3c 	bl	80007b0 <I2C_PeriClockControl>

	/* ACK control bit */
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a5b      	ldrb	r3, [r3, #9]
 800093c:	029b      	lsls	r3, r3, #10
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4313      	orrs	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	601a      	str	r2, [r3, #0]

	/* CR2 FREQ filed configuration */
	tempreg = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
	tempreg|= RCC_GetPCLK1Value() / 1000000U;
 8000952:	f7ff ff8d 	bl	8000870 <RCC_GetPCLK1Value>
 8000956:	4602      	mov	r2, r0
 8000958:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <I2C_Init+0x158>)
 800095a:	fba3 2302 	umull	r2, r3, r3, r2
 800095e:	0c9b      	lsrs	r3, r3, #18
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	4313      	orrs	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000970:	605a      	str	r2, [r3, #4]

	/* Programming device own address */
	tempreg = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7a1b      	ldrb	r3, [r3, #8]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	461a      	mov	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	609a      	str	r2, [r3, #8]

	/* CCR calculations */
	uint16_t ccr_value = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4a36      	ldr	r2, [pc, #216]	; (8000a7c <I2C_Init+0x15c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d80f      	bhi.n	80009c6 <I2C_Init+0xa6>
	{
		/* Standard mode */
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009a6:	f7ff ff63 	bl	8000870 <RCC_GetPCLK1Value>
 80009aa:	4602      	mov	r2, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80009b8:	897b      	ldrh	r3, [r7, #10]
 80009ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	e02d      	b.n	8000a22 <I2C_Init+0x102>
	}
	else
	{
		/* Fast mode */
		tempreg |= (1 << 15);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009cc:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	895b      	ldrh	r3, [r3, #10]
 80009d2:	039b      	lsls	r3, r3, #14
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	895b      	ldrh	r3, [r3, #10]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d10b      	bne.n	80009fc <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009e4:	f7ff ff44 	bl	8000870 <RCC_GetPCLK1Value>
 80009e8:	4601      	mov	r1, r0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009f8:	817b      	strh	r3, [r7, #10]
 80009fa:	e00c      	b.n	8000a16 <I2C_Init+0xf6>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80009fc:	f7ff ff38 	bl	8000870 <RCC_GetPCLK1Value>
 8000a00:	4601      	mov	r1, r0
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	009a      	lsls	r2, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a14:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000a16:	897b      	ldrh	r3, [r7, #10]
 8000a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	61da      	str	r2, [r3, #28]

	/* TRISE Configuration */
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <I2C_Init+0x15c>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d809      	bhi.n	8000a48 <I2C_Init+0x128>
	{
		/* Standard mode */
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000a34:	f7ff ff1c 	bl	8000870 <RCC_GetPCLK1Value>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <I2C_Init+0x158>)
 8000a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8000a40:	0c9b      	lsrs	r3, r3, #18
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e00c      	b.n	8000a62 <I2C_Init+0x142>
	}
	else
	{
		/* Fast mode */
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000U ) + 1;
 8000a48:	f7ff ff12 	bl	8000870 <RCC_GetPCLK1Value>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000a52:	fb03 f302 	mul.w	r3, r3, r2
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <I2C_Init+0x158>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	0c9b      	lsrs	r3, r3, #18
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a6c:	621a      	str	r2, [r3, #32]
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	000186a0 	.word	0x000186a0

08000a80 <I2C_PeripheralControl>:
 *
 * @Note			- None
 *
 *****************************************************************/
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d106      	bne.n	8000aa0 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f043 0201 	orr.w	r2, r3, #1
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000a9e:	e005      	b.n	8000aac <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f023 0201 	bic.w	r2, r3, #1
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <I2C_MasterSendDataInterruptMode>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint8_t I2C_MasterSendDataInterruptMode(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Length, uint8_t SlaveAddr, uint8_t Sr)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	70fb      	strb	r3, [r7, #3]
	uint8_t busystate = pI2CHandle->TxRxState;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	7f1b      	ldrb	r3, [r3, #28]
 8000ac8:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d030      	beq.n	8000b32 <I2C_MasterSendDataInterruptMode+0x7c>
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d02d      	beq.n	8000b32 <I2C_MasterSendDataInterruptMode+0x7c>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Length;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	78fa      	ldrb	r2, [r7, #3]
 8000aec:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		/* Generating start condition */
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fabc 	bl	800107a <I2C_GenerateStartCondition>

		/* Enable ITBUFEN Control Bit */
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b10:	605a      	str	r2, [r3, #4]

		/* Enable ITEVTEN Control Bit */
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b20:	605a      	str	r2, [r3, #4]

		/* Enable ITERREN Control Bit */
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b30:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <I2C_MasterReceiveDataInterruptMode>:
 *
 * @Note			- None
 *
 *****************************************************************/
uint8_t I2C_MasterReceiveDataInterruptMode(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Length, uint8_t SlaveAddr, uint8_t Sr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	70fb      	strb	r3, [r7, #3]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	7f1b      	ldrb	r3, [r3, #28]
 8000b4e:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d033      	beq.n	8000bbe <I2C_MasterReceiveDataInterruptMode+0x82>
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d030      	beq.n	8000bbe <I2C_MasterReceiveDataInterruptMode+0x82>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Length;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	771a      	strb	r2, [r3, #28]
		/* RxSize is used in the ISR code to manage the data reception */
		pI2CHandle->RxSize = Length;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	78fa      	ldrb	r2, [r7, #3]
 8000b78:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		/* Generating start condition */
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fa76 	bl	800107a <I2C_GenerateStartCondition>

		/* Enable ITBUFEN Control Bit */
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b9c:	605a      	str	r2, [r3, #4]

		/* Enable ITEVTEN Control Bit */
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bac:	605a      	str	r2, [r3, #4]

		/* Enable ITERREN Control Bit */
		pI2CHandle->pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bbc:	605a      	str	r2, [r3, #4]
	}

	return busystate;
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <I2C_ManageAcking>:
 *
 * @Note			- None
 *
 *****************************************************************/
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d106      	bne.n	8000be8 <I2C_ManageAcking+0x20>
	{
		/* Enable ACK */
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable ACK */
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000be6:	e005      	b.n	8000bf4 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
	...

08000c00 <I2C_IRQInterruptConfig>:
 *
 * @Note			- None
 *
 *****************************************************************/
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	460a      	mov	r2, r1
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d133      	bne.n	8000c7e <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	d80a      	bhi.n	8000c32 <I2C_IRQInterruptConfig+0x32>
		{
			/* Program ISER0 register */
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000c1c:	4b34      	ldr	r3, [pc, #208]	; (8000cf0 <I2C_IRQInterruptConfig+0xf0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	2101      	movs	r1, #1
 8000c24:	fa01 f202 	lsl.w	r2, r1, r2
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <I2C_IRQInterruptConfig+0xf0>)
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	6013      	str	r3, [r2, #0]
		{
			/* Program ICER2 register (64 to 95) */
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000c30:	e059      	b.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b1f      	cmp	r3, #31
 8000c36:	d90f      	bls.n	8000c58 <I2C_IRQInterruptConfig+0x58>
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c3c:	d80c      	bhi.n	8000c58 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <I2C_IRQInterruptConfig+0xf4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	f002 021f 	and.w	r2, r2, #31
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a28      	ldr	r2, [pc, #160]	; (8000cf4 <I2C_IRQInterruptConfig+0xf4>)
 8000c52:	430b      	orrs	r3, r1
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e046      	b.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c5c:	d943      	bls.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b5f      	cmp	r3, #95	; 0x5f
 8000c62:	d840      	bhi.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <I2C_IRQInterruptConfig+0xf8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	79fa      	ldrb	r2, [r7, #7]
 8000c6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	4611      	mov	r1, r2
 8000c76:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <I2C_IRQInterruptConfig+0xf8>)
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	e033      	b.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b1f      	cmp	r3, #31
 8000c82:	d80a      	bhi.n	8000c9a <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <I2C_IRQInterruptConfig+0xf0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	79fa      	ldrb	r2, [r7, #7]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	4611      	mov	r1, r2
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <I2C_IRQInterruptConfig+0xf0>)
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	e025      	b.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b1f      	cmp	r3, #31
 8000c9e:	d90f      	bls.n	8000cc0 <I2C_IRQInterruptConfig+0xc0>
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca4:	d80c      	bhi.n	8000cc0 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <I2C_IRQInterruptConfig+0xf4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	79fa      	ldrb	r2, [r7, #7]
 8000cac:	f002 021f 	and.w	r2, r2, #31
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <I2C_IRQInterruptConfig+0xf4>)
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e012      	b.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc4:	d90f      	bls.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b5f      	cmp	r3, #95	; 0x5f
 8000cca:	d80c      	bhi.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <I2C_IRQInterruptConfig+0xf8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <I2C_IRQInterruptConfig+0xf8>)
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	e7ff      	b.n	8000ce6 <I2C_IRQInterruptConfig+0xe6>
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000e104 	.word	0xe000e104
 8000cf8:	e000e108 	.word	0xe000e108

08000cfc <I2C_EV_IRQHandling>:
 *
 * @Note			- None
 *
 *****************************************************************/
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	/* Interrupt handling for both master and slave mode of a device */
	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d0e:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1a:	613b      	str	r3, [r7, #16]

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]


	/* Handling for interrupt generated by SB event */
	if(temp1 && temp3)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d01b      	beq.n	8000d66 <I2C_EV_IRQHandling+0x6a>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d018      	beq.n	8000d66 <I2C_EV_IRQHandling+0x6a>
	{
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7f1b      	ldrb	r3, [r3, #28]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d108      	bne.n	8000d4e <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7f5b      	ldrb	r3, [r3, #29]
 8000d44:	4619      	mov	r1, r3
 8000d46:	4610      	mov	r0, r2
 8000d48:	f000 f9a6 	bl	8001098 <I2C_ExecuteAddressPhaseWrite>
 8000d4c:	e00b      	b.n	8000d66 <I2C_EV_IRQHandling+0x6a>
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7f1b      	ldrb	r3, [r3, #28]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d107      	bne.n	8000d66 <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7f5b      	ldrb	r3, [r3, #29]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4610      	mov	r0, r2
 8000d62:	f000 f9ae 	bl	80010c2 <I2C_ExecuteAddressPhaseRead>
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	60fb      	str	r3, [r7, #12]
	/* Handling for interrupt generated by ADDR event */
	if(temp1 && temp3)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <I2C_EV_IRQHandling+0x88>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <I2C_EV_IRQHandling+0x88>
	{
		I2C_ClearAddrFlag(pI2CHandle);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f9b4 	bl	80010ec <I2C_ClearAddrFlag>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	60fb      	str	r3, [r7, #12]
	/* Handling for interrupt generated by BTF(Byte Transfer Finished) event */
	if(temp1 && temp3)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d020      	beq.n	8000dd8 <I2C_EV_IRQHandling+0xdc>
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d01d      	beq.n	8000dd8 <I2C_EV_IRQHandling+0xdc>
	{
		/* BTF flag is set */
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7f1b      	ldrb	r3, [r3, #28]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d119      	bne.n	8000dd8 <I2C_EV_IRQHandling+0xdc>
		{
			/* TXE flag is also set */
			if(pI2CHandle->pI2Cx->SR1 && (1 << I2C_SR1_TXE))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d014      	beq.n	8000dd8 <I2C_EV_IRQHandling+0xdc>
			{
				if(pI2CHandle->TxLen == 0)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d110      	bne.n	8000dd8 <I2C_EV_IRQHandling+0xdc>
				{
					/* Generate STOP condition */
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <I2C_EV_IRQHandling+0xce>
					{
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f949 	bl	800105c <I2C_GenerateStopCondition>
					}

					/* Reset all member elements of the handle structure */
					I2C_CloseSendData(pI2CHandle);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f924 	bl	8001018 <I2C_CloseSendData>

					/* Notify application about transmission complete */
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 fb42 	bl	800145c <I2C_ApplicationEventCallback>
		{
			;
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	60fb      	str	r3, [r7, #12]
	/* Handling for interrupt generated by STOPF event */
	if(temp1 && temp3)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00c      	beq.n	8000e04 <I2C_EV_IRQHandling+0x108>
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d009      	beq.n	8000e04 <I2C_EV_IRQHandling+0x108>
	{
		/* Clear STOPF flag */
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	601a      	str	r2, [r3, #0]

		/* STOPF generated by master */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 fb2c 	bl	800145c <I2C_ApplicationEventCallback>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0e:	60fb      	str	r3, [r7, #12]
	/* Handling for interrupt generated by TXE event */
	if(temp1 && temp2 && temp3)
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d01f      	beq.n	8000e56 <I2C_EV_IRQHandling+0x15a>
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d01c      	beq.n	8000e56 <I2C_EV_IRQHandling+0x15a>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d019      	beq.n	8000e56 <I2C_EV_IRQHandling+0x15a>
	{
		/* Checking device mode */
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d007      	beq.n	8000e40 <I2C_EV_IRQHandling+0x144>
		{
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7f1b      	ldrb	r3, [r3, #28]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d10e      	bne.n	8000e56 <I2C_EV_IRQHandling+0x15a>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 f98e 	bl	800115a <I2C_MasterHandleTXEInterrupt>
 8000e3e:	e00a      	b.n	8000e56 <I2C_EV_IRQHandling+0x15a>
			}
		}
		else
		{
			/* Checking if slave is really in Tx mode */
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <I2C_EV_IRQHandling+0x15a>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_REQ);
 8000e4e:	2108      	movs	r1, #8
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 fb03 	bl	800145c <I2C_ApplicationEventCallback>
			}
		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e60:	60fb      	str	r3, [r7, #12]
	/* Handling for interrupt generated by RXNE event */
	if(temp1 && temp2 && temp3)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d01f      	beq.n	8000ea8 <I2C_EV_IRQHandling+0x1ac>
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01c      	beq.n	8000ea8 <I2C_EV_IRQHandling+0x1ac>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d019      	beq.n	8000ea8 <I2C_EV_IRQHandling+0x1ac>
	{
		/* Checking device mode */
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <I2C_EV_IRQHandling+0x196>
		{
			/* RXNE flag is set */
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7f1b      	ldrb	r3, [r3, #28]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d10e      	bne.n	8000ea8 <I2C_EV_IRQHandling+0x1ac>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f986 	bl	800119c <I2C_MasterHandleRXNEInterrupt>
			{
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
			}
		}
	}
}
 8000e90:	e00a      	b.n	8000ea8 <I2C_EV_IRQHandling+0x1ac>
			if(!(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d103      	bne.n	8000ea8 <I2C_EV_IRQHandling+0x1ac>
				I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_DATA_RCV);
 8000ea0:	2109      	movs	r1, #9
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 fada 	bl	800145c <I2C_ApplicationEventCallback>
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <I2C_ER_IRQHandling>:
 *
 * @Note			- None
 *
 *****************************************************************/
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2;

	/* Status of ITERREN control bit in CR2 */
	temp2 = (pI2CHandle->pI2Cx->CR2) & (1 << I2C_CR2_ITERREN);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec2:	60fb      	str	r3, [r7, #12]

	/* Checking for bus error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_BERR);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00e      	beq.n	8000ef4 <I2C_ER_IRQHandling+0x44>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <I2C_ER_IRQHandling+0x44>
	{
		/* Clear the bus error flag */
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_BERR);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eea:	615a      	str	r2, [r3, #20]

		/* Notify application about error */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_BERR);
 8000eec:	2103      	movs	r1, #3
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 fab4 	bl	800145c <I2C_ApplicationEventCallback>
	}

	/* Checking for arbitration lost error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_ARLO);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000efe:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00e      	beq.n	8000f24 <I2C_ER_IRQHandling+0x74>
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <I2C_ER_IRQHandling+0x74>
	{
		/* Clear the arbitration lost error flag */
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_ARLO);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f1a:	615a      	str	r2, [r3, #20]

		/* Notify application about error */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_SR1_ARLO);
 8000f1c:	2109      	movs	r1, #9
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 fa9c 	bl	800145c <I2C_ApplicationEventCallback>
	}

	/* Checking for ACK failure error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_AF);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2e:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00e      	beq.n	8000f54 <I2C_ER_IRQHandling+0xa4>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00b      	beq.n	8000f54 <I2C_ER_IRQHandling+0xa4>
	{
		/* Clear the ACK failure error flag */
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_AF);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f4a:	615a      	str	r2, [r3, #20]

		/* Notify application about error */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_SR1_AF);
 8000f4c:	210a      	movs	r1, #10
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fa84 	bl	800145c <I2C_ApplicationEventCallback>
	}

	/* Checking for Overrun/Underrun error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_OVR);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f5e:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2)
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00e      	beq.n	8000f84 <I2C_ER_IRQHandling+0xd4>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <I2C_ER_IRQHandling+0xd4>
	{
		/* Clear the Overrun/Underrun error flag */
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_OVR);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f7a:	615a      	str	r2, [r3, #20]

		/* Notify application about error */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_SR1_OVR);
 8000f7c:	210b      	movs	r1, #11
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fa6c 	bl	800145c <I2C_ApplicationEventCallback>
	}

	/* Checking for Time out error */
	temp1 = (pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_TIMEOUT);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	60bb      	str	r3, [r7, #8]
	if(temp1 && temp2)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00e      	beq.n	8000fb4 <I2C_ER_IRQHandling+0x104>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00b      	beq.n	8000fb4 <I2C_ER_IRQHandling+0x104>
	{
		/* Clear the Time out error flag */
		pI2CHandle->pI2Cx->SR1 &= ~(1 << I2C_SR1_TIMEOUT);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	695a      	ldr	r2, [r3, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000faa:	615a      	str	r2, [r3, #20]

		/* Notify application about error */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_SR1_TIMEOUT);
 8000fac:	210e      	movs	r1, #14
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fa54 	bl	800145c <I2C_ApplicationEventCallback>
	}
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <I2C_CloseReceiveData>:
 *
 * @Note			- Disabling all interrupts
 *
 *****************************************************************/
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	/* Disabling ITBUFEN Control Bit */
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fd2:	605a      	str	r2, [r3, #4]

	/* Disabling ITEVFEN Control Bit */
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fe2:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7a5b      	ldrb	r3, [r3, #9]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d105      	bne.n	8001010 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fddc 	bl	8000bc8 <I2C_ManageAcking>
	}

}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <I2C_CloseSendData>:
 *
 * @Note			- Disabling all interrupts
 *
 *****************************************************************/
void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	/* Disabling ITBUFEN Control Bit */
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800102e:	605a      	str	r2, [r3, #4]

	/* Disabling ITEVFEN Control Bit */
	pI2CHandle->pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800103e:	605a      	str	r2, [r3, #4]


	pI2CHandle->TxRxState = I2C_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <I2C_GenerateStopCondition>:
 *
 * @Note			- None
 *
 *****************************************************************/
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <I2C_GenerateStartCondition>:
 *
 * @Note			- None
 *
 *****************************************************************/
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <I2C_ExecuteAddressPhaseWrite>:
 *
 * @Note			- None
 *
 *****************************************************************/
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	70fb      	strb	r3, [r7, #3]
	/* SlaveAddr is Slave address + r/nw bit=0 */
	SlaveAddr &= ~(1);
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80010b2:	78fa      	ldrb	r2, [r7, #3]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	611a      	str	r2, [r3, #16]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <I2C_ExecuteAddressPhaseRead>:
 *
 * @Note			- None
 *
 *****************************************************************/
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	70fb      	strb	r3, [r7, #3]
	/* SlaveAddr is Slave address + r/nw bit=1 */
	SlaveAddr |= 1;
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	611a      	str	r2, [r3, #16]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <I2C_ClearAddrFlag>:
 *
 * @Note			- None
 *
 *****************************************************************/
static void I2C_ClearAddrFlag(I2C_Handle_t *pI2CHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;

	/* Checking for device mode */
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d01f      	beq.n	8001142 <I2C_ClearAddrFlag+0x56>
	{
		/* Device is in master mode */
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7f1b      	ldrb	r3, [r3, #28]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d112      	bne.n	8001130 <I2C_ClearAddrFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d11f      	bne.n	8001152 <I2C_ClearAddrFlag+0x66>
			{
				/* Disabling ACK */
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fd55 	bl	8000bc8 <I2C_ManageAcking>

				/* Clearing ADDR flag, reading SR1 and SR2 */
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	60fb      	str	r3, [r7, #12]
		/* Clearing ADDR flag, reading SR1 and SR2 */
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 800112e:	e010      	b.n	8001152 <I2C_ClearAddrFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	60fb      	str	r3, [r7, #12]
}
 8001140:	e007      	b.n	8001152 <I2C_ClearAddrFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	60fb      	str	r3, [r7, #12]
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <I2C_MasterHandleTXEInterrupt>:
 *
 * @Note			- None
 *
 *****************************************************************/
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	/* TXE flag is set */
	if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7f1b      	ldrb	r3, [r3, #28]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d113      	bne.n	8001192 <I2C_MasterHandleTXEInterrupt+0x38>
	{
		if(pI2CHandle->TxLen > 0)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00f      	beq.n	8001192 <I2C_MasterHandleTXEInterrupt+0x38>
		{
			/* Loading data into DR */
			pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	611a      	str	r2, [r3, #16]

			/* Decrement Tx Length */
			pI2CHandle->TxLen--;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	615a      	str	r2, [r3, #20]

			/* Increment Tx buffer address */
			pI2CHandle->pTxBuffer++;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60da      	str	r2, [r3, #12]

		}
	}
	/* DBG->Check comments */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <I2C_MasterHandleRXNEInterrupt>:
 *
 * @Note			- None
 *
 *****************************************************************/
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->RxSize == 1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d10b      	bne.n	80011c4 <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	1e5a      	subs	r2, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize > 1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d91a      	bls.n	8001202 <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d105      	bne.n	80011e0 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			/* Clearing ACK bit */
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fcf4 	bl	8000bc8 <I2C_ManageAcking>
		}

		/* Reading DR */
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	691a      	ldr	r2, [r3, #16]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d110      	bne.n	800122c <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		/* Closing I2C data reception and notifying application */

		/* Generating stop condition */
		if(pI2CHandle->Sr == I2C_DISABLE_SR)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001210:	2b00      	cmp	r3, #0
 8001212:	d104      	bne.n	800121e <I2C_MasterHandleRXNEInterrupt+0x82>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff1f 	bl	800105c <I2C_GenerateStopCondition>
		}

		/* Closing I2C RX */
		I2C_CloseReceiveData(pI2CHandle);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fecc 	bl	8000fbc <I2C_CloseReceiveData>

		/* Notify application about transmission complete */
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8001224:	2101      	movs	r1, #1
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f918 	bl	800145c <I2C_ApplicationEventCallback>
	}
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <delay>:
#define MY_ADDR 	0x61

#define SLAVE_ADDR  0x68//68

void delay(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	e002      	b.n	8001246 <delay+0x12>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a03      	ldr	r2, [pc, #12]	; (8001258 <delay+0x24>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d9f8      	bls.n	8001240 <delay+0xc>
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	0003d08f 	.word	0x0003d08f

0800125c <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7-> SDA
 */

void I2C1_GPIOInits(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <I2C1_GPIOInits+0x40>)
 8001264:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001266:	2302      	movs	r3, #2
 8001268:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800126a:	2301      	movs	r3, #1
 800126c:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800126e:	2301      	movs	r3, #1
 8001270:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001272:	2304      	movs	r3, #4
 8001274:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001276:	2302      	movs	r3, #2
 8001278:	72bb      	strb	r3, [r7, #10]

	/* SCL */
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800127a:	2306      	movs	r3, #6
 800127c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f8e5 	bl	8000450 <GPIO_Init>


	/* SDA */
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8001286:	2307      	movs	r3, #7
 8001288:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f8df 	bl	8000450 <GPIO_Init>


}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40020400 	.word	0x40020400

080012a0 <I2C1_Inits>:

void I2C1_Inits(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <I2C1_Inits+0x2c>)
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <I2C1_Inits+0x30>)
 80012a8:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <I2C1_Inits+0x2c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <I2C1_Inits+0x2c>)
 80012b2:	2261      	movs	r2, #97	; 0x61
 80012b4:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <I2C1_Inits+0x2c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <I2C1_Inits+0x2c>)
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <I2C1_Inits+0x34>)
 80012c0:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <I2C1_Inits+0x2c>)
 80012c4:	f7ff fb2c 	bl	8000920 <I2C_Init>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000a4 	.word	0x200000a4
 80012d0:	40005400 	.word	0x40005400
 80012d4:	000186a0 	.word	0x000186a0

080012d8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn,GpioLed;

	/* BTN GPIO Config */
	GpioBtn.pGPIOx = GPIOC;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <GPIO_ButtonInit+0x54>)
 80012e0:	60fb      	str	r3, [r7, #12]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80012e2:	230d      	movs	r3, #13
 80012e4:	743b      	strb	r3, [r7, #16]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80012e6:	2300      	movs	r3, #0
 80012e8:	747b      	strb	r3, [r7, #17]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80012ea:	2302      	movs	r3, #2
 80012ec:	74bb      	strb	r3, [r7, #18]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 80012ee:	2300      	movs	r3, #0
 80012f0:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GpioBtn);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f8aa 	bl	8000450 <GPIO_Init>

	/* LED GPIO Config */
	GpioLed.pGPIOx = GPIOA;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <GPIO_ButtonInit+0x58>)
 80012fe:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8001300:	2305      	movs	r3, #5
 8001302:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001304:	2301      	movs	r3, #1
 8001306:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001308:	2302      	movs	r3, #2
 800130a:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800130c:	2300      	movs	r3, #0
 800130e:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8001310:	2300      	movs	r3, #0
 8001312:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8001314:	2101      	movs	r1, #1
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <GPIO_ButtonInit+0x58>)
 8001318:	f7fe ffca 	bl	80002b0 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800131c:	463b      	mov	r3, r7
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f896 	bl	8000450 <GPIO_Init>
}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40020800 	.word	0x40020800
 8001330:	40020000 	.word	0x40020000

08001334 <main>:


int main(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af02      	add	r7, sp, #8
	uint8_t commandcode;

	uint8_t len;

	initialise_monitor_handles();
 800133a:	f000 f8e7 	bl	800150c <initialise_monitor_handles>

	printf("Application is running\n");
 800133e:	4836      	ldr	r0, [pc, #216]	; (8001418 <main+0xe4>)
 8001340:	f000 fa50 	bl	80017e4 <puts>

	GPIO_ButtonInit();
 8001344:	f7ff ffc8 	bl	80012d8 <GPIO_ButtonInit>

	/* I2C Pins init */
	I2C1_GPIOInits();
 8001348:	f7ff ff88 	bl	800125c <I2C1_GPIOInits>

	/* I2C Peripheral init */
	I2C1_Inits();
 800134c:	f7ff ffa8 	bl	80012a0 <I2C1_Inits>

	/* I2C IRQ configurations */
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 8001350:	2101      	movs	r1, #1
 8001352:	201f      	movs	r0, #31
 8001354:	f7ff fc54 	bl	8000c00 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 8001358:	2101      	movs	r1, #1
 800135a:	2020      	movs	r0, #32
 800135c:	f7ff fc50 	bl	8000c00 <I2C_IRQInterruptConfig>

	/* Enable I2C peripheral */
	I2C_PeripheralControl(I2C1,ENABLE);
 8001360:	2101      	movs	r1, #1
 8001362:	482e      	ldr	r0, [pc, #184]	; (800141c <main+0xe8>)
 8001364:	f7ff fb8c 	bl	8000a80 <I2C_PeripheralControl>

	/* ACK bit is made 1 after PE=1 */
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 8001368:	2101      	movs	r1, #1
 800136a:	482c      	ldr	r0, [pc, #176]	; (800141c <main+0xe8>)
 800136c:	f7ff fc2c 	bl	8000bc8 <I2C_ManageAcking>

	while(1)
	{
		/* Wait till button is pressed */
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8001370:	bf00      	nop
 8001372:	210d      	movs	r1, #13
 8001374:	482a      	ldr	r0, [pc, #168]	; (8001420 <main+0xec>)
 8001376:	f7ff fa05 	bl	8000784 <GPIO_ReadFromInputPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f8      	bne.n	8001372 <main+0x3e>

		/* De-bouncing protection */
		delay();
 8001380:	f7ff ff58 	bl	8001234 <delay>

		commandcode = 0x51;
 8001384:	2351      	movs	r3, #81	; 0x51
 8001386:	71fb      	strb	r3, [r7, #7]


		while(I2C_MasterSendDataInterruptMode(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 8001388:	bf00      	nop
 800138a:	1df9      	adds	r1, r7, #7
 800138c:	2301      	movs	r3, #1
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2368      	movs	r3, #104	; 0x68
 8001392:	2201      	movs	r2, #1
 8001394:	4823      	ldr	r0, [pc, #140]	; (8001424 <main+0xf0>)
 8001396:	f7ff fb8e 	bl	8000ab6 <I2C_MasterSendDataInterruptMode>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f4      	bne.n	800138a <main+0x56>

		while(I2C_MasterReceiveDataInterruptMode(&I2C1Handle,&len,1,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 80013a0:	bf00      	nop
 80013a2:	1db9      	adds	r1, r7, #6
 80013a4:	2301      	movs	r3, #1
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2368      	movs	r3, #104	; 0x68
 80013aa:	2201      	movs	r2, #1
 80013ac:	481d      	ldr	r0, [pc, #116]	; (8001424 <main+0xf0>)
 80013ae:	f7ff fbc5 	bl	8000b3c <I2C_MasterReceiveDataInterruptMode>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f4      	bne.n	80013a2 <main+0x6e>

		commandcode = 0x52;
 80013b8:	2352      	movs	r3, #82	; 0x52
 80013ba:	71fb      	strb	r3, [r7, #7]

		while(I2C_MasterSendDataInterruptMode(&I2C1Handle,&commandcode,1,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 80013bc:	bf00      	nop
 80013be:	1df9      	adds	r1, r7, #7
 80013c0:	2301      	movs	r3, #1
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2368      	movs	r3, #104	; 0x68
 80013c6:	2201      	movs	r2, #1
 80013c8:	4816      	ldr	r0, [pc, #88]	; (8001424 <main+0xf0>)
 80013ca:	f7ff fb74 	bl	8000ab6 <I2C_MasterSendDataInterruptMode>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f4      	bne.n	80013be <main+0x8a>

		while(I2C_MasterReceiveDataInterruptMode(&I2C1Handle,rcv_buf,len,SLAVE_ADDR,I2C_ENABLE_SR) != I2C_READY);
 80013d4:	bf00      	nop
 80013d6:	79bb      	ldrb	r3, [r7, #6]
 80013d8:	461a      	mov	r2, r3
 80013da:	2301      	movs	r3, #1
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2368      	movs	r3, #104	; 0x68
 80013e0:	4911      	ldr	r1, [pc, #68]	; (8001428 <main+0xf4>)
 80013e2:	4810      	ldr	r0, [pc, #64]	; (8001424 <main+0xf0>)
 80013e4:	f7ff fbaa 	bl	8000b3c <I2C_MasterReceiveDataInterruptMode>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f3      	bne.n	80013d6 <main+0xa2>

		rxComplt = RESET;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <main+0xf8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]

		/* Waiting for RX to complete */
        while(rxComplt != SET)
 80013f4:	bf00      	nop
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <main+0xf8>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d1fb      	bne.n	80013f6 <main+0xc2>
        {

        }

		rcv_buf[len+1] = '\0';
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	3301      	adds	r3, #1
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <main+0xf4>)
 8001404:	2100      	movs	r1, #0
 8001406:	54d1      	strb	r1, [r2, r3]

		printf("Data : %s",rcv_buf);
 8001408:	4907      	ldr	r1, [pc, #28]	; (8001428 <main+0xf4>)
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <main+0xfc>)
 800140c:	f000 f976 	bl	80016fc <iprintf>

		rxComplt = RESET;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <main+0xf8>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8001416:	e7ab      	b.n	8001370 <main+0x3c>
 8001418:	080025a0 	.word	0x080025a0
 800141c:	40005400 	.word	0x40005400
 8001420:	40020800 	.word	0x40020800
 8001424:	200000a4 	.word	0x200000a4
 8001428:	200000cc 	.word	0x200000cc
 800142c:	20000094 	.word	0x20000094
 8001430:	080025b8 	.word	0x080025b8

08001434 <I2C1_EV_IRQHandler>:

}


void I2C1_EV_IRQHandler (void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <I2C1_EV_IRQHandler+0x10>)
 800143a:	f7ff fc5f 	bl	8000cfc <I2C_EV_IRQHandling>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200000a4 	.word	0x200000a4

08001448 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler (void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <I2C1_ER_IRQHandler+0x10>)
 800144e:	f7ff fd2f 	bl	8000eb0 <I2C_ER_IRQHandling>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200000a4 	.word	0x200000a4

0800145c <I2C_ApplicationEventCallback>:



void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEv)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
     if(AppEv == I2C_EV_TX_CMPLT)
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <I2C_ApplicationEventCallback+0x1a>
     {
    	 printf("Tx is completed\n");
 800146e:	480f      	ldr	r0, [pc, #60]	; (80014ac <I2C_ApplicationEventCallback+0x50>)
 8001470:	f000 f9b8 	bl	80017e4 <puts>
    	 I2C_GenerateStopCondition(I2C1);

    	 /* Hanging in infinite loop */
    	 while(1);
     }
}
 8001474:	e016      	b.n	80014a4 <I2C_ApplicationEventCallback+0x48>
     }else if (AppEv == I2C_EV_RX_CMPLT)
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d106      	bne.n	800148a <I2C_ApplicationEventCallback+0x2e>
    	 printf("Rx is completed\n");
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <I2C_ApplicationEventCallback+0x54>)
 800147e:	f000 f9b1 	bl	80017e4 <puts>
    	 rxComplt = SET;
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <I2C_ApplicationEventCallback+0x58>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
}
 8001488:	e00c      	b.n	80014a4 <I2C_ApplicationEventCallback+0x48>
     }else if (AppEv == I2C_ERROR_AF)
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d109      	bne.n	80014a4 <I2C_ApplicationEventCallback+0x48>
    	 printf("Error : Ack failure\n");
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <I2C_ApplicationEventCallback+0x5c>)
 8001492:	f000 f9a7 	bl	80017e4 <puts>
    	 I2C_CloseSendData(pI2CHandle);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fdbe 	bl	8001018 <I2C_CloseSendData>
    	 I2C_GenerateStopCondition(I2C1);
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <I2C_ApplicationEventCallback+0x60>)
 800149e:	f7ff fddd 	bl	800105c <I2C_GenerateStopCondition>
    	 while(1);
 80014a2:	e7fe      	b.n	80014a2 <I2C_ApplicationEventCallback+0x46>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	080025c4 	.word	0x080025c4
 80014b0:	080025d4 	.word	0x080025d4
 80014b4:	20000094 	.word	0x20000094
 80014b8:	080025e4 	.word	0x080025e4
 80014bc:	40005400 	.word	0x40005400

080014c0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <ITM_SendChar+0x44>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <ITM_SendChar+0x44>)
 80014d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <ITM_SendChar+0x48>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <ITM_SendChar+0x48>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80014e2:	bf00      	nop
 80014e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f8      	beq.n	80014e4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80014f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	6013      	str	r3, [r2, #0]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	e000edfc 	.word	0xe000edfc
 8001508:	e0000e00 	.word	0xe0000e00

0800150c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800152a:	f3af 8000 	nop.w
 800152e:	4601      	mov	r1, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf0      	blt.n	800152a <_read+0x12>
	}

return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e009      	b.n	8001578 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);	//ITM Debuger enabled
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffa7 	bl	80014c0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf1      	blt.n	8001564 <_write+0x12>
	}
	return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_close>:

int _close(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
	return -1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b0:	605a      	str	r2, [r3, #4]
	return 0;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <_isatty>:

int _isatty(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
	return 0;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
	...

080015ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <_sbrk+0x50>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x16>
		heap_end = &end;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <_sbrk+0x50>)
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <_sbrk+0x54>)
 8001600:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <_sbrk+0x50>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <_sbrk+0x50>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	466a      	mov	r2, sp
 8001612:	4293      	cmp	r3, r2
 8001614:	d907      	bls.n	8001626 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001616:	f000 f83f 	bl	8001698 <__errno>
 800161a:	4602      	mov	r2, r0
 800161c:	230c      	movs	r3, #12
 800161e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	e006      	b.n	8001634 <_sbrk+0x48>
	}

	heap_end += incr;
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <_sbrk+0x50>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a03      	ldr	r2, [pc, #12]	; (800163c <_sbrk+0x50>)
 8001630:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000098 	.word	0x20000098
 8001640:	200000f0 	.word	0x200000f0

08001644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001646:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopForever+0x6>)
  ldr r1, =_edata
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <LoopForever+0xa>)
  ldr r2, =_sidata
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <LoopForever+0xe>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001660:	4c0b      	ldr	r4, [pc, #44]	; (8001690 <LoopForever+0x16>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800166e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001672:	f000 f817 	bl	80016a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001676:	f7ff fe5d 	bl	8001334 <main>

0800167a <LoopForever>:

LoopForever:
    b LoopForever
 800167a:	e7fe      	b.n	800167a <LoopForever>
  ldr   r0, =_estack
 800167c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001688:	08002698 	.word	0x08002698
  ldr r2, =_sbss
 800168c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001690:	200000f0 	.word	0x200000f0

08001694 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>
	...

08001698 <__errno>:
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <__errno+0x8>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000014 	.word	0x20000014

080016a4 <__libc_init_array>:
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	4e0d      	ldr	r6, [pc, #52]	; (80016dc <__libc_init_array+0x38>)
 80016a8:	4c0d      	ldr	r4, [pc, #52]	; (80016e0 <__libc_init_array+0x3c>)
 80016aa:	1ba4      	subs	r4, r4, r6
 80016ac:	10a4      	asrs	r4, r4, #2
 80016ae:	2500      	movs	r5, #0
 80016b0:	42a5      	cmp	r5, r4
 80016b2:	d109      	bne.n	80016c8 <__libc_init_array+0x24>
 80016b4:	4e0b      	ldr	r6, [pc, #44]	; (80016e4 <__libc_init_array+0x40>)
 80016b6:	4c0c      	ldr	r4, [pc, #48]	; (80016e8 <__libc_init_array+0x44>)
 80016b8:	f000 ff66 	bl	8002588 <_init>
 80016bc:	1ba4      	subs	r4, r4, r6
 80016be:	10a4      	asrs	r4, r4, #2
 80016c0:	2500      	movs	r5, #0
 80016c2:	42a5      	cmp	r5, r4
 80016c4:	d105      	bne.n	80016d2 <__libc_init_array+0x2e>
 80016c6:	bd70      	pop	{r4, r5, r6, pc}
 80016c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016cc:	4798      	blx	r3
 80016ce:	3501      	adds	r5, #1
 80016d0:	e7ee      	b.n	80016b0 <__libc_init_array+0xc>
 80016d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016d6:	4798      	blx	r3
 80016d8:	3501      	adds	r5, #1
 80016da:	e7f2      	b.n	80016c2 <__libc_init_array+0x1e>
 80016dc:	08002690 	.word	0x08002690
 80016e0:	08002690 	.word	0x08002690
 80016e4:	08002690 	.word	0x08002690
 80016e8:	08002694 	.word	0x08002694

080016ec <memset>:
 80016ec:	4402      	add	r2, r0
 80016ee:	4603      	mov	r3, r0
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d100      	bne.n	80016f6 <memset+0xa>
 80016f4:	4770      	bx	lr
 80016f6:	f803 1b01 	strb.w	r1, [r3], #1
 80016fa:	e7f9      	b.n	80016f0 <memset+0x4>

080016fc <iprintf>:
 80016fc:	b40f      	push	{r0, r1, r2, r3}
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <iprintf+0x2c>)
 8001700:	b513      	push	{r0, r1, r4, lr}
 8001702:	681c      	ldr	r4, [r3, #0]
 8001704:	b124      	cbz	r4, 8001710 <iprintf+0x14>
 8001706:	69a3      	ldr	r3, [r4, #24]
 8001708:	b913      	cbnz	r3, 8001710 <iprintf+0x14>
 800170a:	4620      	mov	r0, r4
 800170c:	f000 fa22 	bl	8001b54 <__sinit>
 8001710:	ab05      	add	r3, sp, #20
 8001712:	9a04      	ldr	r2, [sp, #16]
 8001714:	68a1      	ldr	r1, [r4, #8]
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	4620      	mov	r0, r4
 800171a:	f000 fbd9 	bl	8001ed0 <_vfiprintf_r>
 800171e:	b002      	add	sp, #8
 8001720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001724:	b004      	add	sp, #16
 8001726:	4770      	bx	lr
 8001728:	20000014 	.word	0x20000014

0800172c <_puts_r>:
 800172c:	b570      	push	{r4, r5, r6, lr}
 800172e:	460e      	mov	r6, r1
 8001730:	4605      	mov	r5, r0
 8001732:	b118      	cbz	r0, 800173c <_puts_r+0x10>
 8001734:	6983      	ldr	r3, [r0, #24]
 8001736:	b90b      	cbnz	r3, 800173c <_puts_r+0x10>
 8001738:	f000 fa0c 	bl	8001b54 <__sinit>
 800173c:	69ab      	ldr	r3, [r5, #24]
 800173e:	68ac      	ldr	r4, [r5, #8]
 8001740:	b913      	cbnz	r3, 8001748 <_puts_r+0x1c>
 8001742:	4628      	mov	r0, r5
 8001744:	f000 fa06 	bl	8001b54 <__sinit>
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <_puts_r+0xac>)
 800174a:	429c      	cmp	r4, r3
 800174c:	d117      	bne.n	800177e <_puts_r+0x52>
 800174e:	686c      	ldr	r4, [r5, #4]
 8001750:	89a3      	ldrh	r3, [r4, #12]
 8001752:	071b      	lsls	r3, r3, #28
 8001754:	d51d      	bpl.n	8001792 <_puts_r+0x66>
 8001756:	6923      	ldr	r3, [r4, #16]
 8001758:	b1db      	cbz	r3, 8001792 <_puts_r+0x66>
 800175a:	3e01      	subs	r6, #1
 800175c:	68a3      	ldr	r3, [r4, #8]
 800175e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001762:	3b01      	subs	r3, #1
 8001764:	60a3      	str	r3, [r4, #8]
 8001766:	b9e9      	cbnz	r1, 80017a4 <_puts_r+0x78>
 8001768:	2b00      	cmp	r3, #0
 800176a:	da2e      	bge.n	80017ca <_puts_r+0x9e>
 800176c:	4622      	mov	r2, r4
 800176e:	210a      	movs	r1, #10
 8001770:	4628      	mov	r0, r5
 8001772:	f000 f83f 	bl	80017f4 <__swbuf_r>
 8001776:	3001      	adds	r0, #1
 8001778:	d011      	beq.n	800179e <_puts_r+0x72>
 800177a:	200a      	movs	r0, #10
 800177c:	e011      	b.n	80017a2 <_puts_r+0x76>
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <_puts_r+0xb0>)
 8001780:	429c      	cmp	r4, r3
 8001782:	d101      	bne.n	8001788 <_puts_r+0x5c>
 8001784:	68ac      	ldr	r4, [r5, #8]
 8001786:	e7e3      	b.n	8001750 <_puts_r+0x24>
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_puts_r+0xb4>)
 800178a:	429c      	cmp	r4, r3
 800178c:	bf08      	it	eq
 800178e:	68ec      	ldreq	r4, [r5, #12]
 8001790:	e7de      	b.n	8001750 <_puts_r+0x24>
 8001792:	4621      	mov	r1, r4
 8001794:	4628      	mov	r0, r5
 8001796:	f000 f87f 	bl	8001898 <__swsetup_r>
 800179a:	2800      	cmp	r0, #0
 800179c:	d0dd      	beq.n	800175a <_puts_r+0x2e>
 800179e:	f04f 30ff 	mov.w	r0, #4294967295
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da04      	bge.n	80017b2 <_puts_r+0x86>
 80017a8:	69a2      	ldr	r2, [r4, #24]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dc06      	bgt.n	80017bc <_puts_r+0x90>
 80017ae:	290a      	cmp	r1, #10
 80017b0:	d004      	beq.n	80017bc <_puts_r+0x90>
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	6022      	str	r2, [r4, #0]
 80017b8:	7019      	strb	r1, [r3, #0]
 80017ba:	e7cf      	b.n	800175c <_puts_r+0x30>
 80017bc:	4622      	mov	r2, r4
 80017be:	4628      	mov	r0, r5
 80017c0:	f000 f818 	bl	80017f4 <__swbuf_r>
 80017c4:	3001      	adds	r0, #1
 80017c6:	d1c9      	bne.n	800175c <_puts_r+0x30>
 80017c8:	e7e9      	b.n	800179e <_puts_r+0x72>
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	200a      	movs	r0, #10
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	6022      	str	r2, [r4, #0]
 80017d2:	7018      	strb	r0, [r3, #0]
 80017d4:	e7e5      	b.n	80017a2 <_puts_r+0x76>
 80017d6:	bf00      	nop
 80017d8:	0800261c 	.word	0x0800261c
 80017dc:	0800263c 	.word	0x0800263c
 80017e0:	080025fc 	.word	0x080025fc

080017e4 <puts>:
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <puts+0xc>)
 80017e6:	4601      	mov	r1, r0
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f7ff bf9f 	b.w	800172c <_puts_r>
 80017ee:	bf00      	nop
 80017f0:	20000014 	.word	0x20000014

080017f4 <__swbuf_r>:
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	460e      	mov	r6, r1
 80017f8:	4614      	mov	r4, r2
 80017fa:	4605      	mov	r5, r0
 80017fc:	b118      	cbz	r0, 8001806 <__swbuf_r+0x12>
 80017fe:	6983      	ldr	r3, [r0, #24]
 8001800:	b90b      	cbnz	r3, 8001806 <__swbuf_r+0x12>
 8001802:	f000 f9a7 	bl	8001b54 <__sinit>
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <__swbuf_r+0x98>)
 8001808:	429c      	cmp	r4, r3
 800180a:	d12a      	bne.n	8001862 <__swbuf_r+0x6e>
 800180c:	686c      	ldr	r4, [r5, #4]
 800180e:	69a3      	ldr	r3, [r4, #24]
 8001810:	60a3      	str	r3, [r4, #8]
 8001812:	89a3      	ldrh	r3, [r4, #12]
 8001814:	071a      	lsls	r2, r3, #28
 8001816:	d52e      	bpl.n	8001876 <__swbuf_r+0x82>
 8001818:	6923      	ldr	r3, [r4, #16]
 800181a:	b363      	cbz	r3, 8001876 <__swbuf_r+0x82>
 800181c:	6923      	ldr	r3, [r4, #16]
 800181e:	6820      	ldr	r0, [r4, #0]
 8001820:	1ac0      	subs	r0, r0, r3
 8001822:	6963      	ldr	r3, [r4, #20]
 8001824:	b2f6      	uxtb	r6, r6
 8001826:	4283      	cmp	r3, r0
 8001828:	4637      	mov	r7, r6
 800182a:	dc04      	bgt.n	8001836 <__swbuf_r+0x42>
 800182c:	4621      	mov	r1, r4
 800182e:	4628      	mov	r0, r5
 8001830:	f000 f926 	bl	8001a80 <_fflush_r>
 8001834:	bb28      	cbnz	r0, 8001882 <__swbuf_r+0x8e>
 8001836:	68a3      	ldr	r3, [r4, #8]
 8001838:	3b01      	subs	r3, #1
 800183a:	60a3      	str	r3, [r4, #8]
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	6022      	str	r2, [r4, #0]
 8001842:	701e      	strb	r6, [r3, #0]
 8001844:	6963      	ldr	r3, [r4, #20]
 8001846:	3001      	adds	r0, #1
 8001848:	4283      	cmp	r3, r0
 800184a:	d004      	beq.n	8001856 <__swbuf_r+0x62>
 800184c:	89a3      	ldrh	r3, [r4, #12]
 800184e:	07db      	lsls	r3, r3, #31
 8001850:	d519      	bpl.n	8001886 <__swbuf_r+0x92>
 8001852:	2e0a      	cmp	r6, #10
 8001854:	d117      	bne.n	8001886 <__swbuf_r+0x92>
 8001856:	4621      	mov	r1, r4
 8001858:	4628      	mov	r0, r5
 800185a:	f000 f911 	bl	8001a80 <_fflush_r>
 800185e:	b190      	cbz	r0, 8001886 <__swbuf_r+0x92>
 8001860:	e00f      	b.n	8001882 <__swbuf_r+0x8e>
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <__swbuf_r+0x9c>)
 8001864:	429c      	cmp	r4, r3
 8001866:	d101      	bne.n	800186c <__swbuf_r+0x78>
 8001868:	68ac      	ldr	r4, [r5, #8]
 800186a:	e7d0      	b.n	800180e <__swbuf_r+0x1a>
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <__swbuf_r+0xa0>)
 800186e:	429c      	cmp	r4, r3
 8001870:	bf08      	it	eq
 8001872:	68ec      	ldreq	r4, [r5, #12]
 8001874:	e7cb      	b.n	800180e <__swbuf_r+0x1a>
 8001876:	4621      	mov	r1, r4
 8001878:	4628      	mov	r0, r5
 800187a:	f000 f80d 	bl	8001898 <__swsetup_r>
 800187e:	2800      	cmp	r0, #0
 8001880:	d0cc      	beq.n	800181c <__swbuf_r+0x28>
 8001882:	f04f 37ff 	mov.w	r7, #4294967295
 8001886:	4638      	mov	r0, r7
 8001888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800188a:	bf00      	nop
 800188c:	0800261c 	.word	0x0800261c
 8001890:	0800263c 	.word	0x0800263c
 8001894:	080025fc 	.word	0x080025fc

08001898 <__swsetup_r>:
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <__swsetup_r+0xcc>)
 800189a:	b570      	push	{r4, r5, r6, lr}
 800189c:	681d      	ldr	r5, [r3, #0]
 800189e:	4606      	mov	r6, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	b125      	cbz	r5, 80018ae <__swsetup_r+0x16>
 80018a4:	69ab      	ldr	r3, [r5, #24]
 80018a6:	b913      	cbnz	r3, 80018ae <__swsetup_r+0x16>
 80018a8:	4628      	mov	r0, r5
 80018aa:	f000 f953 	bl	8001b54 <__sinit>
 80018ae:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <__swsetup_r+0xd0>)
 80018b0:	429c      	cmp	r4, r3
 80018b2:	d10f      	bne.n	80018d4 <__swsetup_r+0x3c>
 80018b4:	686c      	ldr	r4, [r5, #4]
 80018b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	0715      	lsls	r5, r2, #28
 80018be:	d42c      	bmi.n	800191a <__swsetup_r+0x82>
 80018c0:	06d0      	lsls	r0, r2, #27
 80018c2:	d411      	bmi.n	80018e8 <__swsetup_r+0x50>
 80018c4:	2209      	movs	r2, #9
 80018c6:	6032      	str	r2, [r6, #0]
 80018c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018cc:	81a3      	strh	r3, [r4, #12]
 80018ce:	f04f 30ff 	mov.w	r0, #4294967295
 80018d2:	e03e      	b.n	8001952 <__swsetup_r+0xba>
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <__swsetup_r+0xd4>)
 80018d6:	429c      	cmp	r4, r3
 80018d8:	d101      	bne.n	80018de <__swsetup_r+0x46>
 80018da:	68ac      	ldr	r4, [r5, #8]
 80018dc:	e7eb      	b.n	80018b6 <__swsetup_r+0x1e>
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <__swsetup_r+0xd8>)
 80018e0:	429c      	cmp	r4, r3
 80018e2:	bf08      	it	eq
 80018e4:	68ec      	ldreq	r4, [r5, #12]
 80018e6:	e7e6      	b.n	80018b6 <__swsetup_r+0x1e>
 80018e8:	0751      	lsls	r1, r2, #29
 80018ea:	d512      	bpl.n	8001912 <__swsetup_r+0x7a>
 80018ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018ee:	b141      	cbz	r1, 8001902 <__swsetup_r+0x6a>
 80018f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018f4:	4299      	cmp	r1, r3
 80018f6:	d002      	beq.n	80018fe <__swsetup_r+0x66>
 80018f8:	4630      	mov	r0, r6
 80018fa:	f000 fa19 	bl	8001d30 <_free_r>
 80018fe:	2300      	movs	r3, #0
 8001900:	6363      	str	r3, [r4, #52]	; 0x34
 8001902:	89a3      	ldrh	r3, [r4, #12]
 8001904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001908:	81a3      	strh	r3, [r4, #12]
 800190a:	2300      	movs	r3, #0
 800190c:	6063      	str	r3, [r4, #4]
 800190e:	6923      	ldr	r3, [r4, #16]
 8001910:	6023      	str	r3, [r4, #0]
 8001912:	89a3      	ldrh	r3, [r4, #12]
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	81a3      	strh	r3, [r4, #12]
 800191a:	6923      	ldr	r3, [r4, #16]
 800191c:	b94b      	cbnz	r3, 8001932 <__swsetup_r+0x9a>
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001928:	d003      	beq.n	8001932 <__swsetup_r+0x9a>
 800192a:	4621      	mov	r1, r4
 800192c:	4630      	mov	r0, r6
 800192e:	f000 f9bf 	bl	8001cb0 <__smakebuf_r>
 8001932:	89a2      	ldrh	r2, [r4, #12]
 8001934:	f012 0301 	ands.w	r3, r2, #1
 8001938:	d00c      	beq.n	8001954 <__swsetup_r+0xbc>
 800193a:	2300      	movs	r3, #0
 800193c:	60a3      	str	r3, [r4, #8]
 800193e:	6963      	ldr	r3, [r4, #20]
 8001940:	425b      	negs	r3, r3
 8001942:	61a3      	str	r3, [r4, #24]
 8001944:	6923      	ldr	r3, [r4, #16]
 8001946:	b953      	cbnz	r3, 800195e <__swsetup_r+0xc6>
 8001948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800194c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001950:	d1ba      	bne.n	80018c8 <__swsetup_r+0x30>
 8001952:	bd70      	pop	{r4, r5, r6, pc}
 8001954:	0792      	lsls	r2, r2, #30
 8001956:	bf58      	it	pl
 8001958:	6963      	ldrpl	r3, [r4, #20]
 800195a:	60a3      	str	r3, [r4, #8]
 800195c:	e7f2      	b.n	8001944 <__swsetup_r+0xac>
 800195e:	2000      	movs	r0, #0
 8001960:	e7f7      	b.n	8001952 <__swsetup_r+0xba>
 8001962:	bf00      	nop
 8001964:	20000014 	.word	0x20000014
 8001968:	0800261c 	.word	0x0800261c
 800196c:	0800263c 	.word	0x0800263c
 8001970:	080025fc 	.word	0x080025fc

08001974 <__sflush_r>:
 8001974:	898a      	ldrh	r2, [r1, #12]
 8001976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197a:	4605      	mov	r5, r0
 800197c:	0710      	lsls	r0, r2, #28
 800197e:	460c      	mov	r4, r1
 8001980:	d458      	bmi.n	8001a34 <__sflush_r+0xc0>
 8001982:	684b      	ldr	r3, [r1, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc05      	bgt.n	8001994 <__sflush_r+0x20>
 8001988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800198a:	2b00      	cmp	r3, #0
 800198c:	dc02      	bgt.n	8001994 <__sflush_r+0x20>
 800198e:	2000      	movs	r0, #0
 8001990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001996:	2e00      	cmp	r6, #0
 8001998:	d0f9      	beq.n	800198e <__sflush_r+0x1a>
 800199a:	2300      	movs	r3, #0
 800199c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019a0:	682f      	ldr	r7, [r5, #0]
 80019a2:	6a21      	ldr	r1, [r4, #32]
 80019a4:	602b      	str	r3, [r5, #0]
 80019a6:	d032      	beq.n	8001a0e <__sflush_r+0x9a>
 80019a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019aa:	89a3      	ldrh	r3, [r4, #12]
 80019ac:	075a      	lsls	r2, r3, #29
 80019ae:	d505      	bpl.n	80019bc <__sflush_r+0x48>
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	1ac0      	subs	r0, r0, r3
 80019b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019b6:	b10b      	cbz	r3, 80019bc <__sflush_r+0x48>
 80019b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019ba:	1ac0      	subs	r0, r0, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	4602      	mov	r2, r0
 80019c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019c2:	6a21      	ldr	r1, [r4, #32]
 80019c4:	4628      	mov	r0, r5
 80019c6:	47b0      	blx	r6
 80019c8:	1c43      	adds	r3, r0, #1
 80019ca:	89a3      	ldrh	r3, [r4, #12]
 80019cc:	d106      	bne.n	80019dc <__sflush_r+0x68>
 80019ce:	6829      	ldr	r1, [r5, #0]
 80019d0:	291d      	cmp	r1, #29
 80019d2:	d848      	bhi.n	8001a66 <__sflush_r+0xf2>
 80019d4:	4a29      	ldr	r2, [pc, #164]	; (8001a7c <__sflush_r+0x108>)
 80019d6:	40ca      	lsrs	r2, r1
 80019d8:	07d6      	lsls	r6, r2, #31
 80019da:	d544      	bpl.n	8001a66 <__sflush_r+0xf2>
 80019dc:	2200      	movs	r2, #0
 80019de:	6062      	str	r2, [r4, #4]
 80019e0:	04d9      	lsls	r1, r3, #19
 80019e2:	6922      	ldr	r2, [r4, #16]
 80019e4:	6022      	str	r2, [r4, #0]
 80019e6:	d504      	bpl.n	80019f2 <__sflush_r+0x7e>
 80019e8:	1c42      	adds	r2, r0, #1
 80019ea:	d101      	bne.n	80019f0 <__sflush_r+0x7c>
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	b903      	cbnz	r3, 80019f2 <__sflush_r+0x7e>
 80019f0:	6560      	str	r0, [r4, #84]	; 0x54
 80019f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019f4:	602f      	str	r7, [r5, #0]
 80019f6:	2900      	cmp	r1, #0
 80019f8:	d0c9      	beq.n	800198e <__sflush_r+0x1a>
 80019fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019fe:	4299      	cmp	r1, r3
 8001a00:	d002      	beq.n	8001a08 <__sflush_r+0x94>
 8001a02:	4628      	mov	r0, r5
 8001a04:	f000 f994 	bl	8001d30 <_free_r>
 8001a08:	2000      	movs	r0, #0
 8001a0a:	6360      	str	r0, [r4, #52]	; 0x34
 8001a0c:	e7c0      	b.n	8001990 <__sflush_r+0x1c>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	4628      	mov	r0, r5
 8001a12:	47b0      	blx	r6
 8001a14:	1c41      	adds	r1, r0, #1
 8001a16:	d1c8      	bne.n	80019aa <__sflush_r+0x36>
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0c5      	beq.n	80019aa <__sflush_r+0x36>
 8001a1e:	2b1d      	cmp	r3, #29
 8001a20:	d001      	beq.n	8001a26 <__sflush_r+0xb2>
 8001a22:	2b16      	cmp	r3, #22
 8001a24:	d101      	bne.n	8001a2a <__sflush_r+0xb6>
 8001a26:	602f      	str	r7, [r5, #0]
 8001a28:	e7b1      	b.n	800198e <__sflush_r+0x1a>
 8001a2a:	89a3      	ldrh	r3, [r4, #12]
 8001a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a30:	81a3      	strh	r3, [r4, #12]
 8001a32:	e7ad      	b.n	8001990 <__sflush_r+0x1c>
 8001a34:	690f      	ldr	r7, [r1, #16]
 8001a36:	2f00      	cmp	r7, #0
 8001a38:	d0a9      	beq.n	800198e <__sflush_r+0x1a>
 8001a3a:	0793      	lsls	r3, r2, #30
 8001a3c:	680e      	ldr	r6, [r1, #0]
 8001a3e:	bf08      	it	eq
 8001a40:	694b      	ldreq	r3, [r1, #20]
 8001a42:	600f      	str	r7, [r1, #0]
 8001a44:	bf18      	it	ne
 8001a46:	2300      	movne	r3, #0
 8001a48:	eba6 0807 	sub.w	r8, r6, r7
 8001a4c:	608b      	str	r3, [r1, #8]
 8001a4e:	f1b8 0f00 	cmp.w	r8, #0
 8001a52:	dd9c      	ble.n	800198e <__sflush_r+0x1a>
 8001a54:	4643      	mov	r3, r8
 8001a56:	463a      	mov	r2, r7
 8001a58:	6a21      	ldr	r1, [r4, #32]
 8001a5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	47b0      	blx	r6
 8001a60:	2800      	cmp	r0, #0
 8001a62:	dc06      	bgt.n	8001a72 <__sflush_r+0xfe>
 8001a64:	89a3      	ldrh	r3, [r4, #12]
 8001a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6a:	81a3      	strh	r3, [r4, #12]
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	e78e      	b.n	8001990 <__sflush_r+0x1c>
 8001a72:	4407      	add	r7, r0
 8001a74:	eba8 0800 	sub.w	r8, r8, r0
 8001a78:	e7e9      	b.n	8001a4e <__sflush_r+0xda>
 8001a7a:	bf00      	nop
 8001a7c:	20400001 	.word	0x20400001

08001a80 <_fflush_r>:
 8001a80:	b538      	push	{r3, r4, r5, lr}
 8001a82:	690b      	ldr	r3, [r1, #16]
 8001a84:	4605      	mov	r5, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	b1db      	cbz	r3, 8001ac2 <_fflush_r+0x42>
 8001a8a:	b118      	cbz	r0, 8001a94 <_fflush_r+0x14>
 8001a8c:	6983      	ldr	r3, [r0, #24]
 8001a8e:	b90b      	cbnz	r3, 8001a94 <_fflush_r+0x14>
 8001a90:	f000 f860 	bl	8001b54 <__sinit>
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <_fflush_r+0x48>)
 8001a96:	429c      	cmp	r4, r3
 8001a98:	d109      	bne.n	8001aae <_fflush_r+0x2e>
 8001a9a:	686c      	ldr	r4, [r5, #4]
 8001a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aa0:	b17b      	cbz	r3, 8001ac2 <_fflush_r+0x42>
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aaa:	f7ff bf63 	b.w	8001974 <__sflush_r>
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_fflush_r+0x4c>)
 8001ab0:	429c      	cmp	r4, r3
 8001ab2:	d101      	bne.n	8001ab8 <_fflush_r+0x38>
 8001ab4:	68ac      	ldr	r4, [r5, #8]
 8001ab6:	e7f1      	b.n	8001a9c <_fflush_r+0x1c>
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <_fflush_r+0x50>)
 8001aba:	429c      	cmp	r4, r3
 8001abc:	bf08      	it	eq
 8001abe:	68ec      	ldreq	r4, [r5, #12]
 8001ac0:	e7ec      	b.n	8001a9c <_fflush_r+0x1c>
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	bd38      	pop	{r3, r4, r5, pc}
 8001ac6:	bf00      	nop
 8001ac8:	0800261c 	.word	0x0800261c
 8001acc:	0800263c 	.word	0x0800263c
 8001ad0:	080025fc 	.word	0x080025fc

08001ad4 <std>:
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	4604      	mov	r4, r0
 8001ada:	e9c0 3300 	strd	r3, r3, [r0]
 8001ade:	6083      	str	r3, [r0, #8]
 8001ae0:	8181      	strh	r1, [r0, #12]
 8001ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8001ae4:	81c2      	strh	r2, [r0, #14]
 8001ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001aea:	6183      	str	r3, [r0, #24]
 8001aec:	4619      	mov	r1, r3
 8001aee:	2208      	movs	r2, #8
 8001af0:	305c      	adds	r0, #92	; 0x5c
 8001af2:	f7ff fdfb 	bl	80016ec <memset>
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <std+0x38>)
 8001af8:	6263      	str	r3, [r4, #36]	; 0x24
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <std+0x3c>)
 8001afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <std+0x40>)
 8001b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <std+0x44>)
 8001b04:	6224      	str	r4, [r4, #32]
 8001b06:	6323      	str	r3, [r4, #48]	; 0x30
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	0800242d 	.word	0x0800242d
 8001b10:	0800244f 	.word	0x0800244f
 8001b14:	08002487 	.word	0x08002487
 8001b18:	080024ab 	.word	0x080024ab

08001b1c <_cleanup_r>:
 8001b1c:	4901      	ldr	r1, [pc, #4]	; (8001b24 <_cleanup_r+0x8>)
 8001b1e:	f000 b885 	b.w	8001c2c <_fwalk_reent>
 8001b22:	bf00      	nop
 8001b24:	08001a81 	.word	0x08001a81

08001b28 <__sfmoreglue>:
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	1e4a      	subs	r2, r1, #1
 8001b2c:	2568      	movs	r5, #104	; 0x68
 8001b2e:	4355      	muls	r5, r2
 8001b30:	460e      	mov	r6, r1
 8001b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b36:	f000 f949 	bl	8001dcc <_malloc_r>
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	b140      	cbz	r0, 8001b50 <__sfmoreglue+0x28>
 8001b3e:	2100      	movs	r1, #0
 8001b40:	e9c0 1600 	strd	r1, r6, [r0]
 8001b44:	300c      	adds	r0, #12
 8001b46:	60a0      	str	r0, [r4, #8]
 8001b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b4c:	f7ff fdce 	bl	80016ec <memset>
 8001b50:	4620      	mov	r0, r4
 8001b52:	bd70      	pop	{r4, r5, r6, pc}

08001b54 <__sinit>:
 8001b54:	6983      	ldr	r3, [r0, #24]
 8001b56:	b510      	push	{r4, lr}
 8001b58:	4604      	mov	r4, r0
 8001b5a:	bb33      	cbnz	r3, 8001baa <__sinit+0x56>
 8001b5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001b60:	6503      	str	r3, [r0, #80]	; 0x50
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <__sinit+0x58>)
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <__sinit+0x5c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6282      	str	r2, [r0, #40]	; 0x28
 8001b6a:	4298      	cmp	r0, r3
 8001b6c:	bf04      	itt	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	6183      	streq	r3, [r0, #24]
 8001b72:	f000 f81f 	bl	8001bb4 <__sfp>
 8001b76:	6060      	str	r0, [r4, #4]
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f000 f81b 	bl	8001bb4 <__sfp>
 8001b7e:	60a0      	str	r0, [r4, #8]
 8001b80:	4620      	mov	r0, r4
 8001b82:	f000 f817 	bl	8001bb4 <__sfp>
 8001b86:	2200      	movs	r2, #0
 8001b88:	60e0      	str	r0, [r4, #12]
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	6860      	ldr	r0, [r4, #4]
 8001b8e:	f7ff ffa1 	bl	8001ad4 <std>
 8001b92:	2201      	movs	r2, #1
 8001b94:	2109      	movs	r1, #9
 8001b96:	68a0      	ldr	r0, [r4, #8]
 8001b98:	f7ff ff9c 	bl	8001ad4 <std>
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	2112      	movs	r1, #18
 8001ba0:	68e0      	ldr	r0, [r4, #12]
 8001ba2:	f7ff ff97 	bl	8001ad4 <std>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61a3      	str	r3, [r4, #24]
 8001baa:	bd10      	pop	{r4, pc}
 8001bac:	080025f8 	.word	0x080025f8
 8001bb0:	08001b1d 	.word	0x08001b1d

08001bb4 <__sfp>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <__sfp+0x70>)
 8001bb8:	681e      	ldr	r6, [r3, #0]
 8001bba:	69b3      	ldr	r3, [r6, #24]
 8001bbc:	4607      	mov	r7, r0
 8001bbe:	b913      	cbnz	r3, 8001bc6 <__sfp+0x12>
 8001bc0:	4630      	mov	r0, r6
 8001bc2:	f7ff ffc7 	bl	8001b54 <__sinit>
 8001bc6:	3648      	adds	r6, #72	; 0x48
 8001bc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	d503      	bpl.n	8001bd8 <__sfp+0x24>
 8001bd0:	6833      	ldr	r3, [r6, #0]
 8001bd2:	b133      	cbz	r3, 8001be2 <__sfp+0x2e>
 8001bd4:	6836      	ldr	r6, [r6, #0]
 8001bd6:	e7f7      	b.n	8001bc8 <__sfp+0x14>
 8001bd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001bdc:	b16d      	cbz	r5, 8001bfa <__sfp+0x46>
 8001bde:	3468      	adds	r4, #104	; 0x68
 8001be0:	e7f4      	b.n	8001bcc <__sfp+0x18>
 8001be2:	2104      	movs	r1, #4
 8001be4:	4638      	mov	r0, r7
 8001be6:	f7ff ff9f 	bl	8001b28 <__sfmoreglue>
 8001bea:	6030      	str	r0, [r6, #0]
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d1f1      	bne.n	8001bd4 <__sfp+0x20>
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <__sfp+0x74>)
 8001bfc:	6665      	str	r5, [r4, #100]	; 0x64
 8001bfe:	e9c4 5500 	strd	r5, r5, [r4]
 8001c02:	60a5      	str	r5, [r4, #8]
 8001c04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001c08:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	4629      	mov	r1, r5
 8001c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c14:	f7ff fd6a 	bl	80016ec <memset>
 8001c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c20:	e7e9      	b.n	8001bf6 <__sfp+0x42>
 8001c22:	bf00      	nop
 8001c24:	080025f8 	.word	0x080025f8
 8001c28:	ffff0001 	.word	0xffff0001

08001c2c <_fwalk_reent>:
 8001c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4689      	mov	r9, r1
 8001c34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c38:	2600      	movs	r6, #0
 8001c3a:	b914      	cbnz	r4, 8001c42 <_fwalk_reent+0x16>
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001c46:	3f01      	subs	r7, #1
 8001c48:	d501      	bpl.n	8001c4e <_fwalk_reent+0x22>
 8001c4a:	6824      	ldr	r4, [r4, #0]
 8001c4c:	e7f5      	b.n	8001c3a <_fwalk_reent+0xe>
 8001c4e:	89ab      	ldrh	r3, [r5, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d907      	bls.n	8001c64 <_fwalk_reent+0x38>
 8001c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	d003      	beq.n	8001c64 <_fwalk_reent+0x38>
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	4640      	mov	r0, r8
 8001c60:	47c8      	blx	r9
 8001c62:	4306      	orrs	r6, r0
 8001c64:	3568      	adds	r5, #104	; 0x68
 8001c66:	e7ee      	b.n	8001c46 <_fwalk_reent+0x1a>

08001c68 <__swhatbuf_r>:
 8001c68:	b570      	push	{r4, r5, r6, lr}
 8001c6a:	460e      	mov	r6, r1
 8001c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c70:	2900      	cmp	r1, #0
 8001c72:	b096      	sub	sp, #88	; 0x58
 8001c74:	4614      	mov	r4, r2
 8001c76:	461d      	mov	r5, r3
 8001c78:	da07      	bge.n	8001c8a <__swhatbuf_r+0x22>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	602b      	str	r3, [r5, #0]
 8001c7e:	89b3      	ldrh	r3, [r6, #12]
 8001c80:	061a      	lsls	r2, r3, #24
 8001c82:	d410      	bmi.n	8001ca6 <__swhatbuf_r+0x3e>
 8001c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c88:	e00e      	b.n	8001ca8 <__swhatbuf_r+0x40>
 8001c8a:	466a      	mov	r2, sp
 8001c8c:	f000 fc34 	bl	80024f8 <_fstat_r>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	dbf2      	blt.n	8001c7a <__swhatbuf_r+0x12>
 8001c94:	9a01      	ldr	r2, [sp, #4]
 8001c96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c9e:	425a      	negs	r2, r3
 8001ca0:	415a      	adcs	r2, r3
 8001ca2:	602a      	str	r2, [r5, #0]
 8001ca4:	e7ee      	b.n	8001c84 <__swhatbuf_r+0x1c>
 8001ca6:	2340      	movs	r3, #64	; 0x40
 8001ca8:	2000      	movs	r0, #0
 8001caa:	6023      	str	r3, [r4, #0]
 8001cac:	b016      	add	sp, #88	; 0x58
 8001cae:	bd70      	pop	{r4, r5, r6, pc}

08001cb0 <__smakebuf_r>:
 8001cb0:	898b      	ldrh	r3, [r1, #12]
 8001cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cb4:	079d      	lsls	r5, r3, #30
 8001cb6:	4606      	mov	r6, r0
 8001cb8:	460c      	mov	r4, r1
 8001cba:	d507      	bpl.n	8001ccc <__smakebuf_r+0x1c>
 8001cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	6123      	str	r3, [r4, #16]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	6163      	str	r3, [r4, #20]
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	ab01      	add	r3, sp, #4
 8001cce:	466a      	mov	r2, sp
 8001cd0:	f7ff ffca 	bl	8001c68 <__swhatbuf_r>
 8001cd4:	9900      	ldr	r1, [sp, #0]
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f000 f877 	bl	8001dcc <_malloc_r>
 8001cde:	b948      	cbnz	r0, 8001cf4 <__smakebuf_r+0x44>
 8001ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ce4:	059a      	lsls	r2, r3, #22
 8001ce6:	d4ef      	bmi.n	8001cc8 <__smakebuf_r+0x18>
 8001ce8:	f023 0303 	bic.w	r3, r3, #3
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	81a3      	strh	r3, [r4, #12]
 8001cf2:	e7e3      	b.n	8001cbc <__smakebuf_r+0xc>
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <__smakebuf_r+0x7c>)
 8001cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001cf8:	89a3      	ldrh	r3, [r4, #12]
 8001cfa:	6020      	str	r0, [r4, #0]
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	81a3      	strh	r3, [r4, #12]
 8001d02:	9b00      	ldr	r3, [sp, #0]
 8001d04:	6163      	str	r3, [r4, #20]
 8001d06:	9b01      	ldr	r3, [sp, #4]
 8001d08:	6120      	str	r0, [r4, #16]
 8001d0a:	b15b      	cbz	r3, 8001d24 <__smakebuf_r+0x74>
 8001d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d10:	4630      	mov	r0, r6
 8001d12:	f000 fc03 	bl	800251c <_isatty_r>
 8001d16:	b128      	cbz	r0, 8001d24 <__smakebuf_r+0x74>
 8001d18:	89a3      	ldrh	r3, [r4, #12]
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	81a3      	strh	r3, [r4, #12]
 8001d24:	89a3      	ldrh	r3, [r4, #12]
 8001d26:	431d      	orrs	r5, r3
 8001d28:	81a5      	strh	r5, [r4, #12]
 8001d2a:	e7cd      	b.n	8001cc8 <__smakebuf_r+0x18>
 8001d2c:	08001b1d 	.word	0x08001b1d

08001d30 <_free_r>:
 8001d30:	b538      	push	{r3, r4, r5, lr}
 8001d32:	4605      	mov	r5, r0
 8001d34:	2900      	cmp	r1, #0
 8001d36:	d045      	beq.n	8001dc4 <_free_r+0x94>
 8001d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d3c:	1f0c      	subs	r4, r1, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bfb8      	it	lt
 8001d42:	18e4      	addlt	r4, r4, r3
 8001d44:	f000 fc0c 	bl	8002560 <__malloc_lock>
 8001d48:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <_free_r+0x98>)
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	b933      	cbnz	r3, 8001d5e <_free_r+0x2e>
 8001d50:	6063      	str	r3, [r4, #4]
 8001d52:	6014      	str	r4, [r2, #0]
 8001d54:	4628      	mov	r0, r5
 8001d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d5a:	f000 bc02 	b.w	8002562 <__malloc_unlock>
 8001d5e:	42a3      	cmp	r3, r4
 8001d60:	d90c      	bls.n	8001d7c <_free_r+0x4c>
 8001d62:	6821      	ldr	r1, [r4, #0]
 8001d64:	1862      	adds	r2, r4, r1
 8001d66:	4293      	cmp	r3, r2
 8001d68:	bf04      	itt	eq
 8001d6a:	681a      	ldreq	r2, [r3, #0]
 8001d6c:	685b      	ldreq	r3, [r3, #4]
 8001d6e:	6063      	str	r3, [r4, #4]
 8001d70:	bf04      	itt	eq
 8001d72:	1852      	addeq	r2, r2, r1
 8001d74:	6022      	streq	r2, [r4, #0]
 8001d76:	6004      	str	r4, [r0, #0]
 8001d78:	e7ec      	b.n	8001d54 <_free_r+0x24>
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	b10a      	cbz	r2, 8001d84 <_free_r+0x54>
 8001d80:	42a2      	cmp	r2, r4
 8001d82:	d9fa      	bls.n	8001d7a <_free_r+0x4a>
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	1858      	adds	r0, r3, r1
 8001d88:	42a0      	cmp	r0, r4
 8001d8a:	d10b      	bne.n	8001da4 <_free_r+0x74>
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	4401      	add	r1, r0
 8001d90:	1858      	adds	r0, r3, r1
 8001d92:	4282      	cmp	r2, r0
 8001d94:	6019      	str	r1, [r3, #0]
 8001d96:	d1dd      	bne.n	8001d54 <_free_r+0x24>
 8001d98:	6810      	ldr	r0, [r2, #0]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	4401      	add	r1, r0
 8001da0:	6019      	str	r1, [r3, #0]
 8001da2:	e7d7      	b.n	8001d54 <_free_r+0x24>
 8001da4:	d902      	bls.n	8001dac <_free_r+0x7c>
 8001da6:	230c      	movs	r3, #12
 8001da8:	602b      	str	r3, [r5, #0]
 8001daa:	e7d3      	b.n	8001d54 <_free_r+0x24>
 8001dac:	6820      	ldr	r0, [r4, #0]
 8001dae:	1821      	adds	r1, r4, r0
 8001db0:	428a      	cmp	r2, r1
 8001db2:	bf04      	itt	eq
 8001db4:	6811      	ldreq	r1, [r2, #0]
 8001db6:	6852      	ldreq	r2, [r2, #4]
 8001db8:	6062      	str	r2, [r4, #4]
 8001dba:	bf04      	itt	eq
 8001dbc:	1809      	addeq	r1, r1, r0
 8001dbe:	6021      	streq	r1, [r4, #0]
 8001dc0:	605c      	str	r4, [r3, #4]
 8001dc2:	e7c7      	b.n	8001d54 <_free_r+0x24>
 8001dc4:	bd38      	pop	{r3, r4, r5, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000009c 	.word	0x2000009c

08001dcc <_malloc_r>:
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	1ccd      	adds	r5, r1, #3
 8001dd0:	f025 0503 	bic.w	r5, r5, #3
 8001dd4:	3508      	adds	r5, #8
 8001dd6:	2d0c      	cmp	r5, #12
 8001dd8:	bf38      	it	cc
 8001dda:	250c      	movcc	r5, #12
 8001ddc:	2d00      	cmp	r5, #0
 8001dde:	4606      	mov	r6, r0
 8001de0:	db01      	blt.n	8001de6 <_malloc_r+0x1a>
 8001de2:	42a9      	cmp	r1, r5
 8001de4:	d903      	bls.n	8001dee <_malloc_r+0x22>
 8001de6:	230c      	movs	r3, #12
 8001de8:	6033      	str	r3, [r6, #0]
 8001dea:	2000      	movs	r0, #0
 8001dec:	bd70      	pop	{r4, r5, r6, pc}
 8001dee:	f000 fbb7 	bl	8002560 <__malloc_lock>
 8001df2:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <_malloc_r+0xac>)
 8001df4:	6814      	ldr	r4, [r2, #0]
 8001df6:	4621      	mov	r1, r4
 8001df8:	b991      	cbnz	r1, 8001e20 <_malloc_r+0x54>
 8001dfa:	4c20      	ldr	r4, [pc, #128]	; (8001e7c <_malloc_r+0xb0>)
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	b91b      	cbnz	r3, 8001e08 <_malloc_r+0x3c>
 8001e00:	4630      	mov	r0, r6
 8001e02:	f000 fb03 	bl	800240c <_sbrk_r>
 8001e06:	6020      	str	r0, [r4, #0]
 8001e08:	4629      	mov	r1, r5
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f000 fafe 	bl	800240c <_sbrk_r>
 8001e10:	1c43      	adds	r3, r0, #1
 8001e12:	d124      	bne.n	8001e5e <_malloc_r+0x92>
 8001e14:	230c      	movs	r3, #12
 8001e16:	6033      	str	r3, [r6, #0]
 8001e18:	4630      	mov	r0, r6
 8001e1a:	f000 fba2 	bl	8002562 <__malloc_unlock>
 8001e1e:	e7e4      	b.n	8001dea <_malloc_r+0x1e>
 8001e20:	680b      	ldr	r3, [r1, #0]
 8001e22:	1b5b      	subs	r3, r3, r5
 8001e24:	d418      	bmi.n	8001e58 <_malloc_r+0x8c>
 8001e26:	2b0b      	cmp	r3, #11
 8001e28:	d90f      	bls.n	8001e4a <_malloc_r+0x7e>
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	50cd      	str	r5, [r1, r3]
 8001e2e:	18cc      	adds	r4, r1, r3
 8001e30:	4630      	mov	r0, r6
 8001e32:	f000 fb96 	bl	8002562 <__malloc_unlock>
 8001e36:	f104 000b 	add.w	r0, r4, #11
 8001e3a:	1d23      	adds	r3, r4, #4
 8001e3c:	f020 0007 	bic.w	r0, r0, #7
 8001e40:	1ac3      	subs	r3, r0, r3
 8001e42:	d0d3      	beq.n	8001dec <_malloc_r+0x20>
 8001e44:	425a      	negs	r2, r3
 8001e46:	50e2      	str	r2, [r4, r3]
 8001e48:	e7d0      	b.n	8001dec <_malloc_r+0x20>
 8001e4a:	428c      	cmp	r4, r1
 8001e4c:	684b      	ldr	r3, [r1, #4]
 8001e4e:	bf16      	itet	ne
 8001e50:	6063      	strne	r3, [r4, #4]
 8001e52:	6013      	streq	r3, [r2, #0]
 8001e54:	460c      	movne	r4, r1
 8001e56:	e7eb      	b.n	8001e30 <_malloc_r+0x64>
 8001e58:	460c      	mov	r4, r1
 8001e5a:	6849      	ldr	r1, [r1, #4]
 8001e5c:	e7cc      	b.n	8001df8 <_malloc_r+0x2c>
 8001e5e:	1cc4      	adds	r4, r0, #3
 8001e60:	f024 0403 	bic.w	r4, r4, #3
 8001e64:	42a0      	cmp	r0, r4
 8001e66:	d005      	beq.n	8001e74 <_malloc_r+0xa8>
 8001e68:	1a21      	subs	r1, r4, r0
 8001e6a:	4630      	mov	r0, r6
 8001e6c:	f000 face 	bl	800240c <_sbrk_r>
 8001e70:	3001      	adds	r0, #1
 8001e72:	d0cf      	beq.n	8001e14 <_malloc_r+0x48>
 8001e74:	6025      	str	r5, [r4, #0]
 8001e76:	e7db      	b.n	8001e30 <_malloc_r+0x64>
 8001e78:	2000009c 	.word	0x2000009c
 8001e7c:	200000a0 	.word	0x200000a0

08001e80 <__sfputc_r>:
 8001e80:	6893      	ldr	r3, [r2, #8]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	b410      	push	{r4}
 8001e88:	6093      	str	r3, [r2, #8]
 8001e8a:	da07      	bge.n	8001e9c <__sfputc_r+0x1c>
 8001e8c:	6994      	ldr	r4, [r2, #24]
 8001e8e:	42a3      	cmp	r3, r4
 8001e90:	db01      	blt.n	8001e96 <__sfputc_r+0x16>
 8001e92:	290a      	cmp	r1, #10
 8001e94:	d102      	bne.n	8001e9c <__sfputc_r+0x1c>
 8001e96:	bc10      	pop	{r4}
 8001e98:	f7ff bcac 	b.w	80017f4 <__swbuf_r>
 8001e9c:	6813      	ldr	r3, [r2, #0]
 8001e9e:	1c58      	adds	r0, r3, #1
 8001ea0:	6010      	str	r0, [r2, #0]
 8001ea2:	7019      	strb	r1, [r3, #0]
 8001ea4:	4608      	mov	r0, r1
 8001ea6:	bc10      	pop	{r4}
 8001ea8:	4770      	bx	lr

08001eaa <__sfputs_r>:
 8001eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eac:	4606      	mov	r6, r0
 8001eae:	460f      	mov	r7, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	18d5      	adds	r5, r2, r3
 8001eb4:	42ac      	cmp	r4, r5
 8001eb6:	d101      	bne.n	8001ebc <__sfputs_r+0x12>
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e007      	b.n	8001ecc <__sfputs_r+0x22>
 8001ebc:	463a      	mov	r2, r7
 8001ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ec2:	4630      	mov	r0, r6
 8001ec4:	f7ff ffdc 	bl	8001e80 <__sfputc_r>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d1f3      	bne.n	8001eb4 <__sfputs_r+0xa>
 8001ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ed0 <_vfiprintf_r>:
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	b09d      	sub	sp, #116	; 0x74
 8001ed8:	4617      	mov	r7, r2
 8001eda:	461d      	mov	r5, r3
 8001edc:	4606      	mov	r6, r0
 8001ede:	b118      	cbz	r0, 8001ee8 <_vfiprintf_r+0x18>
 8001ee0:	6983      	ldr	r3, [r0, #24]
 8001ee2:	b90b      	cbnz	r3, 8001ee8 <_vfiprintf_r+0x18>
 8001ee4:	f7ff fe36 	bl	8001b54 <__sinit>
 8001ee8:	4b7c      	ldr	r3, [pc, #496]	; (80020dc <_vfiprintf_r+0x20c>)
 8001eea:	429c      	cmp	r4, r3
 8001eec:	d158      	bne.n	8001fa0 <_vfiprintf_r+0xd0>
 8001eee:	6874      	ldr	r4, [r6, #4]
 8001ef0:	89a3      	ldrh	r3, [r4, #12]
 8001ef2:	0718      	lsls	r0, r3, #28
 8001ef4:	d55e      	bpl.n	8001fb4 <_vfiprintf_r+0xe4>
 8001ef6:	6923      	ldr	r3, [r4, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d05b      	beq.n	8001fb4 <_vfiprintf_r+0xe4>
 8001efc:	2300      	movs	r3, #0
 8001efe:	9309      	str	r3, [sp, #36]	; 0x24
 8001f00:	2320      	movs	r3, #32
 8001f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f06:	2330      	movs	r3, #48	; 0x30
 8001f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f0c:	9503      	str	r5, [sp, #12]
 8001f0e:	f04f 0b01 	mov.w	fp, #1
 8001f12:	46b8      	mov	r8, r7
 8001f14:	4645      	mov	r5, r8
 8001f16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f1a:	b10b      	cbz	r3, 8001f20 <_vfiprintf_r+0x50>
 8001f1c:	2b25      	cmp	r3, #37	; 0x25
 8001f1e:	d154      	bne.n	8001fca <_vfiprintf_r+0xfa>
 8001f20:	ebb8 0a07 	subs.w	sl, r8, r7
 8001f24:	d00b      	beq.n	8001f3e <_vfiprintf_r+0x6e>
 8001f26:	4653      	mov	r3, sl
 8001f28:	463a      	mov	r2, r7
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	f7ff ffbc 	bl	8001eaa <__sfputs_r>
 8001f32:	3001      	adds	r0, #1
 8001f34:	f000 80c2 	beq.w	80020bc <_vfiprintf_r+0x1ec>
 8001f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f3a:	4453      	add	r3, sl
 8001f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f3e:	f898 3000 	ldrb.w	r3, [r8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80ba 	beq.w	80020bc <_vfiprintf_r+0x1ec>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f52:	9304      	str	r3, [sp, #16]
 8001f54:	9307      	str	r3, [sp, #28]
 8001f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8001f5c:	46a8      	mov	r8, r5
 8001f5e:	2205      	movs	r2, #5
 8001f60:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001f64:	485e      	ldr	r0, [pc, #376]	; (80020e0 <_vfiprintf_r+0x210>)
 8001f66:	f7fe f953 	bl	8000210 <memchr>
 8001f6a:	9b04      	ldr	r3, [sp, #16]
 8001f6c:	bb78      	cbnz	r0, 8001fce <_vfiprintf_r+0xfe>
 8001f6e:	06d9      	lsls	r1, r3, #27
 8001f70:	bf44      	itt	mi
 8001f72:	2220      	movmi	r2, #32
 8001f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f78:	071a      	lsls	r2, r3, #28
 8001f7a:	bf44      	itt	mi
 8001f7c:	222b      	movmi	r2, #43	; 0x2b
 8001f7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f82:	782a      	ldrb	r2, [r5, #0]
 8001f84:	2a2a      	cmp	r2, #42	; 0x2a
 8001f86:	d02a      	beq.n	8001fde <_vfiprintf_r+0x10e>
 8001f88:	9a07      	ldr	r2, [sp, #28]
 8001f8a:	46a8      	mov	r8, r5
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	250a      	movs	r5, #10
 8001f90:	4641      	mov	r1, r8
 8001f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f96:	3b30      	subs	r3, #48	; 0x30
 8001f98:	2b09      	cmp	r3, #9
 8001f9a:	d969      	bls.n	8002070 <_vfiprintf_r+0x1a0>
 8001f9c:	b360      	cbz	r0, 8001ff8 <_vfiprintf_r+0x128>
 8001f9e:	e024      	b.n	8001fea <_vfiprintf_r+0x11a>
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <_vfiprintf_r+0x214>)
 8001fa2:	429c      	cmp	r4, r3
 8001fa4:	d101      	bne.n	8001faa <_vfiprintf_r+0xda>
 8001fa6:	68b4      	ldr	r4, [r6, #8]
 8001fa8:	e7a2      	b.n	8001ef0 <_vfiprintf_r+0x20>
 8001faa:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <_vfiprintf_r+0x218>)
 8001fac:	429c      	cmp	r4, r3
 8001fae:	bf08      	it	eq
 8001fb0:	68f4      	ldreq	r4, [r6, #12]
 8001fb2:	e79d      	b.n	8001ef0 <_vfiprintf_r+0x20>
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	f7ff fc6e 	bl	8001898 <__swsetup_r>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d09d      	beq.n	8001efc <_vfiprintf_r+0x2c>
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	b01d      	add	sp, #116	; 0x74
 8001fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fca:	46a8      	mov	r8, r5
 8001fcc:	e7a2      	b.n	8001f14 <_vfiprintf_r+0x44>
 8001fce:	4a44      	ldr	r2, [pc, #272]	; (80020e0 <_vfiprintf_r+0x210>)
 8001fd0:	1a80      	subs	r0, r0, r2
 8001fd2:	fa0b f000 	lsl.w	r0, fp, r0
 8001fd6:	4318      	orrs	r0, r3
 8001fd8:	9004      	str	r0, [sp, #16]
 8001fda:	4645      	mov	r5, r8
 8001fdc:	e7be      	b.n	8001f5c <_vfiprintf_r+0x8c>
 8001fde:	9a03      	ldr	r2, [sp, #12]
 8001fe0:	1d11      	adds	r1, r2, #4
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	9103      	str	r1, [sp, #12]
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	db01      	blt.n	8001fee <_vfiprintf_r+0x11e>
 8001fea:	9207      	str	r2, [sp, #28]
 8001fec:	e004      	b.n	8001ff8 <_vfiprintf_r+0x128>
 8001fee:	4252      	negs	r2, r2
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	9207      	str	r2, [sp, #28]
 8001ff6:	9304      	str	r3, [sp, #16]
 8001ff8:	f898 3000 	ldrb.w	r3, [r8]
 8001ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8001ffe:	d10e      	bne.n	800201e <_vfiprintf_r+0x14e>
 8002000:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002004:	2b2a      	cmp	r3, #42	; 0x2a
 8002006:	d138      	bne.n	800207a <_vfiprintf_r+0x1aa>
 8002008:	9b03      	ldr	r3, [sp, #12]
 800200a:	1d1a      	adds	r2, r3, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	9203      	str	r2, [sp, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	bfb8      	it	lt
 8002014:	f04f 33ff 	movlt.w	r3, #4294967295
 8002018:	f108 0802 	add.w	r8, r8, #2
 800201c:	9305      	str	r3, [sp, #20]
 800201e:	4d33      	ldr	r5, [pc, #204]	; (80020ec <_vfiprintf_r+0x21c>)
 8002020:	f898 1000 	ldrb.w	r1, [r8]
 8002024:	2203      	movs	r2, #3
 8002026:	4628      	mov	r0, r5
 8002028:	f7fe f8f2 	bl	8000210 <memchr>
 800202c:	b140      	cbz	r0, 8002040 <_vfiprintf_r+0x170>
 800202e:	2340      	movs	r3, #64	; 0x40
 8002030:	1b40      	subs	r0, r0, r5
 8002032:	fa03 f000 	lsl.w	r0, r3, r0
 8002036:	9b04      	ldr	r3, [sp, #16]
 8002038:	4303      	orrs	r3, r0
 800203a:	f108 0801 	add.w	r8, r8, #1
 800203e:	9304      	str	r3, [sp, #16]
 8002040:	f898 1000 	ldrb.w	r1, [r8]
 8002044:	482a      	ldr	r0, [pc, #168]	; (80020f0 <_vfiprintf_r+0x220>)
 8002046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800204a:	2206      	movs	r2, #6
 800204c:	f108 0701 	add.w	r7, r8, #1
 8002050:	f7fe f8de 	bl	8000210 <memchr>
 8002054:	2800      	cmp	r0, #0
 8002056:	d037      	beq.n	80020c8 <_vfiprintf_r+0x1f8>
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <_vfiprintf_r+0x224>)
 800205a:	bb1b      	cbnz	r3, 80020a4 <_vfiprintf_r+0x1d4>
 800205c:	9b03      	ldr	r3, [sp, #12]
 800205e:	3307      	adds	r3, #7
 8002060:	f023 0307 	bic.w	r3, r3, #7
 8002064:	3308      	adds	r3, #8
 8002066:	9303      	str	r3, [sp, #12]
 8002068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800206a:	444b      	add	r3, r9
 800206c:	9309      	str	r3, [sp, #36]	; 0x24
 800206e:	e750      	b.n	8001f12 <_vfiprintf_r+0x42>
 8002070:	fb05 3202 	mla	r2, r5, r2, r3
 8002074:	2001      	movs	r0, #1
 8002076:	4688      	mov	r8, r1
 8002078:	e78a      	b.n	8001f90 <_vfiprintf_r+0xc0>
 800207a:	2300      	movs	r3, #0
 800207c:	f108 0801 	add.w	r8, r8, #1
 8002080:	9305      	str	r3, [sp, #20]
 8002082:	4619      	mov	r1, r3
 8002084:	250a      	movs	r5, #10
 8002086:	4640      	mov	r0, r8
 8002088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800208c:	3a30      	subs	r2, #48	; 0x30
 800208e:	2a09      	cmp	r2, #9
 8002090:	d903      	bls.n	800209a <_vfiprintf_r+0x1ca>
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0c3      	beq.n	800201e <_vfiprintf_r+0x14e>
 8002096:	9105      	str	r1, [sp, #20]
 8002098:	e7c1      	b.n	800201e <_vfiprintf_r+0x14e>
 800209a:	fb05 2101 	mla	r1, r5, r1, r2
 800209e:	2301      	movs	r3, #1
 80020a0:	4680      	mov	r8, r0
 80020a2:	e7f0      	b.n	8002086 <_vfiprintf_r+0x1b6>
 80020a4:	ab03      	add	r3, sp, #12
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4622      	mov	r2, r4
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <_vfiprintf_r+0x228>)
 80020ac:	a904      	add	r1, sp, #16
 80020ae:	4630      	mov	r0, r6
 80020b0:	f3af 8000 	nop.w
 80020b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020b8:	4681      	mov	r9, r0
 80020ba:	d1d5      	bne.n	8002068 <_vfiprintf_r+0x198>
 80020bc:	89a3      	ldrh	r3, [r4, #12]
 80020be:	065b      	lsls	r3, r3, #25
 80020c0:	f53f af7e 	bmi.w	8001fc0 <_vfiprintf_r+0xf0>
 80020c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020c6:	e77d      	b.n	8001fc4 <_vfiprintf_r+0xf4>
 80020c8:	ab03      	add	r3, sp, #12
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4622      	mov	r2, r4
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <_vfiprintf_r+0x228>)
 80020d0:	a904      	add	r1, sp, #16
 80020d2:	4630      	mov	r0, r6
 80020d4:	f000 f888 	bl	80021e8 <_printf_i>
 80020d8:	e7ec      	b.n	80020b4 <_vfiprintf_r+0x1e4>
 80020da:	bf00      	nop
 80020dc:	0800261c 	.word	0x0800261c
 80020e0:	0800265c 	.word	0x0800265c
 80020e4:	0800263c 	.word	0x0800263c
 80020e8:	080025fc 	.word	0x080025fc
 80020ec:	08002662 	.word	0x08002662
 80020f0:	08002666 	.word	0x08002666
 80020f4:	00000000 	.word	0x00000000
 80020f8:	08001eab 	.word	0x08001eab

080020fc <_printf_common>:
 80020fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002100:	4691      	mov	r9, r2
 8002102:	461f      	mov	r7, r3
 8002104:	688a      	ldr	r2, [r1, #8]
 8002106:	690b      	ldr	r3, [r1, #16]
 8002108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800210c:	4293      	cmp	r3, r2
 800210e:	bfb8      	it	lt
 8002110:	4613      	movlt	r3, r2
 8002112:	f8c9 3000 	str.w	r3, [r9]
 8002116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800211a:	4606      	mov	r6, r0
 800211c:	460c      	mov	r4, r1
 800211e:	b112      	cbz	r2, 8002126 <_printf_common+0x2a>
 8002120:	3301      	adds	r3, #1
 8002122:	f8c9 3000 	str.w	r3, [r9]
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	0699      	lsls	r1, r3, #26
 800212a:	bf42      	ittt	mi
 800212c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002130:	3302      	addmi	r3, #2
 8002132:	f8c9 3000 	strmi.w	r3, [r9]
 8002136:	6825      	ldr	r5, [r4, #0]
 8002138:	f015 0506 	ands.w	r5, r5, #6
 800213c:	d107      	bne.n	800214e <_printf_common+0x52>
 800213e:	f104 0a19 	add.w	sl, r4, #25
 8002142:	68e3      	ldr	r3, [r4, #12]
 8002144:	f8d9 2000 	ldr.w	r2, [r9]
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	42ab      	cmp	r3, r5
 800214c:	dc28      	bgt.n	80021a0 <_printf_common+0xa4>
 800214e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002152:	6822      	ldr	r2, [r4, #0]
 8002154:	3300      	adds	r3, #0
 8002156:	bf18      	it	ne
 8002158:	2301      	movne	r3, #1
 800215a:	0692      	lsls	r2, r2, #26
 800215c:	d42d      	bmi.n	80021ba <_printf_common+0xbe>
 800215e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002162:	4639      	mov	r1, r7
 8002164:	4630      	mov	r0, r6
 8002166:	47c0      	blx	r8
 8002168:	3001      	adds	r0, #1
 800216a:	d020      	beq.n	80021ae <_printf_common+0xb2>
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	68e5      	ldr	r5, [r4, #12]
 8002170:	f8d9 2000 	ldr.w	r2, [r9]
 8002174:	f003 0306 	and.w	r3, r3, #6
 8002178:	2b04      	cmp	r3, #4
 800217a:	bf08      	it	eq
 800217c:	1aad      	subeq	r5, r5, r2
 800217e:	68a3      	ldr	r3, [r4, #8]
 8002180:	6922      	ldr	r2, [r4, #16]
 8002182:	bf0c      	ite	eq
 8002184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002188:	2500      	movne	r5, #0
 800218a:	4293      	cmp	r3, r2
 800218c:	bfc4      	itt	gt
 800218e:	1a9b      	subgt	r3, r3, r2
 8002190:	18ed      	addgt	r5, r5, r3
 8002192:	f04f 0900 	mov.w	r9, #0
 8002196:	341a      	adds	r4, #26
 8002198:	454d      	cmp	r5, r9
 800219a:	d11a      	bne.n	80021d2 <_printf_common+0xd6>
 800219c:	2000      	movs	r0, #0
 800219e:	e008      	b.n	80021b2 <_printf_common+0xb6>
 80021a0:	2301      	movs	r3, #1
 80021a2:	4652      	mov	r2, sl
 80021a4:	4639      	mov	r1, r7
 80021a6:	4630      	mov	r0, r6
 80021a8:	47c0      	blx	r8
 80021aa:	3001      	adds	r0, #1
 80021ac:	d103      	bne.n	80021b6 <_printf_common+0xba>
 80021ae:	f04f 30ff 	mov.w	r0, #4294967295
 80021b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b6:	3501      	adds	r5, #1
 80021b8:	e7c3      	b.n	8002142 <_printf_common+0x46>
 80021ba:	18e1      	adds	r1, r4, r3
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	2030      	movs	r0, #48	; 0x30
 80021c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021c4:	4422      	add	r2, r4
 80021c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021ce:	3302      	adds	r3, #2
 80021d0:	e7c5      	b.n	800215e <_printf_common+0x62>
 80021d2:	2301      	movs	r3, #1
 80021d4:	4622      	mov	r2, r4
 80021d6:	4639      	mov	r1, r7
 80021d8:	4630      	mov	r0, r6
 80021da:	47c0      	blx	r8
 80021dc:	3001      	adds	r0, #1
 80021de:	d0e6      	beq.n	80021ae <_printf_common+0xb2>
 80021e0:	f109 0901 	add.w	r9, r9, #1
 80021e4:	e7d8      	b.n	8002198 <_printf_common+0x9c>
	...

080021e8 <_printf_i>:
 80021e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80021f0:	460c      	mov	r4, r1
 80021f2:	7e09      	ldrb	r1, [r1, #24]
 80021f4:	b085      	sub	sp, #20
 80021f6:	296e      	cmp	r1, #110	; 0x6e
 80021f8:	4617      	mov	r7, r2
 80021fa:	4606      	mov	r6, r0
 80021fc:	4698      	mov	r8, r3
 80021fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002200:	f000 80b3 	beq.w	800236a <_printf_i+0x182>
 8002204:	d822      	bhi.n	800224c <_printf_i+0x64>
 8002206:	2963      	cmp	r1, #99	; 0x63
 8002208:	d036      	beq.n	8002278 <_printf_i+0x90>
 800220a:	d80a      	bhi.n	8002222 <_printf_i+0x3a>
 800220c:	2900      	cmp	r1, #0
 800220e:	f000 80b9 	beq.w	8002384 <_printf_i+0x19c>
 8002212:	2958      	cmp	r1, #88	; 0x58
 8002214:	f000 8083 	beq.w	800231e <_printf_i+0x136>
 8002218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800221c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002220:	e032      	b.n	8002288 <_printf_i+0xa0>
 8002222:	2964      	cmp	r1, #100	; 0x64
 8002224:	d001      	beq.n	800222a <_printf_i+0x42>
 8002226:	2969      	cmp	r1, #105	; 0x69
 8002228:	d1f6      	bne.n	8002218 <_printf_i+0x30>
 800222a:	6820      	ldr	r0, [r4, #0]
 800222c:	6813      	ldr	r3, [r2, #0]
 800222e:	0605      	lsls	r5, r0, #24
 8002230:	f103 0104 	add.w	r1, r3, #4
 8002234:	d52a      	bpl.n	800228c <_printf_i+0xa4>
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6011      	str	r1, [r2, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da03      	bge.n	8002246 <_printf_i+0x5e>
 800223e:	222d      	movs	r2, #45	; 0x2d
 8002240:	425b      	negs	r3, r3
 8002242:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002246:	486f      	ldr	r0, [pc, #444]	; (8002404 <_printf_i+0x21c>)
 8002248:	220a      	movs	r2, #10
 800224a:	e039      	b.n	80022c0 <_printf_i+0xd8>
 800224c:	2973      	cmp	r1, #115	; 0x73
 800224e:	f000 809d 	beq.w	800238c <_printf_i+0x1a4>
 8002252:	d808      	bhi.n	8002266 <_printf_i+0x7e>
 8002254:	296f      	cmp	r1, #111	; 0x6f
 8002256:	d020      	beq.n	800229a <_printf_i+0xb2>
 8002258:	2970      	cmp	r1, #112	; 0x70
 800225a:	d1dd      	bne.n	8002218 <_printf_i+0x30>
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	f043 0320 	orr.w	r3, r3, #32
 8002262:	6023      	str	r3, [r4, #0]
 8002264:	e003      	b.n	800226e <_printf_i+0x86>
 8002266:	2975      	cmp	r1, #117	; 0x75
 8002268:	d017      	beq.n	800229a <_printf_i+0xb2>
 800226a:	2978      	cmp	r1, #120	; 0x78
 800226c:	d1d4      	bne.n	8002218 <_printf_i+0x30>
 800226e:	2378      	movs	r3, #120	; 0x78
 8002270:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002274:	4864      	ldr	r0, [pc, #400]	; (8002408 <_printf_i+0x220>)
 8002276:	e055      	b.n	8002324 <_printf_i+0x13c>
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	1d19      	adds	r1, r3, #4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6011      	str	r1, [r2, #0]
 8002280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002288:	2301      	movs	r3, #1
 800228a:	e08c      	b.n	80023a6 <_printf_i+0x1be>
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6011      	str	r1, [r2, #0]
 8002290:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002294:	bf18      	it	ne
 8002296:	b21b      	sxthne	r3, r3
 8002298:	e7cf      	b.n	800223a <_printf_i+0x52>
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	6825      	ldr	r5, [r4, #0]
 800229e:	1d18      	adds	r0, r3, #4
 80022a0:	6010      	str	r0, [r2, #0]
 80022a2:	0628      	lsls	r0, r5, #24
 80022a4:	d501      	bpl.n	80022aa <_printf_i+0xc2>
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	e002      	b.n	80022b0 <_printf_i+0xc8>
 80022aa:	0668      	lsls	r0, r5, #25
 80022ac:	d5fb      	bpl.n	80022a6 <_printf_i+0xbe>
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	4854      	ldr	r0, [pc, #336]	; (8002404 <_printf_i+0x21c>)
 80022b2:	296f      	cmp	r1, #111	; 0x6f
 80022b4:	bf14      	ite	ne
 80022b6:	220a      	movne	r2, #10
 80022b8:	2208      	moveq	r2, #8
 80022ba:	2100      	movs	r1, #0
 80022bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022c0:	6865      	ldr	r5, [r4, #4]
 80022c2:	60a5      	str	r5, [r4, #8]
 80022c4:	2d00      	cmp	r5, #0
 80022c6:	f2c0 8095 	blt.w	80023f4 <_printf_i+0x20c>
 80022ca:	6821      	ldr	r1, [r4, #0]
 80022cc:	f021 0104 	bic.w	r1, r1, #4
 80022d0:	6021      	str	r1, [r4, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d13d      	bne.n	8002352 <_printf_i+0x16a>
 80022d6:	2d00      	cmp	r5, #0
 80022d8:	f040 808e 	bne.w	80023f8 <_printf_i+0x210>
 80022dc:	4665      	mov	r5, ip
 80022de:	2a08      	cmp	r2, #8
 80022e0:	d10b      	bne.n	80022fa <_printf_i+0x112>
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	07db      	lsls	r3, r3, #31
 80022e6:	d508      	bpl.n	80022fa <_printf_i+0x112>
 80022e8:	6923      	ldr	r3, [r4, #16]
 80022ea:	6862      	ldr	r2, [r4, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	bfde      	ittt	le
 80022f0:	2330      	movle	r3, #48	; 0x30
 80022f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80022fa:	ebac 0305 	sub.w	r3, ip, r5
 80022fe:	6123      	str	r3, [r4, #16]
 8002300:	f8cd 8000 	str.w	r8, [sp]
 8002304:	463b      	mov	r3, r7
 8002306:	aa03      	add	r2, sp, #12
 8002308:	4621      	mov	r1, r4
 800230a:	4630      	mov	r0, r6
 800230c:	f7ff fef6 	bl	80020fc <_printf_common>
 8002310:	3001      	adds	r0, #1
 8002312:	d14d      	bne.n	80023b0 <_printf_i+0x1c8>
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	b005      	add	sp, #20
 800231a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800231e:	4839      	ldr	r0, [pc, #228]	; (8002404 <_printf_i+0x21c>)
 8002320:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	6821      	ldr	r1, [r4, #0]
 8002328:	1d1d      	adds	r5, r3, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6015      	str	r5, [r2, #0]
 800232e:	060a      	lsls	r2, r1, #24
 8002330:	d50b      	bpl.n	800234a <_printf_i+0x162>
 8002332:	07ca      	lsls	r2, r1, #31
 8002334:	bf44      	itt	mi
 8002336:	f041 0120 	orrmi.w	r1, r1, #32
 800233a:	6021      	strmi	r1, [r4, #0]
 800233c:	b91b      	cbnz	r3, 8002346 <_printf_i+0x15e>
 800233e:	6822      	ldr	r2, [r4, #0]
 8002340:	f022 0220 	bic.w	r2, r2, #32
 8002344:	6022      	str	r2, [r4, #0]
 8002346:	2210      	movs	r2, #16
 8002348:	e7b7      	b.n	80022ba <_printf_i+0xd2>
 800234a:	064d      	lsls	r5, r1, #25
 800234c:	bf48      	it	mi
 800234e:	b29b      	uxthmi	r3, r3
 8002350:	e7ef      	b.n	8002332 <_printf_i+0x14a>
 8002352:	4665      	mov	r5, ip
 8002354:	fbb3 f1f2 	udiv	r1, r3, r2
 8002358:	fb02 3311 	mls	r3, r2, r1, r3
 800235c:	5cc3      	ldrb	r3, [r0, r3]
 800235e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002362:	460b      	mov	r3, r1
 8002364:	2900      	cmp	r1, #0
 8002366:	d1f5      	bne.n	8002354 <_printf_i+0x16c>
 8002368:	e7b9      	b.n	80022de <_printf_i+0xf6>
 800236a:	6813      	ldr	r3, [r2, #0]
 800236c:	6825      	ldr	r5, [r4, #0]
 800236e:	6961      	ldr	r1, [r4, #20]
 8002370:	1d18      	adds	r0, r3, #4
 8002372:	6010      	str	r0, [r2, #0]
 8002374:	0628      	lsls	r0, r5, #24
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	d501      	bpl.n	800237e <_printf_i+0x196>
 800237a:	6019      	str	r1, [r3, #0]
 800237c:	e002      	b.n	8002384 <_printf_i+0x19c>
 800237e:	066a      	lsls	r2, r5, #25
 8002380:	d5fb      	bpl.n	800237a <_printf_i+0x192>
 8002382:	8019      	strh	r1, [r3, #0]
 8002384:	2300      	movs	r3, #0
 8002386:	6123      	str	r3, [r4, #16]
 8002388:	4665      	mov	r5, ip
 800238a:	e7b9      	b.n	8002300 <_printf_i+0x118>
 800238c:	6813      	ldr	r3, [r2, #0]
 800238e:	1d19      	adds	r1, r3, #4
 8002390:	6011      	str	r1, [r2, #0]
 8002392:	681d      	ldr	r5, [r3, #0]
 8002394:	6862      	ldr	r2, [r4, #4]
 8002396:	2100      	movs	r1, #0
 8002398:	4628      	mov	r0, r5
 800239a:	f7fd ff39 	bl	8000210 <memchr>
 800239e:	b108      	cbz	r0, 80023a4 <_printf_i+0x1bc>
 80023a0:	1b40      	subs	r0, r0, r5
 80023a2:	6060      	str	r0, [r4, #4]
 80023a4:	6863      	ldr	r3, [r4, #4]
 80023a6:	6123      	str	r3, [r4, #16]
 80023a8:	2300      	movs	r3, #0
 80023aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ae:	e7a7      	b.n	8002300 <_printf_i+0x118>
 80023b0:	6923      	ldr	r3, [r4, #16]
 80023b2:	462a      	mov	r2, r5
 80023b4:	4639      	mov	r1, r7
 80023b6:	4630      	mov	r0, r6
 80023b8:	47c0      	blx	r8
 80023ba:	3001      	adds	r0, #1
 80023bc:	d0aa      	beq.n	8002314 <_printf_i+0x12c>
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	079b      	lsls	r3, r3, #30
 80023c2:	d413      	bmi.n	80023ec <_printf_i+0x204>
 80023c4:	68e0      	ldr	r0, [r4, #12]
 80023c6:	9b03      	ldr	r3, [sp, #12]
 80023c8:	4298      	cmp	r0, r3
 80023ca:	bfb8      	it	lt
 80023cc:	4618      	movlt	r0, r3
 80023ce:	e7a3      	b.n	8002318 <_printf_i+0x130>
 80023d0:	2301      	movs	r3, #1
 80023d2:	464a      	mov	r2, r9
 80023d4:	4639      	mov	r1, r7
 80023d6:	4630      	mov	r0, r6
 80023d8:	47c0      	blx	r8
 80023da:	3001      	adds	r0, #1
 80023dc:	d09a      	beq.n	8002314 <_printf_i+0x12c>
 80023de:	3501      	adds	r5, #1
 80023e0:	68e3      	ldr	r3, [r4, #12]
 80023e2:	9a03      	ldr	r2, [sp, #12]
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	42ab      	cmp	r3, r5
 80023e8:	dcf2      	bgt.n	80023d0 <_printf_i+0x1e8>
 80023ea:	e7eb      	b.n	80023c4 <_printf_i+0x1dc>
 80023ec:	2500      	movs	r5, #0
 80023ee:	f104 0919 	add.w	r9, r4, #25
 80023f2:	e7f5      	b.n	80023e0 <_printf_i+0x1f8>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ac      	bne.n	8002352 <_printf_i+0x16a>
 80023f8:	7803      	ldrb	r3, [r0, #0]
 80023fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002402:	e76c      	b.n	80022de <_printf_i+0xf6>
 8002404:	0800266d 	.word	0x0800266d
 8002408:	0800267e 	.word	0x0800267e

0800240c <_sbrk_r>:
 800240c:	b538      	push	{r3, r4, r5, lr}
 800240e:	4c06      	ldr	r4, [pc, #24]	; (8002428 <_sbrk_r+0x1c>)
 8002410:	2300      	movs	r3, #0
 8002412:	4605      	mov	r5, r0
 8002414:	4608      	mov	r0, r1
 8002416:	6023      	str	r3, [r4, #0]
 8002418:	f7ff f8e8 	bl	80015ec <_sbrk>
 800241c:	1c43      	adds	r3, r0, #1
 800241e:	d102      	bne.n	8002426 <_sbrk_r+0x1a>
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	b103      	cbz	r3, 8002426 <_sbrk_r+0x1a>
 8002424:	602b      	str	r3, [r5, #0]
 8002426:	bd38      	pop	{r3, r4, r5, pc}
 8002428:	200000ec 	.word	0x200000ec

0800242c <__sread>:
 800242c:	b510      	push	{r4, lr}
 800242e:	460c      	mov	r4, r1
 8002430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002434:	f000 f896 	bl	8002564 <_read_r>
 8002438:	2800      	cmp	r0, #0
 800243a:	bfab      	itete	ge
 800243c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800243e:	89a3      	ldrhlt	r3, [r4, #12]
 8002440:	181b      	addge	r3, r3, r0
 8002442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002446:	bfac      	ite	ge
 8002448:	6563      	strge	r3, [r4, #84]	; 0x54
 800244a:	81a3      	strhlt	r3, [r4, #12]
 800244c:	bd10      	pop	{r4, pc}

0800244e <__swrite>:
 800244e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002452:	461f      	mov	r7, r3
 8002454:	898b      	ldrh	r3, [r1, #12]
 8002456:	05db      	lsls	r3, r3, #23
 8002458:	4605      	mov	r5, r0
 800245a:	460c      	mov	r4, r1
 800245c:	4616      	mov	r6, r2
 800245e:	d505      	bpl.n	800246c <__swrite+0x1e>
 8002460:	2302      	movs	r3, #2
 8002462:	2200      	movs	r2, #0
 8002464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002468:	f000 f868 	bl	800253c <_lseek_r>
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002476:	81a3      	strh	r3, [r4, #12]
 8002478:	4632      	mov	r2, r6
 800247a:	463b      	mov	r3, r7
 800247c:	4628      	mov	r0, r5
 800247e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002482:	f000 b817 	b.w	80024b4 <_write_r>

08002486 <__sseek>:
 8002486:	b510      	push	{r4, lr}
 8002488:	460c      	mov	r4, r1
 800248a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800248e:	f000 f855 	bl	800253c <_lseek_r>
 8002492:	1c43      	adds	r3, r0, #1
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	bf15      	itete	ne
 8002498:	6560      	strne	r0, [r4, #84]	; 0x54
 800249a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800249e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024a2:	81a3      	strheq	r3, [r4, #12]
 80024a4:	bf18      	it	ne
 80024a6:	81a3      	strhne	r3, [r4, #12]
 80024a8:	bd10      	pop	{r4, pc}

080024aa <__sclose>:
 80024aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ae:	f000 b813 	b.w	80024d8 <_close_r>
	...

080024b4 <_write_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	4c07      	ldr	r4, [pc, #28]	; (80024d4 <_write_r+0x20>)
 80024b8:	4605      	mov	r5, r0
 80024ba:	4608      	mov	r0, r1
 80024bc:	4611      	mov	r1, r2
 80024be:	2200      	movs	r2, #0
 80024c0:	6022      	str	r2, [r4, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f7ff f845 	bl	8001552 <_write>
 80024c8:	1c43      	adds	r3, r0, #1
 80024ca:	d102      	bne.n	80024d2 <_write_r+0x1e>
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	b103      	cbz	r3, 80024d2 <_write_r+0x1e>
 80024d0:	602b      	str	r3, [r5, #0]
 80024d2:	bd38      	pop	{r3, r4, r5, pc}
 80024d4:	200000ec 	.word	0x200000ec

080024d8 <_close_r>:
 80024d8:	b538      	push	{r3, r4, r5, lr}
 80024da:	4c06      	ldr	r4, [pc, #24]	; (80024f4 <_close_r+0x1c>)
 80024dc:	2300      	movs	r3, #0
 80024de:	4605      	mov	r5, r0
 80024e0:	4608      	mov	r0, r1
 80024e2:	6023      	str	r3, [r4, #0]
 80024e4:	f7ff f851 	bl	800158a <_close>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	d102      	bne.n	80024f2 <_close_r+0x1a>
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	b103      	cbz	r3, 80024f2 <_close_r+0x1a>
 80024f0:	602b      	str	r3, [r5, #0]
 80024f2:	bd38      	pop	{r3, r4, r5, pc}
 80024f4:	200000ec 	.word	0x200000ec

080024f8 <_fstat_r>:
 80024f8:	b538      	push	{r3, r4, r5, lr}
 80024fa:	4c07      	ldr	r4, [pc, #28]	; (8002518 <_fstat_r+0x20>)
 80024fc:	2300      	movs	r3, #0
 80024fe:	4605      	mov	r5, r0
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	6023      	str	r3, [r4, #0]
 8002506:	f7ff f84b 	bl	80015a0 <_fstat>
 800250a:	1c43      	adds	r3, r0, #1
 800250c:	d102      	bne.n	8002514 <_fstat_r+0x1c>
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	b103      	cbz	r3, 8002514 <_fstat_r+0x1c>
 8002512:	602b      	str	r3, [r5, #0]
 8002514:	bd38      	pop	{r3, r4, r5, pc}
 8002516:	bf00      	nop
 8002518:	200000ec 	.word	0x200000ec

0800251c <_isatty_r>:
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	4c06      	ldr	r4, [pc, #24]	; (8002538 <_isatty_r+0x1c>)
 8002520:	2300      	movs	r3, #0
 8002522:	4605      	mov	r5, r0
 8002524:	4608      	mov	r0, r1
 8002526:	6023      	str	r3, [r4, #0]
 8002528:	f7ff f849 	bl	80015be <_isatty>
 800252c:	1c43      	adds	r3, r0, #1
 800252e:	d102      	bne.n	8002536 <_isatty_r+0x1a>
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	b103      	cbz	r3, 8002536 <_isatty_r+0x1a>
 8002534:	602b      	str	r3, [r5, #0]
 8002536:	bd38      	pop	{r3, r4, r5, pc}
 8002538:	200000ec 	.word	0x200000ec

0800253c <_lseek_r>:
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	4c07      	ldr	r4, [pc, #28]	; (800255c <_lseek_r+0x20>)
 8002540:	4605      	mov	r5, r0
 8002542:	4608      	mov	r0, r1
 8002544:	4611      	mov	r1, r2
 8002546:	2200      	movs	r2, #0
 8002548:	6022      	str	r2, [r4, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	f7ff f841 	bl	80015d2 <_lseek>
 8002550:	1c43      	adds	r3, r0, #1
 8002552:	d102      	bne.n	800255a <_lseek_r+0x1e>
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	b103      	cbz	r3, 800255a <_lseek_r+0x1e>
 8002558:	602b      	str	r3, [r5, #0]
 800255a:	bd38      	pop	{r3, r4, r5, pc}
 800255c:	200000ec 	.word	0x200000ec

08002560 <__malloc_lock>:
 8002560:	4770      	bx	lr

08002562 <__malloc_unlock>:
 8002562:	4770      	bx	lr

08002564 <_read_r>:
 8002564:	b538      	push	{r3, r4, r5, lr}
 8002566:	4c07      	ldr	r4, [pc, #28]	; (8002584 <_read_r+0x20>)
 8002568:	4605      	mov	r5, r0
 800256a:	4608      	mov	r0, r1
 800256c:	4611      	mov	r1, r2
 800256e:	2200      	movs	r2, #0
 8002570:	6022      	str	r2, [r4, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	f7fe ffd0 	bl	8001518 <_read>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	d102      	bne.n	8002582 <_read_r+0x1e>
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	b103      	cbz	r3, 8002582 <_read_r+0x1e>
 8002580:	602b      	str	r3, [r5, #0]
 8002582:	bd38      	pop	{r3, r4, r5, pc}
 8002584:	200000ec 	.word	0x200000ec

08002588 <_init>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr

08002594 <_fini>:
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002596:	bf00      	nop
 8002598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259a:	bc08      	pop	{r3}
 800259c:	469e      	mov	lr, r3
 800259e:	4770      	bx	lr
